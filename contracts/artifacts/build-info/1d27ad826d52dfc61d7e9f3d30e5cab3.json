{
	"id": "1d27ad826d52dfc61d7e9f3d30e5cab3",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.28",
	"solcLongVersion": "0.8.28+commit.7893614a",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/RentBid.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/**\n * @title RentBid\n * @dev Place a bid to rent an apartment from a landlord\n * @custom:dev-run-script ./scripts/rent_bid.ts\n */\ncontract RentBid {\n\n\n    struct Bid {\n        address bidder;\n        uint256 amount;\n    }\n\n    address public landlord;\n    uint256 public biddingEnd;\n    uint256 public minimumBid;\n    Bid public highestBid;\n\n    mapping(address => uint256) public pendingReturns;\n    bool public ended;\n\n    event HighestBidIncreased(address bidder, uint256 amount);\n    event AuctionEnded(address winner, uint256 amount);\n\n    constructor(uint256 _biddingTime, uint256 _minimumBid) {\n        landlord = msg.sender;\n        biddingEnd = block.timestamp + _biddingTime;\n        minimumBid = _minimumBid;\n    }\n\n    function bid() external payable {\n        require(block.timestamp <= biddingEnd, \"Bidding ended.\");\n        require(msg.value >= minimumBid, \"Bid too low.\");\n        require(msg.value > highestBid.amount, \"There already is a higher bid.\");\n\n        if (highestBid.amount != 0) {\n            pendingReturns[highestBid.bidder] = highestBid.amount;\n        }\n\n        highestBid = Bid(msg.sender, msg.value);\n        emit HighestBidIncreased(msg.sender, msg.value);\n    }\n\n    function withdraw() external {\n        uint amount = pendingReturns[msg.sender];\n        require(amount > 0, \"No funds to withdraw.\");\n        pendingReturns[msg.sender] = 0;\n        payable(msg.sender).transfer(amount);\n    }\n\n    function endAuction() external {\n        require(block.timestamp >= biddingEnd, \"Auction not yet ended.\");\n        require(!ended, \"Auction already ended.\");\n\n        ended = true;\n        emit AuctionEnded(highestBid.bidder, highestBid.amount);\n\n        payable(landlord).transfer(highestBid.amount);\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.deployedBytecode",
						"evm.methodIdentifiers"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"contracts/RentBid.sol": {
				"RentBid": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_biddingTime",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "_minimumBid",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "winner",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "AuctionEnded",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "bidder",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "HighestBidIncreased",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "bid",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "biddingEnd",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "endAuction",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "ended",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "highestBid",
							"outputs": [
								{
									"internalType": "address",
									"name": "bidder",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "landlord",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "minimumBid",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "pendingReturns",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "withdraw",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"metadata": {
						"optimizer_settings": {
							"is_debug_logging_enabled": false,
							"is_fallback_to_size_enabled": false,
							"is_verify_each_enabled": false,
							"level_back_end": "Aggressive",
							"level_middle_end": "Aggressive",
							"level_middle_end_size": "Zero"
						},
						"revive_pallet_version": null,
						"revive_version": "0.1.0-dev.12+commit.66f9a4d.llvm-18.1.8",
						"solc_metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_biddingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumBid\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AuctionEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"HighestBidIncreased\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"biddingEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ended\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"highestBid\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"landlord\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumBid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingReturns\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"custom:dev-run-script\":\"./scripts/rent_bid.ts\",\"details\":\"Place a bid to rent an apartment from a landlord\",\"kind\":\"dev\",\"methods\":{},\"title\":\"RentBid\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RentBid.sol\":\"RentBid\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/RentBid.sol\":{\"keccak256\":\"0x392655cc0d8ec76203254d71cc922e68bdf72df4eaf170e82c402b4654d576ba\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://029056ffccfbf7e4105a0dec60f2408916086989fb4256c80a2f91dc37bc5d45\",\"dweb:/ipfs/QmVSm653sYFpeSsgtYCJS1M5tWT9e3XnVJTrNriNtUc77K\"]}},\"version\":1}",
						"solc_version": "0.8.28+commit.7893614a.Emscripten.clang"
					},
					"devdoc": {
						"custom:dev-run-script": "./scripts/rent_bid.ts",
						"details": "Place a bid to rent an apartment from a landlord",
						"kind": "dev",
						"methods": {},
						"title": "RentBid",
						"version": 1
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					},
					"storageLayout": {
						"storage": [
							{
								"astId": 9,
								"contract": "contracts/RentBid.sol:RentBid",
								"label": "landlord",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							},
							{
								"astId": 11,
								"contract": "contracts/RentBid.sol:RentBid",
								"label": "biddingEnd",
								"offset": 0,
								"slot": "1",
								"type": "t_uint256"
							},
							{
								"astId": 13,
								"contract": "contracts/RentBid.sol:RentBid",
								"label": "minimumBid",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 16,
								"contract": "contracts/RentBid.sol:RentBid",
								"label": "highestBid",
								"offset": 0,
								"slot": "3",
								"type": "t_struct(Bid)7_storage"
							},
							{
								"astId": 20,
								"contract": "contracts/RentBid.sol:RentBid",
								"label": "pendingReturns",
								"offset": 0,
								"slot": "5",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 22,
								"contract": "contracts/RentBid.sol:RentBid",
								"label": "ended",
								"offset": 0,
								"slot": "6",
								"type": "t_bool"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_struct(Bid)7_storage": {
								"encoding": "inplace",
								"label": "struct RentBid.Bid",
								"members": [
									{
										"astId": 4,
										"contract": "contracts/RentBid.sol:RentBid",
										"label": "bidder",
										"offset": 0,
										"slot": "0",
										"type": "t_address"
									},
									{
										"astId": 6,
										"contract": "contracts/RentBid.sol:RentBid",
										"label": "amount",
										"offset": 0,
										"slot": "1",
										"type": "t_uint256"
									}
								],
								"numberOfBytes": "64"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"evm": {
						"assembly": "// RO data = 0/0 bytes\n// RW data = 64/65616 bytes\n// Stack size = 16384 bytes\n\n// Instructions = 8392\n// Code size = 25843 bytes\n\n      : @0 (gas: 2)\n     0: i32 a2 = a0 >> 0x10\n     3: jump @6 if a2 != 0\n      : @1 (gas: 2)\n     6: a2 = 0x10001\n    11: jump @6 if a1 >=u a2\n      : @2 (gas: 4)\n    14: a1 = a1 + a0\n    17: i32 a1 = a1 + 0x1f\n    20: a1 = a1 & 0xffffffffffffffe0\n    23: jump @7 if a1 >=u 65537\n      : @3 (gas: 2)\n    29: a3 = i32 [0x20040]\n    34: jump @5 if a3 >=u a1\n      : @4 (gas: 4)\n    37: u32 [0x20040] = a1\n    42: a1 = 0x20050\n    47: a0 = a0 + a1\n    50: ret\n      : @5 (gas: 3)\n    52: a1 = 0x20050\n    57: a0 = a0 + a1\n    60: ret\n      : @6 (gas: 1)\n    62: trap\n      : @7 (gas: 1)\n    63: trap\n      : @8 (gas: 13)\n    64: sp = sp + 0xffffffffffffffd8\n    67: u64 [sp + 0x20] = ra\n    70: u64 [sp + 0x18] = s0\n    73: u64 [sp + 0x10] = s1\n    76: a2 = u64 [a1]\n    78: u64 [sp + 0x8] = a2\n    81: a2 = u64 [a1 + 0x8]\n    84: u64 [sp] = a2\n    86: s0 = u64 [a1 + 0x10]\n    89: s1 = u64 [a1 + 0x18]\n    92: i32 a0 = a0 + 0\n    94: a1 = 0x20\n    97: ra = 2, jump @0\n      : @9 [@dyn 1] (gas: 71)\n   101: a1 = reverse s1\n   103: a2 = reverse s0\n   105: a3 = u64 [sp]\n   107: a3 = reverse a3\n   109: a4 = u64 [sp + 0x8]\n   112: a4 = reverse a4\n   114: u8 [a0 + 0x18] = a4\n   117: u8 [a0 + 0x10] = a3\n   120: u8 [a0 + 0x8] = a2\n   123: u8 [a0] = a1\n   125: a5 = a4 >> 0x38\n   128: u8 [a0 + 0x1f] = a5\n   131: a5 = a4 >> 0x30\n   134: u8 [a0 + 0x1e] = a5\n   137: a5 = a4 >> 0x28\n   140: u8 [a0 + 0x1d] = a5\n   143: a5 = a4 >> 0x20\n   146: u8 [a0 + 0x1c] = a5\n   149: a5 = a4 >> 0x18\n   152: u8 [a0 + 0x1b] = a5\n   155: a5 = a4 >> 0x10\n   158: u8 [a0 + 0x1a] = a5\n   161: a4 = a4 >> 0x8\n   164: u8 [a0 + 0x19] = a4\n   167: a4 = a3 >> 0x38\n   170: u8 [a0 + 0x17] = a4\n   173: a4 = a3 >> 0x30\n   176: u8 [a0 + 0x16] = a4\n   179: a4 = a3 >> 0x28\n   182: u8 [a0 + 0x15] = a4\n   185: a4 = a3 >> 0x20\n   188: u8 [a0 + 0x14] = a4\n   191: a4 = a3 >> 0x18\n   194: u8 [a0 + 0x13] = a4\n   197: a4 = a3 >> 0x10\n   200: u8 [a0 + 0x12] = a4\n   203: a3 = a3 >> 0x8\n   206: u8 [a0 + 0x11] = a3\n   209: a3 = a2 >> 0x38\n   212: u8 [a0 + 0xf] = a3\n   215: a3 = a2 >> 0x30\n   218: u8 [a0 + 0xe] = a3\n   221: a3 = a2 >> 0x28\n   224: u8 [a0 + 0xd] = a3\n   227: a3 = a2 >> 0x20\n   230: u8 [a0 + 0xc] = a3\n   233: a3 = a2 >> 0x18\n   236: u8 [a0 + 0xb] = a3\n   239: a3 = a2 >> 0x10\n   242: u8 [a0 + 0xa] = a3\n   245: a2 = a2 >> 0x8\n   248: u8 [a0 + 0x9] = a2\n   251: a2 = a1 >> 0x38\n   254: u8 [a0 + 0x7] = a2\n   257: a2 = a1 >> 0x30\n   260: u8 [a0 + 0x6] = a2\n   263: a2 = a1 >> 0x28\n   266: u8 [a0 + 0x5] = a2\n   269: a2 = a1 >> 0x20\n   272: u8 [a0 + 0x4] = a2\n   275: a2 = a1 >> 0x18\n   278: u8 [a0 + 0x3] = a2\n   281: a2 = a1 >> 0x10\n   284: u8 [a0 + 0x2] = a2\n   287: a1 = a1 >> 0x8\n   290: u8 [a0 + 0x1] = a1\n   293: ra = u64 [sp + 0x20]\n   296: s0 = u64 [sp + 0x18]\n   299: s1 = u64 [sp + 0x10]\n   302: sp = sp + 0x28\n   305: ret\n      : @10 (gas: 6)\n   307: sp = sp + 0xfffffffffffffff0\n   310: u64 [sp + 0x8] = ra\n   313: u64 [sp] = s0\n   315: s0 = a0 & 0x1\n   318: ecalli 3 // 'call_data_size'\n   320: fallthrough\n      : @11 (gas: 2)\n   321: u32 [0x20044] = a0\n   326: jump @13 if s0 == 0\n      : @12 (gas: 1)\n   329: ra = 4, jump @14\n      : @13 [@dyn 2] (gas: 1)\n   333: ra = 6, jump @30\n      : @14 [@dyn 3] (gas: 9)\n   338: sp = sp + 0xffffffffffffff40\n   342: u64 [sp + 0xb8] = ra\n   346: u64 [sp + 0xb0] = s0\n   350: u64 [sp + 0xa8] = s1\n   354: s0 = sp + 0xc0\n   358: sp = sp & 0xffffffffffffffe0\n   361: a0 = 0x40\n   364: a1 = 0x20\n   367: ra = 8, jump @0\n      : @15 [@dyn 4] (gas: 39)\n   372: u8 [a0 + 31] = 0x80\n   377: u8 [a0 + 30] = 0\n   380: u8 [a0 + 29] = 0\n   383: u8 [a0 + 28] = 0\n   386: u8 [a0 + 27] = 0\n   389: u8 [a0 + 26] = 0\n   392: u8 [a0 + 25] = 0\n   395: u8 [a0 + 24] = 0\n   398: u8 [a0 + 23] = 0\n   401: u8 [a0 + 22] = 0\n   404: u8 [a0 + 21] = 0\n   407: u8 [a0 + 20] = 0\n   410: u8 [a0 + 19] = 0\n   413: u8 [a0 + 18] = 0\n   416: u8 [a0 + 17] = 0\n   419: u8 [a0 + 16] = 0\n   422: u8 [a0 + 15] = 0\n   425: u8 [a0 + 14] = 0\n   428: u8 [a0 + 13] = 0\n   431: u8 [a0 + 12] = 0\n   434: u8 [a0 + 11] = 0\n   437: u8 [a0 + 10] = 0\n   440: u8 [a0 + 9] = 0\n   443: u8 [a0 + 8] = 0\n   446: u8 [a0 + 7] = 0\n   449: u8 [a0 + 6] = 0\n   452: u8 [a0 + 5] = 0\n   455: u8 [a0 + 4] = 0\n   458: u8 [a0 + 3] = 0\n   461: u8 [a0 + 2] = 0\n   464: u8 [a0 + 1] = 0\n   467: u8 [a0 + 0] = 0\n   469: u64 [sp + 152] = 0\n   473: u64 [sp + 128] = 0\n   477: u64 [sp + 136] = 0\n   481: u64 [sp + 144] = 0\n   485: i32 a0 = sp + 0x80\n   489: ecalli 14 // 'value_transferred'\n   491: fallthrough\n      : @16 (gas: 8)\n   492: a0 = u64 [sp + 0x90]\n   496: a1 = u64 [sp + 0x98]\n   500: a2 = u64 [sp + 0x88]\n   504: a3 = u64 [sp + 0x80]\n   508: a1 = a1 | a2\n   511: a0 = a0 | a3\n   514: a0 = a0 | a1\n   517: jump @22 if a0 != 0\n      : @17 (gas: 20)\n   521: a0 = sp + 0x40\n   524: ra = 0xa\n   527: sp = sp + 0xffffffffffffff70\n   531: u64 [sp + 0x88] = ra\n   535: u64 [sp + 0x80] = s0\n   539: u64 [sp + 0x78] = s1\n   542: s0 = sp + 0x90\n   546: sp = sp & 0xfffffffffffffff0\n   549: s1 = i32 [0x20044]\n   554: u64 [sp + 0x8] = a0\n   557: a0 = s1 << 0x20\n   560: a0 = a0 >> 0x20\n   563: u64 [sp + 72] = 0\n   566: u64 [sp + 64] = 0\n   569: u64 [sp + 0x30] = a0\n   572: a0 = sp + 0x50\n   575: a1 = sp + 0x30\n   578: u64 [sp + 56] = 0\n   581: ra = 0x3c\n   584: jump @57\n      : @18 [@dyn 5] (gas: 96)\n   587: t0 = u64 [sp + 0x40]\n   590: a0 = u64 [sp + 0x48]\n   593: a1 = u64 [sp + 0x50]\n   596: a3 = u64 [sp + 0x58]\n   599: a4 = u64 [sp + 0x60]\n   602: a5 = u64 [sp + 0x68]\n   605: s1 = u64 [sp + 0x70]\n   608: a2 = u64 [sp + 0x78]\n   611: u64 [sp + 0x18] = a2\n   614: u64 [sp + 0x10] = s1\n   617: u64 [sp + 0x8] = a5\n   620: u64 [sp] = a4\n   622: u64 [sp + 0x38] = a3\n   625: u64 [sp + 0x30] = a1\n   628: u64 [sp + 0x28] = a0\n   631: a0 = sp + 0x20\n   634: a1 = sp\n   636: u64 [sp + 0x20] = t0\n   639: ra = 0xc\n   642: sp = sp + 0xfffffffffffffea0\n   646: u64 [sp + 0x158] = ra\n   650: u64 [sp + 0x150] = s0\n   654: u64 [sp + 0x148] = s1\n   658: s0 = sp + 0x160\n   662: sp = sp & 0xffffffffffffffe0\n   665: a2 = u64 [a1 + 0x18]\n   668: u64 [sp + 0x40] = a2\n   671: a2 = u64 [a1 + 0x10]\n   674: u64 [sp + 0x48] = a2\n   677: a2 = u64 [a1 + 0x8]\n   680: u64 [sp + 0x50] = a2\n   683: a1 = u64 [a1]\n   685: u64 [sp + 0x58] = a1\n   688: a1 = u64 [a0 + 0x18]\n   691: u64 [sp + 0x38] = a1\n   694: a1 = u64 [a0 + 0x10]\n   697: u64 [sp + 0x30] = a1\n   700: a1 = u64 [a0]\n   702: u64 [sp + 0x28] = a1\n   705: a0 = u64 [a0 + 0x8]\n   708: u64 [sp + 0x20] = a0\n   711: i32 a0 = sp + 0xa0\n   715: ecalli 4 // 'caller'\n   717: a0 = u64 [sp + 0xa8]\n   721: a1 = i32 [sp + 0xb0]\n   725: a2 = u64 [sp + 0xa0]\n   729: a0 = reverse a0\n   731: a3 = a0 << 0x20\n   734: a1 = reverse a1\n   736: a1 = a1 >> 0x20\n   739: a1 = a1 | a3\n   742: u64 [sp + 0x18] = a1\n   745: a0 = a0 >> 0x20\n   748: s1 = reverse a2\n   750: a1 = s1 << 0x20\n   753: a0 = a0 | a1\n   756: u64 [sp + 0x10] = a0\n   759: s1 = s1 >> 0x20\n   762: u64 [sp + 280] = 0\n   766: u64 [sp + 272] = 0\n   770: u64 [sp + 264] = 0\n   774: u64 [sp + 256] = 0\n   778: u64 [sp + 312] = 0\n   782: u64 [sp + 304] = 0\n   786: u64 [sp + 296] = 0\n   790: u64 [sp + 288] = 0\n   794: u32 [sp + 224] = 0x20\n   799: i32 a1 = sp + 0x100\n   803: i32 a3 = sp + 0x120\n   807: i32 a4 = sp + 0xe0\n   811: a2 = 0xffffffffffffffff\n   814: a0 = 0\n   816: ecalli 6 // 'get_storage'\n   818: a0 = u32 [sp + 0x134]\n   822: a0 = a0 << 0x20\n   825: a1 = u64 [sp + 0x138]\n   829: a0 = a0 | s1\n   832: u64 [sp + 280] = 0\n   836: u64 [sp + 272] = 0\n   840: u64 [sp + 264] = 0\n   844: u64 [sp + 256] = 0\n   848: u64 [sp + 0x138] = a1\n   852: u64 [sp + 0x130] = a0\n   856: a0 = u64 [sp + 0x10]\n   859: u64 [sp + 0x128] = a0\n   863: a0 = u64 [sp + 0x18]\n   866: u64 [sp + 0x120] = a0\n   870: i32 a1 = sp + 0x100\n   874: i32 a3 = sp + 0x120\n   878: a2 = 0xffffffffffffffff\n   881: a4 = 0x20\n   884: a0 = 0\n   886: ecalli 13 // 'set_storage'\n   888: i32 a0 = sp + 0xc0\n   892: ecalli 8 // 'now'\n   894: jump @79\n      : @19 [@dyn 6] (gas: 3)\n   897: a0 = 0x40\n   900: a1 = 0x20\n   903: ra = 14, jump @0\n      : @20 [@dyn 7] (gas: 100)\n   908: a1 = u8 [a0 + 0x11]\n   911: a2 = u8 [a0 + 0x10]\n   914: a3 = u8 [a0 + 0x12]\n   917: a4 = u8 [a0 + 0x13]\n   920: a1 = a1 << 0x8\n   923: a1 = a1 | a2\n   926: a3 = a3 << 0x10\n   929: a4 = a4 << 0x18\n   932: a3 = a3 | a4\n   935: a1 = a1 | a3\n   938: a2 = u8 [a0 + 0x15]\n   941: a3 = u8 [a0 + 0x14]\n   944: a4 = u8 [a0 + 0x16]\n   947: a5 = u8 [a0 + 0x17]\n   950: a2 = a2 << 0x8\n   953: a2 = a2 | a3\n   956: a4 = a4 << 0x10\n   959: a5 = a5 << 0x18\n   962: a4 = a4 | a5\n   965: a2 = a2 | a4\n   968: a2 = a2 << 0x20\n   971: t0 = a2 | a1\n   974: a2 = u8 [a0 + 0x1]\n   977: a3 = u8 [a0]\n   979: a4 = u8 [a0 + 0x2]\n   982: a5 = u8 [a0 + 0x3]\n   985: a2 = a2 << 0x8\n   988: a2 = a2 | a3\n   991: a4 = a4 << 0x10\n   994: a5 = a5 << 0x18\n   997: a4 = a4 | a5\n  1000: a2 = a2 | a4\n  1003: a3 = u8 [a0 + 0x5]\n  1006: a4 = u8 [a0 + 0x4]\n  1009: a5 = u8 [a0 + 0x6]\n  1012: s1 = u8 [a0 + 0x7]\n  1015: a3 = a3 << 0x8\n  1018: a3 = a3 | a4\n  1021: a5 = a5 << 0x10\n  1024: s1 = s1 << 0x18\n  1027: a5 = a5 | s1\n  1030: a3 = a3 | a5\n  1033: a3 = a3 << 0x20\n  1036: a2 = a2 | a3\n  1039: a3 = u8 [a0 + 0x19]\n  1042: a4 = u8 [a0 + 0x18]\n  1045: a5 = u8 [a0 + 0x1a]\n  1048: s1 = u8 [a0 + 0x1b]\n  1051: a3 = a3 << 0x8\n  1054: a3 = a3 | a4\n  1057: a5 = a5 << 0x10\n  1060: s1 = s1 << 0x18\n  1063: a5 = a5 | s1\n  1066: a3 = a3 | a5\n  1069: a4 = u8 [a0 + 0x1d]\n  1072: a5 = u8 [a0 + 0x1c]\n  1075: s1 = u8 [a0 + 0x1e]\n  1078: a1 = u8 [a0 + 0x1f]\n  1081: a4 = a4 << 0x8\n  1084: a4 = a4 | a5\n  1087: s1 = s1 << 0x10\n  1090: a1 = a1 << 0x18\n  1093: a1 = a1 | s1\n  1096: a1 = a1 | a4\n  1099: a1 = a1 << 0x20\n  1102: a3 = a3 | a1\n  1105: a1 = u8 [a0 + 0x9]\n  1108: a4 = u8 [a0 + 0x8]\n  1111: a5 = u8 [a0 + 0xa]\n  1114: s1 = u8 [a0 + 0xb]\n  1117: a1 = a1 << 0x8\n  1120: a1 = a1 | a4\n  1123: a5 = a5 << 0x10\n  1126: s1 = s1 << 0x18\n  1129: a5 = a5 | s1\n  1132: a1 = a1 | a5\n  1135: a4 = u8 [a0 + 0xd]\n  1138: a5 = u8 [a0 + 0xc]\n  1141: s1 = u8 [a0 + 0xe]\n  1144: a0 = u8 [a0 + 0xf]\n  1147: a4 = a4 << 0x8\n  1150: a4 = a4 | a5\n  1153: s1 = s1 << 0x10\n  1156: a0 = a0 << 0x18\n  1159: a0 = a0 | s1\n  1162: a0 = a0 | a4\n  1165: a0 = a0 << 0x20\n  1168: a0 = a0 | a1\n  1171: a0 = reverse a0\n  1173: s1 = reverse a3\n  1175: a1 = reverse a2\n  1177: a2 = reverse t0\n  1179: a1 = a1 | a2\n  1182: a2 = s1 | a0\n  1185: a2 = a2 | a1\n  1188: a2 = a2 >> 0x20\n  1191: a0 = a0 | a1\n  1194: a0 = a0 << 0x20\n  1197: a0 = a0 | a2\n  1200: jump @24 if a0 == 0\n      : @21 (gas: 1)\n  1203: trap\n      : @22 (gas: 3)\n  1204: a0 = 0\n  1206: a1 = 0\n  1208: ra = 16, jump @0\n      : @23 [@dyn 8] (gas: 5)\n  1213: i32 a1 = a0 + 0\n  1215: a0 = 0x1\n  1218: a2 = 0\n  1220: ecalli 11 // 'seal_return'\n  1222: fallthrough\n      : @24 (gas: 4)\n  1223: i32 s1 = s1 + 0\n  1225: a0 = s1\n  1227: a1 = 0\n  1229: ra = 18, jump @0\n      : @25 [@dyn 9] (gas: 5)\n  1234: i32 a0 = a0 + 0\n  1236: a1 = 0\n  1238: a2 = 0\n  1240: ecalli 1 // 'call_data_copy'\n  1242: fallthrough\n      : @26 (gas: 2)\n  1243: a1 = i32 [0x20048]\n  1248: jump @28 if a1 == 0\n      : @27 (gas: 4)\n  1251: a0 = 0x30050\n  1256: i32 a0 = a0 + 0\n  1258: ecalli 12 // 'set_immutable_data'\n  1260: fallthrough\n      : @28 (gas: 3)\n  1261: a0 = s1\n  1263: a1 = 0\n  1265: ra = 20, jump @0\n      : @29 [@dyn 10] (gas: 6)\n  1270: i32 a1 = a0 + 0\n  1272: a0 = 0\n  1274: a2 = 0\n  1276: ra = 0x16\n  1279: ecalli 11 // 'seal_return'\n  1281: fallthrough\n      : @30 [@dyn 11] (gas: 8)\n  1282: sp = sp + 0xffffffffffffffc0\n  1285: u64 [sp + 0x38] = ra\n  1288: u64 [sp + 0x30] = s0\n  1291: s0 = sp + 0x40\n  1294: sp = sp & 0xffffffffffffffe0\n  1297: a0 = 0x40\n  1300: a1 = 0x20\n  1303: ra = 24, jump @0\n      : @31 [@dyn 12] (gas: 34)\n  1308: u8 [a0 + 31] = 0x80\n  1313: u8 [a0 + 30] = 0\n  1316: u8 [a0 + 29] = 0\n  1319: u8 [a0 + 28] = 0\n  1322: u8 [a0 + 27] = 0\n  1325: u8 [a0 + 26] = 0\n  1328: u8 [a0 + 25] = 0\n  1331: u8 [a0 + 24] = 0\n  1334: u8 [a0 + 23] = 0\n  1337: u8 [a0 + 22] = 0\n  1340: u8 [a0 + 21] = 0\n  1343: u8 [a0 + 20] = 0\n  1346: u8 [a0 + 19] = 0\n  1349: u8 [a0 + 18] = 0\n  1352: u8 [a0 + 17] = 0\n  1355: u8 [a0 + 16] = 0\n  1358: u8 [a0 + 15] = 0\n  1361: u8 [a0 + 14] = 0\n  1364: u8 [a0 + 13] = 0\n  1367: u8 [a0 + 12] = 0\n  1370: u8 [a0 + 11] = 0\n  1373: u8 [a0 + 10] = 0\n  1376: u8 [a0 + 9] = 0\n  1379: u8 [a0 + 8] = 0\n  1382: u8 [a0 + 7] = 0\n  1385: u8 [a0 + 3] = 0\n  1388: u8 [a0 + 2] = 0\n  1391: u8 [a0 + 1] = 0\n  1394: u8 [a0 + 0] = 0\n  1396: a1 = i32 [0x20044]\n  1401: u8 [a0 + 6] = 0\n  1404: u8 [a0 + 5] = 0\n  1407: u8 [a0 + 4] = 0\n  1410: jump @49 if a1 <u 4\n      : @32 (gas: 4)\n  1415: i32 a0 = sp + 0\n  1417: a1 = 0\n  1419: ecalli 2 // 'call_data_load'\n  1421: fallthrough\n      : @33 (gas: 2)\n  1422: a0 = i32 [sp + 0x1c]\n  1425: jump @39 if a0 <=s 318402538\n      : @34 (gas: 1)\n  1432: jump @46 if a0 <=s 649299898\n      : @35 (gas: 1)\n  1440: jump @52 if a0 == 649299899\n      : @36 (gas: 1)\n  1448: jump @54 if a0 == 1020253707\n      : @37 (gas: 1)\n  1456: jump @49 if a0 != 1111171455\n      : @38 (gas: 14)\n  1464: ra = 0x1a\n  1467: sp = sp + 0xffffffffffffff60\n  1471: u64 [sp + 0x98] = ra\n  1475: u64 [sp + 0x90] = s0\n  1479: u64 [sp + 0x88] = s1\n  1483: s0 = sp + 0xa0\n  1487: sp = sp & 0xffffffffffffffe0\n  1490: u64 [sp + 56] = 0\n  1493: u64 [sp + 48] = 0\n  1496: u64 [sp + 40] = 0\n  1499: u64 [sp + 32] = 0\n  1502: i32 a0 = sp + 0x20\n  1505: ecalli 14 // 'value_transferred'\n  1507: jump @135\n      : @39 [@dyn 13] (gas: 2)\n  1510: a1 = 0xffffffffdc199000\n  1516: jump @43 if a0 >s 3692664809\n      : @40 (gas: 1)\n  1523: jump @50 if a0 == 3551028102\n      : @41 (gas: 1)\n  1530: jump @49 if a0 != 3581664889\n      : @42 (gas: 14)\n  1537: ra = 0x1c\n  1540: sp = sp + 0xffffffffffffff20\n  1544: u64 [sp + 0xd8] = ra\n  1548: u64 [sp + 0xd0] = s0\n  1552: u64 [sp + 0xc8] = s1\n  1556: s0 = sp + 0xe0\n  1560: sp = sp & 0xffffffffffffffe0\n  1563: u64 [sp + 120] = 0\n  1566: u64 [sp + 112] = 0\n  1569: u64 [sp + 104] = 0\n  1572: u64 [sp + 96] = 0\n  1575: i32 a0 = sp + 0x60\n  1578: ecalli 14 // 'value_transferred'\n  1580: jump @157\n      : @43 [@dyn 14] (gas: 2)\n  1583: i32 a1 = a1 + 0x7ea\n  1587: jump @51 if a0 == a1\n      : @44 (gas: 1)\n  1590: jump @49 if a0 != 4268205387\n      : @45 (gas: 1)\n  1597: ra = 30, jump @180\n      : @46 [@dyn 15] (gas: 1)\n  1602: jump @53 if a0 == 318402539\n      : @47 (gas: 1)\n  1610: jump @49 if a0 != 429436655\n      : @48 (gas: 1)\n  1617: ra = 32, jump @97\n      : @49 [@dyn 16] (gas: 1)\n  1622: ra = 34, jump @191\n      : @50 [@dyn 17] (gas: 14)\n  1627: ra = 0x24\n  1630: sp = sp + 0xffffffffffffff60\n  1634: u64 [sp + 0x98] = ra\n  1638: u64 [sp + 0x90] = s0\n  1642: u64 [sp + 0x88] = s1\n  1646: s0 = sp + 0xa0\n  1650: sp = sp & 0xffffffffffffffe0\n  1653: u64 [sp + 56] = 0\n  1656: u64 [sp + 48] = 0\n  1659: u64 [sp + 40] = 0\n  1662: u64 [sp + 32] = 0\n  1665: i32 a0 = sp + 0x20\n  1668: ecalli 14 // 'value_transferred'\n  1670: jump @146\n      : @51 [@dyn 18] (gas: 14)\n  1673: ra = 0x26\n  1676: sp = sp + 0xffffffffffffff60\n  1680: u64 [sp + 0x98] = ra\n  1684: u64 [sp + 0x90] = s0\n  1688: u64 [sp + 0x88] = s1\n  1692: s0 = sp + 0xa0\n  1696: sp = sp & 0xffffffffffffffe0\n  1699: u64 [sp + 56] = 0\n  1702: u64 [sp + 48] = 0\n  1705: u64 [sp + 40] = 0\n  1708: u64 [sp + 32] = 0\n  1711: i32 a0 = sp + 0x20\n  1714: ecalli 14 // 'value_transferred'\n  1716: jump @170\n      : @52 [@dyn 19] (gas: 14)\n  1719: ra = 0x28\n  1722: sp = sp + 0xffffffffffffff60\n  1726: u64 [sp + 0x98] = ra\n  1730: u64 [sp + 0x90] = s0\n  1734: u64 [sp + 0x88] = s1\n  1738: s0 = sp + 0xa0\n  1742: sp = sp & 0xffffffffffffffe0\n  1745: u64 [sp + 56] = 0\n  1748: u64 [sp + 48] = 0\n  1751: u64 [sp + 40] = 0\n  1754: u64 [sp + 32] = 0\n  1757: i32 a0 = sp + 0x20\n  1760: ecalli 14 // 'value_transferred'\n  1762: jump @107\n      : @53 [@dyn 20] (gas: 14)\n  1765: ra = 0x2a\n  1768: sp = sp + 0xffffffffffffff60\n  1772: u64 [sp + 0x98] = ra\n  1776: u64 [sp + 0x90] = s0\n  1780: u64 [sp + 0x88] = s1\n  1784: s0 = sp + 0xa0\n  1788: sp = sp & 0xffffffffffffffe0\n  1791: u64 [sp + 56] = 0\n  1794: u64 [sp + 48] = 0\n  1797: u64 [sp + 40] = 0\n  1800: u64 [sp + 32] = 0\n  1803: i32 a0 = sp + 0x20\n  1806: ecalli 14 // 'value_transferred'\n  1808: jump @86\n      : @54 [@dyn 21] (gas: 1)\n  1811: ra = 44, jump @123\n      : @55 [@dyn 22] (gas: 7)\n  1816: sp = sp + 0xfffffffffffffff0\n  1819: u64 [sp + 0x8] = ra\n  1822: u64 [sp] = s0\n  1824: s0 = a0\n  1826: a0 = 0x40\n  1829: a1 = 0x20\n  1832: ra = 46, jump @0\n      : @56 [@dyn 23] (gas: 100)\n  1837: a1 = u8 [a0 + 0x1]\n  1840: a2 = u8 [a0]\n  1842: a3 = u8 [a0 + 0x2]\n  1845: a4 = u8 [a0 + 0x3]\n  1848: a1 = a1 << 0x8\n  1851: a1 = a1 | a2\n  1854: a3 = a3 << 0x10\n  1857: a4 = a4 << 0x18\n  1860: a3 = a3 | a4\n  1863: a1 = a1 | a3\n  1866: a2 = u8 [a0 + 0x5]\n  1869: a3 = u8 [a0 + 0x4]\n  1872: a4 = u8 [a0 + 0x6]\n  1875: a5 = u8 [a0 + 0x7]\n  1878: a2 = a2 << 0x8\n  1881: a2 = a2 | a3\n  1884: a4 = a4 << 0x10\n  1887: a5 = a5 << 0x18\n  1890: a4 = a4 | a5\n  1893: a2 = a2 | a4\n  1896: a2 = a2 << 0x20\n  1899: t0 = a2 | a1\n  1902: a2 = u8 [a0 + 0x9]\n  1905: a3 = u8 [a0 + 0x8]\n  1908: a4 = u8 [a0 + 0xa]\n  1911: a5 = u8 [a0 + 0xb]\n  1914: a2 = a2 << 0x8\n  1917: a2 = a2 | a3\n  1920: a4 = a4 << 0x10\n  1923: a5 = a5 << 0x18\n  1926: a4 = a4 | a5\n  1929: a2 = a2 | a4\n  1932: a3 = u8 [a0 + 0xd]\n  1935: a4 = u8 [a0 + 0xc]\n  1938: a5 = u8 [a0 + 0xe]\n  1941: a1 = u8 [a0 + 0xf]\n  1944: a3 = a3 << 0x8\n  1947: a3 = a3 | a4\n  1950: a5 = a5 << 0x10\n  1953: a1 = a1 << 0x18\n  1956: a1 = a1 | a5\n  1959: a1 = a1 | a3\n  1962: a1 = a1 << 0x20\n  1965: t1 = a1 | a2\n  1968: a1 = u8 [a0 + 0x11]\n  1971: a3 = u8 [a0 + 0x10]\n  1974: a4 = u8 [a0 + 0x12]\n  1977: a5 = u8 [a0 + 0x13]\n  1980: a1 = a1 << 0x8\n  1983: a1 = a1 | a3\n  1986: a4 = a4 << 0x10\n  1989: a5 = a5 << 0x18\n  1992: a4 = a4 | a5\n  1995: a1 = a1 | a4\n  1998: a3 = u8 [a0 + 0x15]\n  2001: a4 = u8 [a0 + 0x14]\n  2004: a5 = u8 [a0 + 0x16]\n  2007: a2 = u8 [a0 + 0x17]\n  2010: a3 = a3 << 0x8\n  2013: a3 = a3 | a4\n  2016: a5 = a5 << 0x10\n  2019: a2 = a2 << 0x18\n  2022: a2 = a2 | a5\n  2025: a2 = a2 | a3\n  2028: a2 = a2 << 0x20\n  2031: a3 = a2 | a1\n  2034: a1 = u8 [a0 + 0x19]\n  2037: a2 = u8 [a0 + 0x18]\n  2040: a4 = u8 [a0 + 0x1a]\n  2043: a5 = u8 [a0 + 0x1b]\n  2046: a1 = a1 << 0x8\n  2049: a1 = a1 | a2\n  2052: a4 = a4 << 0x10\n  2055: a5 = a5 << 0x18\n  2058: a4 = a4 | a5\n  2061: a1 = a1 | a4\n  2064: a2 = u8 [a0 + 0x1d]\n  2067: a4 = u8 [a0 + 0x1c]\n  2070: a5 = u8 [a0 + 0x1e]\n  2073: a0 = u8 [a0 + 0x1f]\n  2076: a2 = a2 << 0x8\n  2079: a2 = a2 | a4\n  2082: a5 = a5 << 0x10\n  2085: a0 = a0 << 0x18\n  2088: a0 = a0 | a5\n  2091: a0 = a0 | a2\n  2094: a0 = a0 << 0x20\n  2097: a0 = a0 | a1\n  2100: a0 = reverse a0\n  2102: a1 = reverse a3\n  2104: a2 = reverse t1\n  2106: a3 = reverse t0\n  2108: u64 [s0 + 0x18] = a3\n  2111: u64 [s0 + 0x10] = a2\n  2114: u64 [s0 + 0x8] = a1\n  2117: u64 [s0] = a0\n  2119: ra = u64 [sp + 0x8]\n  2122: s0 = u64 [sp]\n  2124: sp = sp + 0x10\n  2127: ret\n      : @57 (gas: 18)\n  2129: sp = sp + 0xffffffffffffff60\n  2133: u64 [sp + 0x98] = ra\n  2137: u64 [sp + 0x90] = s0\n  2141: u64 [sp + 0x88] = s1\n  2145: s0 = sp + 0xa0\n  2149: sp = sp & 0xfffffffffffffff0\n  2152: a2 = u64 [a1 + 0x18]\n  2155: u64 [sp + 0x30] = a2\n  2158: a2 = u64 [a1 + 0x10]\n  2161: u64 [sp + 0x28] = a2\n  2164: a2 = u64 [a1 + 0x8]\n  2167: u64 [sp + 0x20] = a2\n  2170: a1 = u64 [a1]\n  2172: u64 [sp + 0x18] = a1\n  2175: u64 [sp + 0x38] = a0\n  2178: a0 = 0x40\n  2181: a1 = 0x20\n  2184: ra = 48, jump @0\n      : @58 [@dyn 24] (gas: 130)\n  2189: a1 = u8 [a0 + 0x19]\n  2192: a2 = u8 [a0 + 0x18]\n  2195: a3 = u8 [a0 + 0x1a]\n  2198: a4 = u8 [a0 + 0x1b]\n  2201: a1 = a1 << 0x8\n  2204: a1 = a1 | a2\n  2207: a3 = a3 << 0x10\n  2210: a4 = a4 << 0x18\n  2213: a3 = a3 | a4\n  2216: a1 = a1 | a3\n  2219: a2 = u8 [a0 + 0x1d]\n  2222: a3 = u8 [a0 + 0x1c]\n  2225: a4 = u8 [a0 + 0x1e]\n  2228: a5 = u8 [a0 + 0x1f]\n  2231: a2 = a2 << 0x8\n  2234: a2 = a2 | a3\n  2237: a4 = a4 << 0x10\n  2240: a5 = a5 << 0x18\n  2243: a4 = a4 | a5\n  2246: a2 = a2 | a4\n  2249: a2 = a2 << 0x20\n  2252: t0 = a2 | a1\n  2255: a2 = u8 [a0 + 0x11]\n  2258: a3 = u8 [a0 + 0x10]\n  2261: a4 = u8 [a0 + 0x12]\n  2264: a5 = u8 [a0 + 0x13]\n  2267: a2 = a2 << 0x8\n  2270: a2 = a2 | a3\n  2273: a4 = a4 << 0x10\n  2276: a5 = a5 << 0x18\n  2279: a4 = a4 | a5\n  2282: a2 = a2 | a4\n  2285: a3 = u8 [a0 + 0x15]\n  2288: a4 = u8 [a0 + 0x14]\n  2291: a5 = u8 [a0 + 0x16]\n  2294: s1 = u8 [a0 + 0x17]\n  2297: a3 = a3 << 0x8\n  2300: a3 = a3 | a4\n  2303: a5 = a5 << 0x10\n  2306: s1 = s1 << 0x18\n  2309: a5 = a5 | s1\n  2312: a3 = a3 | a5\n  2315: a3 = a3 << 0x20\n  2318: a2 = a2 | a3\n  2321: a3 = u8 [a0 + 0x9]\n  2324: a4 = u8 [a0 + 0x8]\n  2327: a5 = u8 [a0 + 0xa]\n  2330: s1 = u8 [a0 + 0xb]\n  2333: a3 = a3 << 0x8\n  2336: a3 = a3 | a4\n  2339: a5 = a5 << 0x10\n  2342: s1 = s1 << 0x18\n  2345: a5 = a5 | s1\n  2348: a3 = a3 | a5\n  2351: a4 = u8 [a0 + 0xd]\n  2354: a5 = u8 [a0 + 0xc]\n  2357: s1 = u8 [a0 + 0xe]\n  2360: a1 = u8 [a0 + 0xf]\n  2363: a4 = a4 << 0x8\n  2366: a4 = a4 | a5\n  2369: s1 = s1 << 0x10\n  2372: a1 = a1 << 0x18\n  2375: a1 = a1 | s1\n  2378: a1 = a1 | a4\n  2381: a1 = a1 << 0x20\n  2384: a3 = a3 | a1\n  2387: a1 = u8 [a0 + 0x1]\n  2390: a4 = u8 [a0]\n  2392: a5 = u8 [a0 + 0x2]\n  2395: s1 = u8 [a0 + 0x3]\n  2398: a1 = a1 << 0x8\n  2401: a1 = a1 | a4\n  2404: a5 = a5 << 0x10\n  2407: s1 = s1 << 0x18\n  2410: a5 = a5 | s1\n  2413: a1 = a1 | a5\n  2416: a4 = u8 [a0 + 0x5]\n  2419: a5 = u8 [a0 + 0x4]\n  2422: s1 = u8 [a0 + 0x6]\n  2425: a0 = u8 [a0 + 0x7]\n  2428: a4 = a4 << 0x8\n  2431: a4 = a4 | a5\n  2434: s1 = s1 << 0x10\n  2437: a0 = a0 << 0x18\n  2440: a0 = a0 | s1\n  2443: a0 = a0 | a4\n  2446: a0 = a0 << 0x20\n  2449: a0 = a0 | a1\n  2452: t1 = reverse a0\n  2454: t2 = reverse a3\n  2456: s1 = reverse a2\n  2458: a5 = reverse t0\n  2460: a1 = u64 [sp + 0x18]\n  2463: a0 = a1 + 0x1f\n  2466: a1 = a0 <u a1\n  2469: a3 = u64 [sp + 0x20]\n  2472: a2 = a3 + a1\n  2475: a3 = a2 <u a3\n  2478: a3 = a1 if a1 == 0\n  2481: a1 = u64 [sp + 0x28]\n  2484: a3 = a3 + a1\n  2487: a1 = a3 <u a1\n  2490: a4 = u64 [sp + 0x30]\n  2493: a1 = a1 + a4\n  2496: a0 = a0 & 0xffffffffffffffe0\n  2499: a0 = a0 + a5\n  2502: u64 [sp + 0x28] = a5\n  2505: u64 [sp + 0x10] = a0\n  2508: a4 = a0 <u a5\n  2511: a2 = a2 + s1\n  2514: a5 = a2 + a4\n  2517: a2 = a5 ^ s1\n  2520: u64 [sp + 0x30] = s1\n  2523: a0 = a5 <u s1\n  2526: a0 = a4 if a2 == 0\n  2529: a3 = a3 + t2\n  2532: a4 = a3 + a0\n  2535: s1 = a4 <u a3\n  2538: a2 = a3 <u t2\n  2541: a1 = a1 + t1\n  2544: a1 = a1 + a2\n  2547: s1 = s1 + a1\n  2550: a1 = a4 >u 0\n  2552: a2 = s1 >u 0\n  2554: a2 = a1 if s1 == 0\n  2557: a1 = a4 | s1\n  2560: u64 [sp + 0x8] = a5\n  2563: a3 = a5 >u 0\n  2565: a3 = a2 if a1 != 0\n  2568: jump @62 if a3 != 0\n      : @59 (gas: 8)\n  2572: a1 = a4 <u t2\n  2575: a2 = s1 ^ t1\n  2578: a3 = s1 <u t1\n  2581: a3 = a1 if a2 == 0\n  2584: a1 = a4 ^ t2\n  2587: a1 = a1 | a2\n  2590: a0 = a3 if a1 != 0\n  2593: jump @62 if a0 != 0\n      : @60 (gas: 6)\n  2597: a0 = 0x40\n  2600: a1 = 0x20\n  2603: u64 [sp + 0x20] = t2\n  2606: u64 [sp + 0x18] = t1\n  2609: u64 [sp] = a4\n  2611: ra = 50, jump @0\n      : @61 [@dyn 25] (gas: 82)\n  2616: a1 = reverse s1\n  2618: a2 = u64 [sp]\n  2620: a2 = reverse a2\n  2622: a3 = u64 [sp + 0x8]\n  2625: a3 = reverse a3\n  2627: a4 = u64 [sp + 0x10]\n  2630: a4 = reverse a4\n  2632: u8 [a0 + 0x18] = a4\n  2635: a5 = a4 >> 0x38\n  2638: u8 [a0 + 0x1f] = a5\n  2641: a5 = a4 >> 0x30\n  2644: u8 [a0 + 0x1e] = a5\n  2647: a5 = a4 >> 0x28\n  2650: u8 [a0 + 0x1d] = a5\n  2653: a5 = a4 >> 0x20\n  2656: u8 [a0 + 0x1c] = a5\n  2659: a5 = a4 >> 0x18\n  2662: u8 [a0 + 0x1b] = a5\n  2665: a5 = a4 >> 0x10\n  2668: u8 [a0 + 0x1a] = a5\n  2671: a4 = a4 >> 0x8\n  2674: u8 [a0 + 0x19] = a4\n  2677: u8 [a0 + 0x10] = a3\n  2680: a4 = a3 >> 0x38\n  2683: u8 [a0 + 0x17] = a4\n  2686: a4 = a3 >> 0x30\n  2689: u8 [a0 + 0x16] = a4\n  2692: a4 = a3 >> 0x28\n  2695: u8 [a0 + 0x15] = a4\n  2698: a4 = a3 >> 0x20\n  2701: u8 [a0 + 0x14] = a4\n  2704: a4 = a3 >> 0x18\n  2707: u8 [a0 + 0x13] = a4\n  2710: a4 = a3 >> 0x10\n  2713: u8 [a0 + 0x12] = a4\n  2716: a3 = a3 >> 0x8\n  2719: u8 [a0 + 0x11] = a3\n  2722: u8 [a0 + 0x8] = a2\n  2725: a3 = a2 >> 0x38\n  2728: u8 [a0 + 0xf] = a3\n  2731: a3 = a2 >> 0x30\n  2734: u8 [a0 + 0xe] = a3\n  2737: a3 = a2 >> 0x28\n  2740: u8 [a0 + 0xd] = a3\n  2743: a3 = a2 >> 0x20\n  2746: u8 [a0 + 0xc] = a3\n  2749: a3 = a2 >> 0x18\n  2752: u8 [a0 + 0xb] = a3\n  2755: a3 = a2 >> 0x10\n  2758: u8 [a0 + 0xa] = a3\n  2761: a2 = a2 >> 0x8\n  2764: u8 [a0 + 0x9] = a2\n  2767: u8 [a0] = a1\n  2769: a2 = a1 >> 0x38\n  2772: u8 [a0 + 0x7] = a2\n  2775: a2 = a1 >> 0x30\n  2778: u8 [a0 + 0x6] = a2\n  2781: a2 = a1 >> 0x28\n  2784: u8 [a0 + 0x5] = a2\n  2787: a2 = a1 >> 0x20\n  2790: u8 [a0 + 0x4] = a2\n  2793: a2 = a1 >> 0x18\n  2796: u8 [a0 + 0x3] = a2\n  2799: a2 = a1 >> 0x10\n  2802: u8 [a0 + 0x2] = a2\n  2805: a1 = a1 >> 0x8\n  2808: u8 [a0 + 0x1] = a1\n  2811: a0 = u64 [sp + 0x38]\n  2814: a1 = u64 [sp + 0x28]\n  2817: u64 [a0] = a1\n  2819: a1 = u64 [sp + 0x18]\n  2822: u64 [a0 + 0x18] = a1\n  2825: a1 = u64 [sp + 0x30]\n  2828: u64 [a0 + 0x8] = a1\n  2831: a1 = u64 [sp + 0x20]\n  2834: u64 [a0 + 0x10] = a1\n  2837: sp = s0 + 0xffffffffffffff60\n  2841: ra = u64 [sp + 0x98]\n  2845: s0 = u64 [sp + 0x90]\n  2849: s1 = u64 [sp + 0x88]\n  2853: sp = sp + 0xa0\n  2857: ret\n      : @62 (gas: 8)\n  2859: u64 [sp + 112] = 0\n  2862: u64 [sp + 104] = 0\n  2865: u64 [sp + 96] = 0\n  2868: a0 = 0x4e487b7100000000\n  2878: a1 = sp + 0x60\n  2881: u64 [sp + 0x78] = a0\n  2884: a0 = 0\n  2886: ra = 52, jump @8\n      : @63 [@dyn 26] (gas: 7)\n  2891: u64 [sp + 88] = 0\n  2894: u64 [sp + 80] = 0\n  2897: u64 [sp + 64] = 0x41\n  2901: a0 = 0x4\n  2904: a1 = sp + 0x40\n  2907: u64 [sp + 72] = 0\n  2910: ra = 54, jump @8\n      : @64 [@dyn 27] (gas: 3)\n  2915: a1 = 0x24\n  2918: a0 = 0\n  2920: ra = 56, jump @0\n      : @65 [@dyn 28] (gas: 6)\n  2925: i32 a1 = a0 + 0\n  2927: a0 = 0x1\n  2930: a2 = 0x24\n  2933: ra = 0x3a\n  2936: ecalli 11 // 'seal_return'\n  2938: fallthrough\n      : @66 [@dyn 29] (gas: 9)\n  2939: a2 = u64 [a1 + 0x18]\n  2942: a3 = u64 [a1 + 0x10]\n  2945: a4 = u64 [a1 + 0x8]\n  2948: a1 = u64 [a1]\n  2950: u64 [a0 + 0x18] = a2\n  2953: u64 [a0 + 0x10] = a3\n  2956: u64 [a0 + 0x8] = a4\n  2959: u64 [a0] = a1\n  2961: ret\n      : @67 [@dyn 30] (gas: 15)\n  2963: a1 = u64 [sp + 0x68]\n  2966: a3 = u64 [sp + 0x60]\n  2969: a0 = u64 [sp + 0x58]\n  2972: a2 = u64 [sp + 0x50]\n  2975: u64 [sp + 0x20] = a0\n  2978: u64 [sp + 0x18] = a1\n  2981: a0 = a0 | a1\n  2984: a1 = a2 | a3\n  2987: a1 = a1 | a0\n  2990: a1 = a1 >> 0x20\n  2993: u64 [sp + 0x10] = a3\n  2996: a0 = a0 | a3\n  2999: a0 = a0 << 0x20\n  3002: a0 = a0 | a1\n  3005: jump @75 if a0 != 0\n      : @68 (gas: 5)\n  3009: u64 [sp] = a2\n  3011: i32 a0 = a2 + 0\n  3013: u64 [sp + 0x28] = a0\n  3016: a1 = s1\n  3018: ra = 62, jump @0\n      : @69 [@dyn 31] (gas: 5)\n  3023: i32 a0 = a0 + 0\n  3025: a1 = s1\n  3027: a2 = 0\n  3029: ecalli 1 // 'call_data_copy'\n  3031: fallthrough\n      : @70 (gas: 1)\n  3032: jump @76 if s1 <=u 63\n      : @71 (gas: 3)\n  3037: a1 = 0x20\n  3040: a0 = u64 [sp + 0x28]\n  3043: ra = 64, jump @0\n      : @72 [@dyn 32] (gas: 10)\n  3048: a1 = u64 [sp + 0x18]\n  3051: a2 = u64 [sp + 0x10]\n  3054: a1 = a1 | a2\n  3057: a2 = 0xffffffe0\n  3067: a3 = u64 [sp]\n  3069: a2 = a3 <u a2\n  3072: a3 = u64 [sp + 0x20]\n  3075: a2 = 0 if a3 != 0\n  3077: a2 = 0 if a1 != 0\n  3079: jump @75 if a2 == 0\n      : @73 (gas: 100)\n  3083: a1 = u8 [a0 + 0x1]\n  3086: a2 = u8 [a0]\n  3088: a3 = u8 [a0 + 0x2]\n  3091: a4 = u8 [a0 + 0x3]\n  3094: a1 = a1 << 0x8\n  3097: a1 = a1 | a2\n  3100: a3 = a3 << 0x10\n  3103: a4 = a4 << 0x18\n  3106: a3 = a3 | a4\n  3109: a1 = a1 | a3\n  3112: a2 = u8 [a0 + 0x5]\n  3115: a3 = u8 [a0 + 0x4]\n  3118: a4 = u8 [a0 + 0x6]\n  3121: a5 = u8 [a0 + 0x7]\n  3124: a2 = a2 << 0x8\n  3127: a2 = a2 | a3\n  3130: a4 = a4 << 0x10\n  3133: a5 = a5 << 0x18\n  3136: a4 = a4 | a5\n  3139: a2 = a2 | a4\n  3142: a2 = a2 << 0x20\n  3145: t0 = a2 | a1\n  3148: a2 = u8 [a0 + 0x9]\n  3151: a3 = u8 [a0 + 0x8]\n  3154: a4 = u8 [a0 + 0xa]\n  3157: a5 = u8 [a0 + 0xb]\n  3160: a2 = a2 << 0x8\n  3163: a2 = a2 | a3\n  3166: a4 = a4 << 0x10\n  3169: a5 = a5 << 0x18\n  3172: a4 = a4 | a5\n  3175: a2 = a2 | a4\n  3178: a3 = u8 [a0 + 0xd]\n  3181: a4 = u8 [a0 + 0xc]\n  3184: a5 = u8 [a0 + 0xe]\n  3187: s1 = u8 [a0 + 0xf]\n  3190: a3 = a3 << 0x8\n  3193: a3 = a3 | a4\n  3196: a5 = a5 << 0x10\n  3199: s1 = s1 << 0x18\n  3202: a5 = a5 | s1\n  3205: a3 = a3 | a5\n  3208: a3 = a3 << 0x20\n  3211: a2 = a2 | a3\n  3214: a3 = u8 [a0 + 0x11]\n  3217: a4 = u8 [a0 + 0x10]\n  3220: a5 = u8 [a0 + 0x12]\n  3223: s1 = u8 [a0 + 0x13]\n  3226: a3 = a3 << 0x8\n  3229: a3 = a3 | a4\n  3232: a5 = a5 << 0x10\n  3235: s1 = s1 << 0x18\n  3238: a5 = a5 | s1\n  3241: a3 = a3 | a5\n  3244: a4 = u8 [a0 + 0x15]\n  3247: a5 = u8 [a0 + 0x14]\n  3250: s1 = u8 [a0 + 0x16]\n  3253: a1 = u8 [a0 + 0x17]\n  3256: a4 = a4 << 0x8\n  3259: a4 = a4 | a5\n  3262: s1 = s1 << 0x10\n  3265: a1 = a1 << 0x18\n  3268: a1 = a1 | s1\n  3271: a1 = a1 | a4\n  3274: a1 = a1 << 0x20\n  3277: a3 = a3 | a1\n  3280: a1 = u8 [a0 + 0x19]\n  3283: a4 = u8 [a0 + 0x18]\n  3286: a5 = u8 [a0 + 0x1a]\n  3289: s1 = u8 [a0 + 0x1b]\n  3292: a1 = a1 << 0x8\n  3295: a1 = a1 | a4\n  3298: a5 = a5 << 0x10\n  3301: s1 = s1 << 0x18\n  3304: a5 = a5 | s1\n  3307: a1 = a1 | a5\n  3310: a4 = u8 [a0 + 0x1d]\n  3313: a5 = u8 [a0 + 0x1c]\n  3316: s1 = u8 [a0 + 0x1e]\n  3319: a0 = u8 [a0 + 0x1f]\n  3322: a4 = a4 << 0x8\n  3325: a4 = a4 | a5\n  3328: s1 = s1 << 0x10\n  3331: a0 = a0 << 0x18\n  3334: a0 = a0 | s1\n  3337: a0 = a0 | a4\n  3340: a0 = a0 << 0x20\n  3343: a0 = a0 | a1\n  3346: a0 = reverse a0\n  3348: u64 [sp + 0x20] = a0\n  3351: a0 = reverse a3\n  3353: u64 [sp + 0x18] = a0\n  3356: a0 = reverse a2\n  3358: u64 [sp + 0x10] = a0\n  3361: a0 = reverse t0\n  3363: u64 [sp] = a0\n  3365: a0 = u64 [sp + 0x28]\n  3368: i32 a0 = a0 + 0x20\n  3371: a1 = 0x20\n  3374: ra = 66, jump @0\n      : @74 [@dyn 33] (gas: 111)\n  3379: a1 = u8 [a0 + 0x1]\n  3382: a2 = u8 [a0]\n  3384: a3 = u8 [a0 + 0x2]\n  3387: a4 = u8 [a0 + 0x3]\n  3390: a1 = a1 << 0x8\n  3393: a1 = a1 | a2\n  3396: a3 = a3 << 0x10\n  3399: a4 = a4 << 0x18\n  3402: a3 = a3 | a4\n  3405: a1 = a1 | a3\n  3408: a2 = u8 [a0 + 0x5]\n  3411: a3 = u8 [a0 + 0x4]\n  3414: a4 = u8 [a0 + 0x6]\n  3417: a5 = u8 [a0 + 0x7]\n  3420: a2 = a2 << 0x8\n  3423: a2 = a2 | a3\n  3426: a4 = a4 << 0x10\n  3429: a5 = a5 << 0x18\n  3432: a4 = a4 | a5\n  3435: a2 = a2 | a4\n  3438: a2 = a2 << 0x20\n  3441: t0 = a2 | a1\n  3444: a2 = u8 [a0 + 0x9]\n  3447: a3 = u8 [a0 + 0x8]\n  3450: a4 = u8 [a0 + 0xa]\n  3453: a5 = u8 [a0 + 0xb]\n  3456: a2 = a2 << 0x8\n  3459: a2 = a2 | a3\n  3462: a4 = a4 << 0x10\n  3465: a5 = a5 << 0x18\n  3468: a4 = a4 | a5\n  3471: a2 = a2 | a4\n  3474: a3 = u8 [a0 + 0xd]\n  3477: a4 = u8 [a0 + 0xc]\n  3480: a5 = u8 [a0 + 0xe]\n  3483: s1 = u8 [a0 + 0xf]\n  3486: a3 = a3 << 0x8\n  3489: a3 = a3 | a4\n  3492: a5 = a5 << 0x10\n  3495: s1 = s1 << 0x18\n  3498: a5 = a5 | s1\n  3501: a3 = a3 | a5\n  3504: a3 = a3 << 0x20\n  3507: a2 = a2 | a3\n  3510: a3 = u8 [a0 + 0x11]\n  3513: a4 = u8 [a0 + 0x10]\n  3516: a5 = u8 [a0 + 0x12]\n  3519: s1 = u8 [a0 + 0x13]\n  3522: a3 = a3 << 0x8\n  3525: a3 = a3 | a4\n  3528: a5 = a5 << 0x10\n  3531: s1 = s1 << 0x18\n  3534: a5 = a5 | s1\n  3537: a3 = a3 | a5\n  3540: a4 = u8 [a0 + 0x15]\n  3543: a5 = u8 [a0 + 0x14]\n  3546: s1 = u8 [a0 + 0x16]\n  3549: a1 = u8 [a0 + 0x17]\n  3552: a4 = a4 << 0x8\n  3555: a4 = a4 | a5\n  3558: s1 = s1 << 0x10\n  3561: a1 = a1 << 0x18\n  3564: a1 = a1 | s1\n  3567: a1 = a1 | a4\n  3570: a1 = a1 << 0x20\n  3573: a3 = a3 | a1\n  3576: a1 = u8 [a0 + 0x19]\n  3579: a4 = u8 [a0 + 0x18]\n  3582: a5 = u8 [a0 + 0x1a]\n  3585: s1 = u8 [a0 + 0x1b]\n  3588: a1 = a1 << 0x8\n  3591: a1 = a1 | a4\n  3594: a5 = a5 << 0x10\n  3597: s1 = s1 << 0x18\n  3600: a5 = a5 | s1\n  3603: a1 = a1 | a5\n  3606: a4 = u8 [a0 + 0x1d]\n  3609: a5 = u8 [a0 + 0x1c]\n  3612: s1 = u8 [a0 + 0x1e]\n  3615: a0 = u8 [a0 + 0x1f]\n  3618: a4 = a4 << 0x8\n  3621: a4 = a4 | a5\n  3624: s1 = s1 << 0x10\n  3627: a0 = a0 << 0x18\n  3630: a0 = a0 | s1\n  3633: a0 = a0 | a4\n  3636: a0 = a0 << 0x20\n  3639: a0 = a0 | a1\n  3642: a4 = u64 [sp + 0x8]\n  3645: a1 = u64 [sp]\n  3647: u64 [a4 + 0x18] = a1\n  3650: a1 = u64 [sp + 0x10]\n  3653: u64 [a4 + 0x10] = a1\n  3656: a1 = u64 [sp + 0x18]\n  3659: u64 [a4 + 0x8] = a1\n  3662: a1 = u64 [sp + 0x20]\n  3665: u64 [a4] = a1\n  3667: a1 = reverse t0\n  3669: u64 [a4 + 0x38] = a1\n  3672: a1 = reverse a2\n  3674: u64 [a4 + 0x30] = a1\n  3677: a1 = reverse a3\n  3679: u64 [a4 + 0x28] = a1\n  3682: a0 = reverse a0\n  3684: u64 [a4 + 0x20] = a0\n  3687: sp = s0 + 0xffffffffffffff70\n  3691: ra = u64 [sp + 0x88]\n  3695: s0 = u64 [sp + 0x80]\n  3699: s1 = u64 [sp + 0x78]\n  3702: sp = sp + 0x90\n  3706: ret\n      : @75 (gas: 1)\n  3708: trap\n      : @76 (gas: 3)\n  3709: a0 = 0\n  3711: a1 = 0\n  3713: ra = 68, jump @0\n      : @77 [@dyn 34] (gas: 6)\n  3718: i32 a1 = a0 + 0\n  3720: a0 = 0x1\n  3723: a2 = 0\n  3725: ra = 0x46\n  3728: ecalli 11 // 'seal_return'\n  3730: fallthrough\n      : @78 [@dyn 35] (gas: 9)\n  3731: a2 = u64 [a1 + 0x18]\n  3734: a3 = u64 [a1 + 0x10]\n  3737: a4 = u64 [a1 + 0x8]\n  3740: a1 = u64 [a1]\n  3742: u64 [a0 + 0x18] = a2\n  3745: u64 [a0 + 0x10] = a3\n  3748: u64 [a0 + 0x8] = a4\n  3751: u64 [a0] = a1\n  3753: ret\n      : @79 (gas: 37)\n  3755: a3 = u64 [sp + 0xc8]\n  3759: a1 = u64 [sp + 0xc0]\n  3763: t0 = u64 [sp + 0xd8]\n  3767: a2 = u64 [sp + 0xd0]\n  3771: a5 = u64 [sp + 0x20]\n  3774: a5 = a5 + a3\n  3777: a0 = u64 [sp + 0x28]\n  3780: a0 = a0 + a1\n  3783: u64 [sp + 0x28] = a0\n  3786: a4 = a0 <u a1\n  3789: a5 = a5 + a4\n  3792: t1 = a5 ^ a3\n  3795: u64 [sp + 0x20] = a5\n  3798: a3 = a5 <u a3\n  3801: a5 = a4 ^ 0x1\n  3804: a4 = a3 if t1 != 0\n  3807: a0 = u64 [sp + 0x30]\n  3810: a0 = a0 + a2\n  3813: s1 = a0 + a4\n  3816: a4 = s1 <u a0\n  3819: a1 = u64 [sp + 0x38]\n  3822: a1 = a1 + t0\n  3825: a0 = a0 <u a2\n  3828: a0 = a0 + a1\n  3831: a4 = a4 + a0\n  3834: a0 = s1 <u a2\n  3837: a1 = a4 ^ t0\n  3840: u64 [sp + 0x38] = a4\n  3843: a4 = a4 <u t0\n  3846: a4 = a0 if a1 == 0\n  3849: a0 = a4 ^ 0x1\n  3852: a2 = a2 ^ s1\n  3855: a1 = a1 | a2\n  3858: a2 = a3 ^ 0x1\n  3861: a5 = a2 if t1 != 0\n  3864: a5 = a0 if a1 != 0\n  3867: jump @81 if a5 == 0\n      : @80 (gas: 71)\n  3871: u64 [sp + 280] = 0\n  3875: u64 [sp + 272] = 0\n  3879: u64 [sp + 264] = 0\n  3883: u64 [sp + 256] = 0x1\n  3888: u64 [sp + 312] = 0\n  3892: u64 [sp + 304] = 0\n  3896: u64 [sp + 296] = 0\n  3900: u64 [sp + 288] = 0\n  3904: u32 [sp + 224] = 0x20\n  3909: i32 a1 = sp + 0x100\n  3913: i32 a3 = sp + 0x120\n  3917: i32 a4 = sp + 0xe0\n  3921: a2 = 0xffffffffffffffff\n  3924: a0 = 0\n  3926: ecalli 6 // 'get_storage'\n  3928: u64 [sp + 280] = 0\n  3932: u64 [sp + 272] = 0\n  3936: u64 [sp + 264] = 0\n  3940: u64 [sp + 256] = 0x1\n  3945: a0 = u64 [sp + 0x38]\n  3948: u64 [sp + 0x138] = a0\n  3952: u64 [sp + 0x130] = s1\n  3956: a0 = u64 [sp + 0x20]\n  3959: u64 [sp + 0x128] = a0\n  3963: a0 = u64 [sp + 0x28]\n  3966: u64 [sp + 0x120] = a0\n  3970: i32 a1 = sp + 0x100\n  3974: i32 a3 = sp + 0x120\n  3978: a2 = 0xffffffffffffffff\n  3981: a4 = 0x20\n  3984: a0 = 0\n  3986: ecalli 13 // 'set_storage'\n  3988: u64 [sp + 280] = 0\n  3992: u64 [sp + 272] = 0\n  3996: u64 [sp + 264] = 0\n  4000: u64 [sp + 256] = 0x2\n  4005: u64 [sp + 312] = 0\n  4009: u64 [sp + 304] = 0\n  4013: u64 [sp + 296] = 0\n  4017: u64 [sp + 288] = 0\n  4021: u32 [sp + 224] = 0x20\n  4026: i32 a1 = sp + 0x100\n  4030: i32 a3 = sp + 0x120\n  4034: i32 a4 = sp + 0xe0\n  4038: a2 = 0xffffffffffffffff\n  4041: a0 = 0\n  4043: ecalli 6 // 'get_storage'\n  4045: u64 [sp + 280] = 0\n  4049: u64 [sp + 272] = 0\n  4053: u64 [sp + 264] = 0\n  4057: u64 [sp + 256] = 0x2\n  4062: a0 = u64 [sp + 0x40]\n  4065: u64 [sp + 0x138] = a0\n  4069: a0 = u64 [sp + 0x48]\n  4072: u64 [sp + 0x130] = a0\n  4076: a0 = u64 [sp + 0x50]\n  4079: u64 [sp + 0x128] = a0\n  4083: a0 = u64 [sp + 0x58]\n  4086: u64 [sp + 0x120] = a0\n  4090: i32 a1 = sp + 0x100\n  4094: i32 a3 = sp + 0x120\n  4098: a2 = 0xffffffffffffffff\n  4101: a4 = 0x20\n  4104: a0 = 0\n  4106: ecalli 13 // 'set_storage'\n  4108: sp = s0 + 0xfffffffffffffea0\n  4112: ra = u64 [sp + 0x158]\n  4116: s0 = u64 [sp + 0x150]\n  4120: s1 = u64 [sp + 0x148]\n  4124: sp = sp + 0x160\n  4128: ret\n      : @81 (gas: 8)\n  4130: u64 [sp + 144] = 0\n  4134: u64 [sp + 136] = 0\n  4138: u64 [sp + 128] = 0\n  4142: a0 = 0x4e487b7100000000\n  4152: a1 = sp + 0x80\n  4156: u64 [sp + 0x98] = a0\n  4160: a0 = 0\n  4162: ra = 72, jump @8\n      : @82 [@dyn 36] (gas: 7)\n  4167: u64 [sp + 120] = 0\n  4170: u64 [sp + 112] = 0\n  4173: u64 [sp + 96] = 0x11\n  4177: a0 = 0x4\n  4180: a1 = sp + 0x60\n  4183: u64 [sp + 104] = 0\n  4186: ra = 74, jump @8\n      : @83 [@dyn 37] (gas: 3)\n  4191: a1 = 0x24\n  4194: a0 = 0\n  4196: ra = 76, jump @0\n      : @84 [@dyn 38] (gas: 6)\n  4201: i32 a1 = a0 + 0\n  4203: a0 = 0x1\n  4206: a2 = 0x24\n  4209: ra = 0x4e\n  4212: ecalli 11 // 'seal_return'\n  4214: fallthrough\n      : @85 [@dyn 39] (gas: 6)\n  4215: a1 = u32 [a1 + 0x1c]\n  4218: u64 [a0 + 24] = 0\n  4221: u64 [a0 + 16] = 0\n  4224: u64 [a0 + 8] = 0\n  4227: u64 [a0] = a1\n  4229: ret\n      : @86 (gas: 8)\n  4231: a0 = u64 [sp + 0x30]\n  4234: a1 = u64 [sp + 0x38]\n  4237: a2 = u64 [sp + 0x28]\n  4240: a3 = u64 [sp + 0x20]\n  4243: a1 = a1 | a2\n  4246: a0 = a0 | a3\n  4249: a0 = a0 | a1\n  4252: jump @91 if a0 != 0\n      : @87 (gas: 2)\n  4256: a0 = i32 [0x20044]\n  4261: jump @91 if a0 <=u 3\n      : @88 (gas: 20)\n  4266: u64 [sp + 88] = 0\n  4269: u64 [sp + 80] = 0\n  4272: u64 [sp + 72] = 0\n  4275: u64 [sp + 64] = 0x6\n  4279: u64 [sp + 120] = 0\n  4282: u64 [sp + 112] = 0\n  4285: u64 [sp + 104] = 0\n  4288: u64 [sp + 96] = 0\n  4291: u32 [sp + 128] = 0x20\n  4296: i32 a1 = sp + 0x40\n  4299: i32 a3 = sp + 0x60\n  4302: i32 a4 = sp + 0x80\n  4306: a2 = 0xffffffffffffffff\n  4309: a0 = 0\n  4311: ecalli 6 // 'get_storage'\n  4313: a0 = u64 [sp + 0x60]\n  4316: u64 [sp + 0x18] = a0\n  4319: a0 = 0x40\n  4322: a1 = 0x20\n  4325: ra = 80, jump @0\n      : @89 [@dyn 40] (gas: 100)\n  4330: a1 = u8 [a0 + 0x11]\n  4333: a2 = u8 [a0 + 0x10]\n  4336: a3 = u8 [a0 + 0x12]\n  4339: a4 = u8 [a0 + 0x13]\n  4342: a1 = a1 << 0x8\n  4345: a1 = a1 | a2\n  4348: a3 = a3 << 0x10\n  4351: a4 = a4 << 0x18\n  4354: a3 = a3 | a4\n  4357: a1 = a1 | a3\n  4360: a2 = u8 [a0 + 0x15]\n  4363: a3 = u8 [a0 + 0x14]\n  4366: a4 = u8 [a0 + 0x16]\n  4369: a5 = u8 [a0 + 0x17]\n  4372: a2 = a2 << 0x8\n  4375: a2 = a2 | a3\n  4378: a4 = a4 << 0x10\n  4381: a5 = a5 << 0x18\n  4384: a4 = a4 | a5\n  4387: a2 = a2 | a4\n  4390: a2 = a2 << 0x20\n  4393: t0 = a2 | a1\n  4396: a2 = u8 [a0 + 0x1]\n  4399: a3 = u8 [a0]\n  4401: a4 = u8 [a0 + 0x2]\n  4404: a5 = u8 [a0 + 0x3]\n  4407: a2 = a2 << 0x8\n  4410: a2 = a2 | a3\n  4413: a4 = a4 << 0x10\n  4416: a5 = a5 << 0x18\n  4419: a4 = a4 | a5\n  4422: a2 = a2 | a4\n  4425: a3 = u8 [a0 + 0x5]\n  4428: a4 = u8 [a0 + 0x4]\n  4431: a5 = u8 [a0 + 0x6]\n  4434: s1 = u8 [a0 + 0x7]\n  4437: a3 = a3 << 0x8\n  4440: a3 = a3 | a4\n  4443: a5 = a5 << 0x10\n  4446: s1 = s1 << 0x18\n  4449: a5 = a5 | s1\n  4452: a3 = a3 | a5\n  4455: a3 = a3 << 0x20\n  4458: a2 = a2 | a3\n  4461: a3 = u8 [a0 + 0x19]\n  4464: a4 = u8 [a0 + 0x18]\n  4467: a5 = u8 [a0 + 0x1a]\n  4470: s1 = u8 [a0 + 0x1b]\n  4473: a3 = a3 << 0x8\n  4476: a3 = a3 | a4\n  4479: a5 = a5 << 0x10\n  4482: s1 = s1 << 0x18\n  4485: a5 = a5 | s1\n  4488: a3 = a3 | a5\n  4491: a4 = u8 [a0 + 0x1d]\n  4494: a5 = u8 [a0 + 0x1c]\n  4497: s1 = u8 [a0 + 0x1e]\n  4500: a1 = u8 [a0 + 0x1f]\n  4503: a4 = a4 << 0x8\n  4506: a4 = a4 | a5\n  4509: s1 = s1 << 0x10\n  4512: a1 = a1 << 0x18\n  4515: a1 = a1 | s1\n  4518: a1 = a1 | a4\n  4521: a1 = a1 << 0x20\n  4524: a3 = a3 | a1\n  4527: a1 = u8 [a0 + 0x9]\n  4530: a4 = u8 [a0 + 0x8]\n  4533: a5 = u8 [a0 + 0xa]\n  4536: s1 = u8 [a0 + 0xb]\n  4539: a1 = a1 << 0x8\n  4542: a1 = a1 | a4\n  4545: a5 = a5 << 0x10\n  4548: s1 = s1 << 0x18\n  4551: a5 = a5 | s1\n  4554: a1 = a1 | a5\n  4557: a4 = u8 [a0 + 0xd]\n  4560: a5 = u8 [a0 + 0xc]\n  4563: s1 = u8 [a0 + 0xe]\n  4566: a0 = u8 [a0 + 0xf]\n  4569: a4 = a4 << 0x8\n  4572: a4 = a4 | a5\n  4575: s1 = s1 << 0x10\n  4578: a0 = a0 << 0x18\n  4581: a0 = a0 | s1\n  4584: a0 = a0 | a4\n  4587: a0 = a0 << 0x20\n  4590: a0 = a0 | a1\n  4593: a1 = reverse a0\n  4595: a0 = reverse a3\n  4597: a2 = reverse a2\n  4599: a3 = reverse t0\n  4601: a2 = a2 | a3\n  4604: a3 = a0 | a1\n  4607: a3 = a3 | a2\n  4610: a3 = a3 >> 0x20\n  4613: a1 = a1 | a2\n  4616: a1 = a1 << 0x20\n  4619: a1 = a1 | a3\n  4622: jump @93 if a1 == 0\n      : @90 (gas: 1)\n  4625: trap\n      : @91 (gas: 3)\n  4626: a0 = 0\n  4628: a1 = 0\n  4630: ra = 82, jump @0\n      : @92 [@dyn 41] (gas: 5)\n  4635: i32 a1 = a0 + 0\n  4637: a0 = 0x1\n  4640: a2 = 0\n  4642: ecalli 11 // 'seal_return'\n  4644: fallthrough\n      : @93 (gas: 6)\n  4645: a1 = u8 [sp + 0x18]\n  4648: s1 = a1 >u 0\n  4650: i32 a0 = a0 + 0\n  4652: u64 [sp + 0x18] = a0\n  4655: a1 = 0x20\n  4658: ra = 84, jump @0\n      : @94 [@dyn 42] (gas: 35)\n  4663: u8 [a0 + 0x1f] = s1\n  4666: u8 [a0 + 30] = 0\n  4669: u8 [a0 + 29] = 0\n  4672: u8 [a0 + 28] = 0\n  4675: u8 [a0 + 27] = 0\n  4678: u8 [a0 + 26] = 0\n  4681: u8 [a0 + 25] = 0\n  4684: u8 [a0 + 24] = 0\n  4687: u8 [a0 + 23] = 0\n  4690: u8 [a0 + 22] = 0\n  4693: u8 [a0 + 21] = 0\n  4696: u8 [a0 + 20] = 0\n  4699: u8 [a0 + 19] = 0\n  4702: u8 [a0 + 18] = 0\n  4705: u8 [a0 + 17] = 0\n  4708: u8 [a0 + 16] = 0\n  4711: u8 [a0 + 15] = 0\n  4714: u8 [a0 + 14] = 0\n  4717: u8 [a0 + 13] = 0\n  4720: u8 [a0 + 12] = 0\n  4723: u8 [a0 + 11] = 0\n  4726: u8 [a0 + 10] = 0\n  4729: u8 [a0 + 9] = 0\n  4732: u8 [a0 + 8] = 0\n  4735: u8 [a0 + 7] = 0\n  4738: u8 [a0 + 6] = 0\n  4741: u8 [a0 + 5] = 0\n  4744: u8 [a0 + 4] = 0\n  4747: u8 [a0 + 3] = 0\n  4750: u8 [a0 + 2] = 0\n  4753: u8 [a0 + 1] = 0\n  4756: u8 [a0 + 0] = 0\n  4758: a1 = 0x20\n  4761: a0 = u64 [sp + 0x18]\n  4764: ra = 86, jump @0\n      : @95 [@dyn 43] (gas: 6)\n  4769: i32 a1 = a0 + 0\n  4771: a2 = 0x20\n  4774: a0 = 0\n  4776: ra = 0x58\n  4779: ecalli 11 // 'seal_return'\n  4781: fallthrough\n      : @96 [@dyn 44] (gas: 9)\n  4782: a2 = u64 [a1 + 0x18]\n  4785: a3 = u64 [a1 + 0x10]\n  4788: a4 = u64 [a1 + 0x8]\n  4791: a1 = u64 [a1]\n  4793: u64 [a0 + 0x18] = a2\n  4796: u64 [a0 + 0x10] = a3\n  4799: u64 [a0 + 0x8] = a4\n  4802: u64 [a0] = a1\n  4804: ret\n      : @97 (gas: 4)\n  4806: sp = sp + 0xfffffffffffffff8\n  4809: u64 [sp] = ra\n  4811: a0 = i32 [0x20044]\n  4816: jump @102 if a0 <=u 3\n      : @98 (gas: 34)\n  4821: ra = 0x5a\n  4824: sp = sp + 0xfffffffffffffd80\n  4828: u64 [sp + 0x278] = ra\n  4832: u64 [sp + 0x270] = s0\n  4836: u64 [sp + 0x268] = s1\n  4840: s0 = sp + 0x280\n  4844: sp = sp & 0xffffffffffffffe0\n  4847: s1 = sp\n  4849: i32 a0 = s1 + 0x1a0\n  4853: ecalli 8 // 'now'\n  4855: a0 = u64 [s1 + 0x1a0]\n  4859: u64 [s1 + 0x58] = a0\n  4862: a0 = u64 [s1 + 0x1a8]\n  4866: u64 [s1 + 0x50] = a0\n  4869: a0 = u64 [s1 + 0x1b0]\n  4873: u64 [s1 + 0x48] = a0\n  4876: a0 = u64 [s1 + 0x1b8]\n  4880: u64 [s1 + 0x40] = a0\n  4883: u64 [s1 + 568] = 0\n  4887: u64 [s1 + 560] = 0\n  4891: u64 [s1 + 552] = 0\n  4895: u64 [s1 + 544] = 0x1\n  4900: u64 [s1 + 600] = 0\n  4904: u64 [s1 + 592] = 0\n  4908: u64 [s1 + 584] = 0\n  4912: u64 [s1 + 576] = 0\n  4916: u32 [s1 + 512] = 0x20\n  4921: i32 a1 = s1 + 0x220\n  4925: i32 a3 = s1 + 0x240\n  4929: i32 a4 = s1 + 0x200\n  4933: a2 = 0xffffffffffffffff\n  4936: a0 = 0\n  4938: ecalli 6 // 'get_storage'\n  4940: jump @228\n      : @99 [@dyn 45] (gas: 3)\n  4943: a0 = 0x40\n  4946: a1 = 0x20\n  4949: ra = 92, jump @0\n      : @100 [@dyn 46] (gas: 100)\n  4954: a1 = u8 [a0 + 0x11]\n  4957: a2 = u8 [a0 + 0x10]\n  4960: a3 = u8 [a0 + 0x12]\n  4963: a4 = u8 [a0 + 0x13]\n  4966: a1 = a1 << 0x8\n  4969: a1 = a1 | a2\n  4972: a3 = a3 << 0x10\n  4975: a4 = a4 << 0x18\n  4978: a3 = a3 | a4\n  4981: a1 = a1 | a3\n  4984: a2 = u8 [a0 + 0x15]\n  4987: a3 = u8 [a0 + 0x14]\n  4990: a4 = u8 [a0 + 0x16]\n  4993: a5 = u8 [a0 + 0x17]\n  4996: a2 = a2 << 0x8\n  4999: a2 = a2 | a3\n  5002: a4 = a4 << 0x10\n  5005: a5 = a5 << 0x18\n  5008: a4 = a4 | a5\n  5011: a2 = a2 | a4\n  5014: a2 = a2 << 0x20\n  5017: t0 = a2 | a1\n  5020: a2 = u8 [a0 + 0x1]\n  5023: a3 = u8 [a0]\n  5025: a4 = u8 [a0 + 0x2]\n  5028: a5 = u8 [a0 + 0x3]\n  5031: a2 = a2 << 0x8\n  5034: a2 = a2 | a3\n  5037: a4 = a4 << 0x10\n  5040: a5 = a5 << 0x18\n  5043: a4 = a4 | a5\n  5046: a2 = a2 | a4\n  5049: a3 = u8 [a0 + 0x5]\n  5052: a4 = u8 [a0 + 0x4]\n  5055: a5 = u8 [a0 + 0x6]\n  5058: a1 = u8 [a0 + 0x7]\n  5061: a3 = a3 << 0x8\n  5064: a3 = a3 | a4\n  5067: a5 = a5 << 0x10\n  5070: a1 = a1 << 0x18\n  5073: a1 = a1 | a5\n  5076: a1 = a1 | a3\n  5079: a1 = a1 << 0x20\n  5082: t1 = a1 | a2\n  5085: a1 = u8 [a0 + 0x19]\n  5088: a3 = u8 [a0 + 0x18]\n  5091: a4 = u8 [a0 + 0x1a]\n  5094: a5 = u8 [a0 + 0x1b]\n  5097: a1 = a1 << 0x8\n  5100: a1 = a1 | a3\n  5103: a4 = a4 << 0x10\n  5106: a5 = a5 << 0x18\n  5109: a4 = a4 | a5\n  5112: a1 = a1 | a4\n  5115: a3 = u8 [a0 + 0x1d]\n  5118: a4 = u8 [a0 + 0x1c]\n  5121: a5 = u8 [a0 + 0x1e]\n  5124: a2 = u8 [a0 + 0x1f]\n  5127: a3 = a3 << 0x8\n  5130: a3 = a3 | a4\n  5133: a5 = a5 << 0x10\n  5136: a2 = a2 << 0x18\n  5139: a2 = a2 | a5\n  5142: a2 = a2 | a3\n  5145: a2 = a2 << 0x20\n  5148: a3 = a2 | a1\n  5151: a1 = u8 [a0 + 0x9]\n  5154: a2 = u8 [a0 + 0x8]\n  5157: a4 = u8 [a0 + 0xa]\n  5160: a5 = u8 [a0 + 0xb]\n  5163: a1 = a1 << 0x8\n  5166: a1 = a1 | a2\n  5169: a4 = a4 << 0x10\n  5172: a5 = a5 << 0x18\n  5175: a4 = a4 | a5\n  5178: a1 = a1 | a4\n  5181: a2 = u8 [a0 + 0xd]\n  5184: a4 = u8 [a0 + 0xc]\n  5187: a5 = u8 [a0 + 0xe]\n  5190: a0 = u8 [a0 + 0xf]\n  5193: a2 = a2 << 0x8\n  5196: a2 = a2 | a4\n  5199: a5 = a5 << 0x10\n  5202: a0 = a0 << 0x18\n  5205: a0 = a0 | a5\n  5208: a0 = a0 | a2\n  5211: a0 = a0 << 0x20\n  5214: a0 = a0 | a1\n  5217: a1 = reverse a0\n  5219: a0 = reverse a3\n  5221: a2 = reverse t1\n  5223: a3 = reverse t0\n  5225: a2 = a2 | a3\n  5228: a3 = a0 | a1\n  5231: a3 = a3 | a2\n  5234: a3 = a3 >> 0x20\n  5237: a1 = a1 | a2\n  5240: a1 = a1 << 0x20\n  5243: a1 = a1 | a3\n  5246: jump @104 if a1 == 0\n      : @101 (gas: 1)\n  5249: trap\n      : @102 (gas: 3)\n  5250: a0 = 0\n  5252: a1 = 0\n  5254: ra = 94, jump @0\n      : @103 [@dyn 47] (gas: 7)\n  5259: i32 a1 = a0 + 0\n  5261: a0 = 0x1\n  5264: a2 = 0\n  5266: ecalli 11 // 'seal_return'\n  5268: i32 a0 = a0 + 0\n  5270: ra = 0x60\n  5273: jump @0\n      : @104 (gas: 2)\n  5276: i32 a0 = a0 + 0\n  5278: ra = 96, jump @0\n      : @105 [@dyn 48] (gas: 6)\n  5283: i32 a1 = a0 + 0\n  5285: a0 = 0\n  5287: a2 = 0\n  5289: ra = 0x62\n  5292: ecalli 11 // 'seal_return'\n  5294: fallthrough\n      : @106 [@dyn 49] (gas: 8)\n  5295: a2 = u32 [a1 + 0x10]\n  5298: a3 = u64 [a1 + 0x8]\n  5301: a1 = u64 [a1]\n  5303: u64 [a0 + 24] = 0\n  5306: u64 [a0 + 0x10] = a2\n  5309: u64 [a0 + 0x8] = a3\n  5312: u64 [a0] = a1\n  5314: ret\n      : @107 (gas: 8)\n  5316: a0 = u64 [sp + 0x30]\n  5319: a1 = u64 [sp + 0x38]\n  5322: a2 = u64 [sp + 0x28]\n  5325: a3 = u64 [sp + 0x20]\n  5328: a1 = a1 | a2\n  5331: a0 = a0 | a3\n  5334: a0 = a0 | a1\n  5337: jump @117 if a0 != 0\n      : @108 (gas: 2)\n  5341: a0 = i32 [0x20044]\n  5346: jump @117 if a0 <=u 35\n      : @109 (gas: 4)\n  5351: i32 a0 = sp + 0x60\n  5354: a1 = 0x4\n  5357: ecalli 2 // 'call_data_load'\n  5359: fallthrough\n      : @110 (gas: 11)\n  5360: a1 = u64 [sp + 0x70]\n  5363: s1 = u64 [sp + 0x78]\n  5366: a0 = 0x100000000\n  5376: a0 = a0 ^ a1\n  5379: a0 = a0 | s1\n  5382: u64 [sp + 0x18] = a1\n  5385: a1 = a1 >> 0x20\n  5388: a1 = a1 <u 0x1\n  5391: a1 = 0 if s1 != 0\n  5393: a1 = 0 if a0 == 0\n  5395: jump @118 if a1 == 0\n      : @111 (gas: 7)\n  5399: a0 = u64 [sp + 0x68]\n  5402: u64 [sp + 0x8] = a0\n  5405: a0 = u64 [sp + 0x60]\n  5408: u64 [sp + 0x10] = a0\n  5411: a1 = 0x20\n  5414: a0 = 0\n  5416: ra = 100, jump @0\n      : @112 [@dyn 50] (gas: 70)\n  5421: a1 = reverse s1\n  5423: a2 = u64 [sp + 0x18]\n  5426: a2 = reverse a2\n  5428: a3 = u64 [sp + 0x8]\n  5431: a3 = reverse a3\n  5433: a4 = u64 [sp + 0x10]\n  5436: a4 = reverse a4\n  5438: a5 = a4 >> 0x38\n  5441: u8 [a0 + 0x1f] = a5\n  5444: a5 = a4 >> 0x30\n  5447: u8 [a0 + 0x1e] = a5\n  5450: a5 = a4 >> 0x28\n  5453: u8 [a0 + 0x1d] = a5\n  5456: a5 = a4 >> 0x20\n  5459: u8 [a0 + 0x1c] = a5\n  5462: a5 = a4 >> 0x18\n  5465: u8 [a0 + 0x1b] = a5\n  5468: a5 = a4 >> 0x10\n  5471: u8 [a0 + 0x1a] = a5\n  5474: a5 = a4 >> 0x8\n  5477: u8 [a0 + 0x19] = a5\n  5480: u8 [a0 + 0x18] = a4\n  5483: a4 = a3 >> 0x38\n  5486: u8 [a0 + 0x17] = a4\n  5489: a4 = a3 >> 0x30\n  5492: u8 [a0 + 0x16] = a4\n  5495: a4 = a3 >> 0x28\n  5498: u8 [a0 + 0x15] = a4\n  5501: a4 = a3 >> 0x20\n  5504: u8 [a0 + 0x14] = a4\n  5507: a4 = a3 >> 0x18\n  5510: u8 [a0 + 0x13] = a4\n  5513: a4 = a3 >> 0x10\n  5516: u8 [a0 + 0x12] = a4\n  5519: a4 = a3 >> 0x8\n  5522: u8 [a0 + 0x11] = a4\n  5525: u8 [a0 + 0x10] = a3\n  5528: u8 [a0 + 0x8] = a2\n  5531: a3 = a2 >> 0x38\n  5534: u8 [a0 + 0xf] = a3\n  5537: a3 = a2 >> 0x30\n  5540: u8 [a0 + 0xe] = a3\n  5543: a3 = a2 >> 0x28\n  5546: u8 [a0 + 0xd] = a3\n  5549: a3 = a2 >> 0x20\n  5552: u8 [a0 + 0xc] = a3\n  5555: a3 = a2 >> 0x18\n  5558: u8 [a0 + 0xb] = a3\n  5561: a3 = a2 >> 0x10\n  5564: u8 [a0 + 0xa] = a3\n  5567: a2 = a2 >> 0x8\n  5570: u8 [a0 + 0x9] = a2\n  5573: u8 [a0] = a1\n  5575: a2 = a1 >> 0x38\n  5578: u8 [a0 + 0x7] = a2\n  5581: a2 = a1 >> 0x30\n  5584: u8 [a0 + 0x6] = a2\n  5587: a2 = a1 >> 0x28\n  5590: u8 [a0 + 0x5] = a2\n  5593: a2 = a1 >> 0x20\n  5596: u8 [a0 + 0x4] = a2\n  5599: a2 = a1 >> 0x18\n  5602: u8 [a0 + 0x3] = a2\n  5605: a2 = a1 >> 0x10\n  5608: u8 [a0 + 0x2] = a2\n  5611: a1 = a1 >> 0x8\n  5614: u8 [a0 + 0x1] = a1\n  5617: a0 = 0x20\n  5620: a1 = 0x20\n  5623: ra = 102, jump @0\n      : @113 [@dyn 51] (gas: 35)\n  5628: u8 [a0 + 31] = 0x5\n  5632: u8 [a0 + 30] = 0\n  5635: u8 [a0 + 29] = 0\n  5638: u8 [a0 + 28] = 0\n  5641: u8 [a0 + 27] = 0\n  5644: u8 [a0 + 26] = 0\n  5647: u8 [a0 + 25] = 0\n  5650: u8 [a0 + 24] = 0\n  5653: u8 [a0 + 23] = 0\n  5656: u8 [a0 + 22] = 0\n  5659: u8 [a0 + 21] = 0\n  5662: u8 [a0 + 20] = 0\n  5665: u8 [a0 + 19] = 0\n  5668: u8 [a0 + 18] = 0\n  5671: u8 [a0 + 17] = 0\n  5674: u8 [a0 + 16] = 0\n  5677: u8 [a0 + 15] = 0\n  5680: u8 [a0 + 14] = 0\n  5683: u8 [a0 + 13] = 0\n  5686: u8 [a0 + 12] = 0\n  5689: u8 [a0 + 11] = 0\n  5692: u8 [a0 + 10] = 0\n  5695: u8 [a0 + 9] = 0\n  5698: u8 [a0 + 8] = 0\n  5701: u8 [a0 + 7] = 0\n  5704: u8 [a0 + 6] = 0\n  5707: u8 [a0 + 5] = 0\n  5710: u8 [a0 + 4] = 0\n  5713: u8 [a0 + 3] = 0\n  5716: u8 [a0 + 2] = 0\n  5719: u8 [a0 + 1] = 0\n  5722: u8 [a0 + 0] = 0\n  5724: a1 = 0x40\n  5727: a0 = 0\n  5729: ra = 104, jump @0\n      : @114 [@dyn 52] (gas: 38)\n  5734: i32 a0 = a0 + 0\n  5736: i32 a2 = sp + 0x60\n  5739: a1 = 0x40\n  5742: ecalli 7 // 'hash_keccak_256'\n  5744: a0 = u64 [sp + 0x78]\n  5747: a1 = u64 [sp + 0x70]\n  5750: a2 = u64 [sp + 0x68]\n  5753: a3 = u64 [sp + 0x60]\n  5756: a0 = reverse a0\n  5758: a1 = reverse a1\n  5760: a2 = reverse a2\n  5762: a3 = reverse a3\n  5764: u64 [sp + 0x58] = a3\n  5767: u64 [sp + 0x50] = a2\n  5770: u64 [sp + 0x48] = a1\n  5773: u64 [sp + 0x40] = a0\n  5776: u64 [sp + 120] = 0\n  5779: u64 [sp + 112] = 0\n  5782: u64 [sp + 104] = 0\n  5785: u64 [sp + 96] = 0\n  5788: u32 [sp + 128] = 0x20\n  5793: i32 a1 = sp + 0x40\n  5796: i32 a3 = sp + 0x60\n  5799: i32 a4 = sp + 0x80\n  5803: a2 = 0xffffffffffffffff\n  5806: a0 = 0\n  5808: ecalli 6 // 'get_storage'\n  5810: a0 = u64 [sp + 0x78]\n  5813: u64 [sp] = a0\n  5815: a0 = u64 [sp + 0x70]\n  5818: u64 [sp + 0x8] = a0\n  5821: a0 = u64 [sp + 0x68]\n  5824: u64 [sp + 0x10] = a0\n  5827: a0 = u64 [sp + 0x60]\n  5830: u64 [sp + 0x18] = a0\n  5833: a0 = 0x40\n  5836: a1 = 0x20\n  5839: ra = 106, jump @0\n      : @115 [@dyn 53] (gas: 100)\n  5844: a1 = u8 [a0 + 0x11]\n  5847: a2 = u8 [a0 + 0x10]\n  5850: a3 = u8 [a0 + 0x12]\n  5853: a4 = u8 [a0 + 0x13]\n  5856: a1 = a1 << 0x8\n  5859: a1 = a1 | a2\n  5862: a3 = a3 << 0x10\n  5865: a4 = a4 << 0x18\n  5868: a3 = a3 | a4\n  5871: a1 = a1 | a3\n  5874: a2 = u8 [a0 + 0x15]\n  5877: a3 = u8 [a0 + 0x14]\n  5880: a4 = u8 [a0 + 0x16]\n  5883: a5 = u8 [a0 + 0x17]\n  5886: a2 = a2 << 0x8\n  5889: a2 = a2 | a3\n  5892: a4 = a4 << 0x10\n  5895: a5 = a5 << 0x18\n  5898: a4 = a4 | a5\n  5901: a2 = a2 | a4\n  5904: a2 = a2 << 0x20\n  5907: t0 = a2 | a1\n  5910: a2 = u8 [a0 + 0x1]\n  5913: a3 = u8 [a0]\n  5915: a4 = u8 [a0 + 0x2]\n  5918: a5 = u8 [a0 + 0x3]\n  5921: a2 = a2 << 0x8\n  5924: a2 = a2 | a3\n  5927: a4 = a4 << 0x10\n  5930: a5 = a5 << 0x18\n  5933: a4 = a4 | a5\n  5936: a2 = a2 | a4\n  5939: a3 = u8 [a0 + 0x5]\n  5942: a4 = u8 [a0 + 0x4]\n  5945: a5 = u8 [a0 + 0x6]\n  5948: s1 = u8 [a0 + 0x7]\n  5951: a3 = a3 << 0x8\n  5954: a3 = a3 | a4\n  5957: a5 = a5 << 0x10\n  5960: s1 = s1 << 0x18\n  5963: a5 = a5 | s1\n  5966: a3 = a3 | a5\n  5969: a3 = a3 << 0x20\n  5972: a2 = a2 | a3\n  5975: a3 = u8 [a0 + 0x19]\n  5978: a4 = u8 [a0 + 0x18]\n  5981: a5 = u8 [a0 + 0x1a]\n  5984: s1 = u8 [a0 + 0x1b]\n  5987: a3 = a3 << 0x8\n  5990: a3 = a3 | a4\n  5993: a5 = a5 << 0x10\n  5996: s1 = s1 << 0x18\n  5999: a5 = a5 | s1\n  6002: a3 = a3 | a5\n  6005: a4 = u8 [a0 + 0x1d]\n  6008: a5 = u8 [a0 + 0x1c]\n  6011: s1 = u8 [a0 + 0x1e]\n  6014: a1 = u8 [a0 + 0x1f]\n  6017: a4 = a4 << 0x8\n  6020: a4 = a4 | a5\n  6023: s1 = s1 << 0x10\n  6026: a1 = a1 << 0x18\n  6029: a1 = a1 | s1\n  6032: a1 = a1 | a4\n  6035: a1 = a1 << 0x20\n  6038: a3 = a3 | a1\n  6041: a1 = u8 [a0 + 0x9]\n  6044: a4 = u8 [a0 + 0x8]\n  6047: a5 = u8 [a0 + 0xa]\n  6050: s1 = u8 [a0 + 0xb]\n  6053: a1 = a1 << 0x8\n  6056: a1 = a1 | a4\n  6059: a5 = a5 << 0x10\n  6062: s1 = s1 << 0x18\n  6065: a5 = a5 | s1\n  6068: a1 = a1 | a5\n  6071: a4 = u8 [a0 + 0xd]\n  6074: a5 = u8 [a0 + 0xc]\n  6077: s1 = u8 [a0 + 0xe]\n  6080: a0 = u8 [a0 + 0xf]\n  6083: a4 = a4 << 0x8\n  6086: a4 = a4 | a5\n  6089: s1 = s1 << 0x10\n  6092: a0 = a0 << 0x18\n  6095: a0 = a0 | s1\n  6098: a0 = a0 | a4\n  6101: a0 = a0 << 0x20\n  6104: a0 = a0 | a1\n  6107: a1 = reverse a0\n  6109: a0 = reverse a3\n  6111: a2 = reverse a2\n  6113: a3 = reverse t0\n  6115: a2 = a2 | a3\n  6118: a3 = a0 | a1\n  6121: a3 = a3 | a2\n  6124: a3 = a3 >> 0x20\n  6127: a1 = a1 | a2\n  6130: a1 = a1 << 0x20\n  6133: a1 = a1 | a3\n  6136: jump @120 if a1 == 0\n      : @116 (gas: 1)\n  6139: trap\n      : @117 (gas: 4)\n  6140: a0 = 0\n  6142: a1 = 0\n  6144: ra = 0x6c\n  6147: jump @0\n      : @118 (gas: 2)\n  6150: a0 = 0\n  6152: ra = 108, jump @0\n      : @119 [@dyn 54] (gas: 5)\n  6157: i32 a1 = a0 + 0\n  6159: a0 = 0x1\n  6162: a2 = 0\n  6164: ecalli 11 // 'seal_return'\n  6166: fallthrough\n      : @120 (gas: 4)\n  6167: i32 s1 = a0 + 0\n  6169: a1 = 0x20\n  6172: a0 = s1\n  6174: ra = 110, jump @0\n      : @121 [@dyn 55] (gas: 71)\n  6179: a1 = u64 [sp]\n  6181: a1 = reverse a1\n  6183: a2 = u64 [sp + 0x8]\n  6186: a2 = reverse a2\n  6188: a3 = u64 [sp + 0x10]\n  6191: a3 = reverse a3\n  6193: a4 = u64 [sp + 0x18]\n  6196: a4 = reverse a4\n  6198: a5 = a4 >> 0x38\n  6201: u8 [a0 + 0x1f] = a5\n  6204: a5 = a4 >> 0x30\n  6207: u8 [a0 + 0x1e] = a5\n  6210: a5 = a4 >> 0x28\n  6213: u8 [a0 + 0x1d] = a5\n  6216: a5 = a4 >> 0x20\n  6219: u8 [a0 + 0x1c] = a5\n  6222: a5 = a4 >> 0x18\n  6225: u8 [a0 + 0x1b] = a5\n  6228: a5 = a4 >> 0x10\n  6231: u8 [a0 + 0x1a] = a5\n  6234: a5 = a4 >> 0x8\n  6237: u8 [a0 + 0x19] = a5\n  6240: u8 [a0 + 0x18] = a4\n  6243: u8 [a0 + 0x10] = a3\n  6246: a4 = a3 >> 0x38\n  6249: u8 [a0 + 0x17] = a4\n  6252: a4 = a3 >> 0x30\n  6255: u8 [a0 + 0x16] = a4\n  6258: a4 = a3 >> 0x28\n  6261: u8 [a0 + 0x15] = a4\n  6264: a4 = a3 >> 0x20\n  6267: u8 [a0 + 0x14] = a4\n  6270: a4 = a3 >> 0x18\n  6273: u8 [a0 + 0x13] = a4\n  6276: a4 = a3 >> 0x10\n  6279: u8 [a0 + 0x12] = a4\n  6282: a3 = a3 >> 0x8\n  6285: u8 [a0 + 0x11] = a3\n  6288: u8 [a0 + 0x8] = a2\n  6291: a3 = a2 >> 0x38\n  6294: u8 [a0 + 0xf] = a3\n  6297: a3 = a2 >> 0x30\n  6300: u8 [a0 + 0xe] = a3\n  6303: a3 = a2 >> 0x28\n  6306: u8 [a0 + 0xd] = a3\n  6309: a3 = a2 >> 0x20\n  6312: u8 [a0 + 0xc] = a3\n  6315: a3 = a2 >> 0x18\n  6318: u8 [a0 + 0xb] = a3\n  6321: a3 = a2 >> 0x10\n  6324: u8 [a0 + 0xa] = a3\n  6327: a2 = a2 >> 0x8\n  6330: u8 [a0 + 0x9] = a2\n  6333: u8 [a0] = a1\n  6335: a2 = a1 >> 0x38\n  6338: u8 [a0 + 0x7] = a2\n  6341: a2 = a1 >> 0x30\n  6344: u8 [a0 + 0x6] = a2\n  6347: a2 = a1 >> 0x28\n  6350: u8 [a0 + 0x5] = a2\n  6353: a2 = a1 >> 0x20\n  6356: u8 [a0 + 0x4] = a2\n  6359: a2 = a1 >> 0x18\n  6362: u8 [a0 + 0x3] = a2\n  6365: a2 = a1 >> 0x10\n  6368: u8 [a0 + 0x2] = a2\n  6371: a1 = a1 >> 0x8\n  6374: u8 [a0 + 0x1] = a1\n  6377: a1 = 0x20\n  6380: a0 = s1\n  6382: ra = 112, jump @0\n      : @122 [@dyn 56] (gas: 6)\n  6387: i32 a1 = a0 + 0\n  6389: a2 = 0x20\n  6392: a0 = 0\n  6394: ra = 0x72\n  6397: ecalli 11 // 'seal_return'\n  6399: fallthrough\n      : @123 [@dyn 57] (gas: 12)\n  6400: sp = sp + 0xffffffffffffffc0\n  6403: u64 [sp + 0x38] = ra\n  6406: u64 [sp + 0x30] = s0\n  6409: s0 = sp + 0x40\n  6412: sp = sp & 0xffffffffffffffe0\n  6415: u64 [sp + 24] = 0\n  6418: u64 [sp + 16] = 0\n  6421: u64 [sp + 8] = 0\n  6424: u64 [sp + 0] = 0\n  6426: i32 a0 = sp + 0\n  6428: ecalli 14 // 'value_transferred'\n  6430: fallthrough\n      : @124 (gas: 8)\n  6431: a0 = u64 [sp + 0x10]\n  6434: a1 = u64 [sp + 0x18]\n  6437: a2 = u64 [sp + 0x8]\n  6440: a3 = u64 [sp]\n  6442: a1 = a1 | a2\n  6445: a0 = a0 | a3\n  6448: a0 = a0 | a1\n  6451: jump @130 if a0 != 0\n      : @125 (gas: 2)\n  6455: a0 = i32 [0x20044]\n  6460: jump @130 if a0 <=u 3\n      : @126 (gas: 1)\n  6465: ra = 116, jump @295\n      : @127 [@dyn 58] (gas: 3)\n  6470: a0 = 0x40\n  6473: a1 = 0x20\n  6476: ra = 118, jump @0\n      : @128 [@dyn 59] (gas: 100)\n  6481: a1 = u8 [a0 + 0x11]\n  6484: a2 = u8 [a0 + 0x10]\n  6487: a3 = u8 [a0 + 0x12]\n  6490: a4 = u8 [a0 + 0x13]\n  6493: a1 = a1 << 0x8\n  6496: a1 = a1 | a2\n  6499: a3 = a3 << 0x10\n  6502: a4 = a4 << 0x18\n  6505: a3 = a3 | a4\n  6508: a1 = a1 | a3\n  6511: a2 = u8 [a0 + 0x15]\n  6514: a3 = u8 [a0 + 0x14]\n  6517: a4 = u8 [a0 + 0x16]\n  6520: a5 = u8 [a0 + 0x17]\n  6523: a2 = a2 << 0x8\n  6526: a2 = a2 | a3\n  6529: a4 = a4 << 0x10\n  6532: a5 = a5 << 0x18\n  6535: a4 = a4 | a5\n  6538: a2 = a2 | a4\n  6541: a2 = a2 << 0x20\n  6544: t0 = a2 | a1\n  6547: a2 = u8 [a0 + 0x1]\n  6550: a3 = u8 [a0]\n  6552: a4 = u8 [a0 + 0x2]\n  6555: a5 = u8 [a0 + 0x3]\n  6558: a2 = a2 << 0x8\n  6561: a2 = a2 | a3\n  6564: a4 = a4 << 0x10\n  6567: a5 = a5 << 0x18\n  6570: a4 = a4 | a5\n  6573: a2 = a2 | a4\n  6576: a3 = u8 [a0 + 0x5]\n  6579: a4 = u8 [a0 + 0x4]\n  6582: a5 = u8 [a0 + 0x6]\n  6585: a1 = u8 [a0 + 0x7]\n  6588: a3 = a3 << 0x8\n  6591: a3 = a3 | a4\n  6594: a5 = a5 << 0x10\n  6597: a1 = a1 << 0x18\n  6600: a1 = a1 | a5\n  6603: a1 = a1 | a3\n  6606: a1 = a1 << 0x20\n  6609: t1 = a1 | a2\n  6612: a1 = u8 [a0 + 0x19]\n  6615: a3 = u8 [a0 + 0x18]\n  6618: a4 = u8 [a0 + 0x1a]\n  6621: a5 = u8 [a0 + 0x1b]\n  6624: a1 = a1 << 0x8\n  6627: a1 = a1 | a3\n  6630: a4 = a4 << 0x10\n  6633: a5 = a5 << 0x18\n  6636: a4 = a4 | a5\n  6639: a1 = a1 | a4\n  6642: a3 = u8 [a0 + 0x1d]\n  6645: a4 = u8 [a0 + 0x1c]\n  6648: a5 = u8 [a0 + 0x1e]\n  6651: a2 = u8 [a0 + 0x1f]\n  6654: a3 = a3 << 0x8\n  6657: a3 = a3 | a4\n  6660: a5 = a5 << 0x10\n  6663: a2 = a2 << 0x18\n  6666: a2 = a2 | a5\n  6669: a2 = a2 | a3\n  6672: a2 = a2 << 0x20\n  6675: a3 = a2 | a1\n  6678: a1 = u8 [a0 + 0x9]\n  6681: a2 = u8 [a0 + 0x8]\n  6684: a4 = u8 [a0 + 0xa]\n  6687: a5 = u8 [a0 + 0xb]\n  6690: a1 = a1 << 0x8\n  6693: a1 = a1 | a2\n  6696: a4 = a4 << 0x10\n  6699: a5 = a5 << 0x18\n  6702: a4 = a4 | a5\n  6705: a1 = a1 | a4\n  6708: a2 = u8 [a0 + 0xd]\n  6711: a4 = u8 [a0 + 0xc]\n  6714: a5 = u8 [a0 + 0xe]\n  6717: a0 = u8 [a0 + 0xf]\n  6720: a2 = a2 << 0x8\n  6723: a2 = a2 | a4\n  6726: a5 = a5 << 0x10\n  6729: a0 = a0 << 0x18\n  6732: a0 = a0 | a5\n  6735: a0 = a0 | a2\n  6738: a0 = a0 << 0x20\n  6741: a0 = a0 | a1\n  6744: a1 = reverse a0\n  6746: a0 = reverse a3\n  6748: a2 = reverse t1\n  6750: a3 = reverse t0\n  6752: a2 = a2 | a3\n  6755: a3 = a0 | a1\n  6758: a3 = a3 | a2\n  6761: a3 = a3 >> 0x20\n  6764: a1 = a1 | a2\n  6767: a1 = a1 << 0x20\n  6770: a1 = a1 | a3\n  6773: jump @132 if a1 == 0\n      : @129 (gas: 1)\n  6776: trap\n      : @130 (gas: 3)\n  6777: a0 = 0\n  6779: a1 = 0\n  6781: ra = 120, jump @0\n      : @131 [@dyn 60] (gas: 7)\n  6786: i32 a1 = a0 + 0\n  6788: a0 = 0x1\n  6791: a2 = 0\n  6793: ecalli 11 // 'seal_return'\n  6795: i32 a0 = a0 + 0\n  6797: ra = 0x7a\n  6800: jump @0\n      : @132 (gas: 2)\n  6803: i32 a0 = a0 + 0\n  6805: ra = 122, jump @0\n      : @133 [@dyn 61] (gas: 6)\n  6810: i32 a1 = a0 + 0\n  6812: a0 = 0\n  6814: a2 = 0\n  6816: ra = 0x7c\n  6819: ecalli 11 // 'seal_return'\n  6821: fallthrough\n      : @134 [@dyn 62] (gas: 36)\n  6822: sp = sp + 0xffffffffffffffa0\n  6825: u64 [sp + 0x58] = ra\n  6828: u64 [sp + 0x50] = s0\n  6831: u64 [sp + 0x48] = s1\n  6834: s0 = sp + 0x60\n  6837: sp = sp & 0xffffffffffffffe0\n  6840: s1 = a0\n  6842: u64 [sp + 24] = 0\n  6845: u64 [sp + 16] = 0\n  6848: u64 [sp + 8] = 0\n  6851: u64 [sp + 0] = 0x1\n  6854: u64 [sp + 56] = 0\n  6857: u64 [sp + 48] = 0\n  6860: u64 [sp + 40] = 0\n  6863: u64 [sp + 32] = 0\n  6866: u32 [sp + 64] = 0x20\n  6870: i32 a1 = sp + 0\n  6872: i32 a3 = sp + 0x20\n  6875: i32 a4 = sp + 0x40\n  6878: a2 = 0xffffffffffffffff\n  6881: a0 = 0\n  6883: ecalli 6 // 'get_storage'\n  6885: a0 = u64 [sp + 0x38]\n  6888: a1 = u64 [sp + 0x30]\n  6891: a2 = u64 [sp + 0x28]\n  6894: a3 = u64 [sp + 0x20]\n  6897: u64 [s1 + 0x18] = a0\n  6900: u64 [s1 + 0x10] = a1\n  6903: u64 [s1 + 0x8] = a2\n  6906: u64 [s1] = a3\n  6908: sp = s0 + 0xffffffffffffffa0\n  6911: ra = u64 [sp + 0x58]\n  6914: s0 = u64 [sp + 0x50]\n  6917: s1 = u64 [sp + 0x48]\n  6920: sp = sp + 0x60\n  6923: ret\n      : @135 (gas: 8)\n  6925: a0 = u64 [sp + 0x30]\n  6928: a1 = u64 [sp + 0x38]\n  6931: a2 = u64 [sp + 0x28]\n  6934: a3 = u64 [sp + 0x20]\n  6937: a1 = a1 | a2\n  6940: a0 = a0 | a3\n  6943: a0 = a0 | a1\n  6946: jump @140 if a0 != 0\n      : @136 (gas: 2)\n  6950: a0 = i32 [0x20044]\n  6955: jump @140 if a0 <=u 3\n      : @137 (gas: 26)\n  6960: u64 [sp + 88] = 0\n  6963: u64 [sp + 80] = 0\n  6966: u64 [sp + 72] = 0\n  6969: u64 [sp + 64] = 0x1\n  6973: u64 [sp + 120] = 0\n  6976: u64 [sp + 112] = 0\n  6979: u64 [sp + 104] = 0\n  6982: u64 [sp + 96] = 0\n  6985: u32 [sp + 128] = 0x20\n  6990: i32 a1 = sp + 0x40\n  6993: i32 a3 = sp + 0x60\n  6996: i32 a4 = sp + 0x80\n  7000: a2 = 0xffffffffffffffff\n  7003: a0 = 0\n  7005: ecalli 6 // 'get_storage'\n  7007: a0 = u64 [sp + 0x78]\n  7010: u64 [sp] = a0\n  7012: a0 = u64 [sp + 0x70]\n  7015: u64 [sp + 0x8] = a0\n  7018: a0 = u64 [sp + 0x68]\n  7021: u64 [sp + 0x10] = a0\n  7024: a0 = u64 [sp + 0x60]\n  7027: u64 [sp + 0x18] = a0\n  7030: a0 = 0x40\n  7033: a1 = 0x20\n  7036: ra = 126, jump @0\n      : @138 [@dyn 63] (gas: 100)\n  7041: a1 = u8 [a0 + 0x11]\n  7044: a2 = u8 [a0 + 0x10]\n  7047: a3 = u8 [a0 + 0x12]\n  7050: a4 = u8 [a0 + 0x13]\n  7053: a1 = a1 << 0x8\n  7056: a1 = a1 | a2\n  7059: a3 = a3 << 0x10\n  7062: a4 = a4 << 0x18\n  7065: a3 = a3 | a4\n  7068: a1 = a1 | a3\n  7071: a2 = u8 [a0 + 0x15]\n  7074: a3 = u8 [a0 + 0x14]\n  7077: a4 = u8 [a0 + 0x16]\n  7080: a5 = u8 [a0 + 0x17]\n  7083: a2 = a2 << 0x8\n  7086: a2 = a2 | a3\n  7089: a4 = a4 << 0x10\n  7092: a5 = a5 << 0x18\n  7095: a4 = a4 | a5\n  7098: a2 = a2 | a4\n  7101: a2 = a2 << 0x20\n  7104: t0 = a2 | a1\n  7107: a2 = u8 [a0 + 0x1]\n  7110: a3 = u8 [a0]\n  7112: a4 = u8 [a0 + 0x2]\n  7115: a5 = u8 [a0 + 0x3]\n  7118: a2 = a2 << 0x8\n  7121: a2 = a2 | a3\n  7124: a4 = a4 << 0x10\n  7127: a5 = a5 << 0x18\n  7130: a4 = a4 | a5\n  7133: a2 = a2 | a4\n  7136: a3 = u8 [a0 + 0x5]\n  7139: a4 = u8 [a0 + 0x4]\n  7142: a5 = u8 [a0 + 0x6]\n  7145: s1 = u8 [a0 + 0x7]\n  7148: a3 = a3 << 0x8\n  7151: a3 = a3 | a4\n  7154: a5 = a5 << 0x10\n  7157: s1 = s1 << 0x18\n  7160: a5 = a5 | s1\n  7163: a3 = a3 | a5\n  7166: a3 = a3 << 0x20\n  7169: a2 = a2 | a3\n  7172: a3 = u8 [a0 + 0x19]\n  7175: a4 = u8 [a0 + 0x18]\n  7178: a5 = u8 [a0 + 0x1a]\n  7181: s1 = u8 [a0 + 0x1b]\n  7184: a3 = a3 << 0x8\n  7187: a3 = a3 | a4\n  7190: a5 = a5 << 0x10\n  7193: s1 = s1 << 0x18\n  7196: a5 = a5 | s1\n  7199: a3 = a3 | a5\n  7202: a4 = u8 [a0 + 0x1d]\n  7205: a5 = u8 [a0 + 0x1c]\n  7208: s1 = u8 [a0 + 0x1e]\n  7211: a1 = u8 [a0 + 0x1f]\n  7214: a4 = a4 << 0x8\n  7217: a4 = a4 | a5\n  7220: s1 = s1 << 0x10\n  7223: a1 = a1 << 0x18\n  7226: a1 = a1 | s1\n  7229: a1 = a1 | a4\n  7232: a1 = a1 << 0x20\n  7235: a3 = a3 | a1\n  7238: a1 = u8 [a0 + 0x9]\n  7241: a4 = u8 [a0 + 0x8]\n  7244: a5 = u8 [a0 + 0xa]\n  7247: s1 = u8 [a0 + 0xb]\n  7250: a1 = a1 << 0x8\n  7253: a1 = a1 | a4\n  7256: a5 = a5 << 0x10\n  7259: s1 = s1 << 0x18\n  7262: a5 = a5 | s1\n  7265: a1 = a1 | a5\n  7268: a4 = u8 [a0 + 0xd]\n  7271: a5 = u8 [a0 + 0xc]\n  7274: s1 = u8 [a0 + 0xe]\n  7277: a0 = u8 [a0 + 0xf]\n  7280: a4 = a4 << 0x8\n  7283: a4 = a4 | a5\n  7286: s1 = s1 << 0x10\n  7289: a0 = a0 << 0x18\n  7292: a0 = a0 | s1\n  7295: a0 = a0 | a4\n  7298: a0 = a0 << 0x20\n  7301: a0 = a0 | a1\n  7304: a1 = reverse a0\n  7306: a0 = reverse a3\n  7308: a2 = reverse a2\n  7310: a3 = reverse t0\n  7312: a2 = a2 | a3\n  7315: a3 = a0 | a1\n  7318: a3 = a3 | a2\n  7321: a3 = a3 >> 0x20\n  7324: a1 = a1 | a2\n  7327: a1 = a1 << 0x20\n  7330: a1 = a1 | a3\n  7333: jump @142 if a1 == 0\n      : @139 (gas: 1)\n  7336: trap\n      : @140 (gas: 3)\n  7337: a0 = 0\n  7339: a1 = 0\n  7341: ra = 128, jump @0\n      : @141 [@dyn 64] (gas: 5)\n  7347: i32 a1 = a0 + 0\n  7349: a0 = 0x1\n  7352: a2 = 0\n  7354: ecalli 11 // 'seal_return'\n  7356: fallthrough\n      : @142 (gas: 4)\n  7357: i32 s1 = a0 + 0\n  7359: a1 = 0x20\n  7362: a0 = s1\n  7364: ra = 130, jump @0\n      : @143 [@dyn 65] (gas: 71)\n  7370: a1 = u64 [sp]\n  7372: a1 = reverse a1\n  7374: a2 = u64 [sp + 0x8]\n  7377: a2 = reverse a2\n  7379: a3 = u64 [sp + 0x10]\n  7382: a3 = reverse a3\n  7384: a4 = u64 [sp + 0x18]\n  7387: a4 = reverse a4\n  7389: a5 = a4 >> 0x38\n  7392: u8 [a0 + 0x1f] = a5\n  7395: a5 = a4 >> 0x30\n  7398: u8 [a0 + 0x1e] = a5\n  7401: a5 = a4 >> 0x28\n  7404: u8 [a0 + 0x1d] = a5\n  7407: a5 = a4 >> 0x20\n  7410: u8 [a0 + 0x1c] = a5\n  7413: a5 = a4 >> 0x18\n  7416: u8 [a0 + 0x1b] = a5\n  7419: a5 = a4 >> 0x10\n  7422: u8 [a0 + 0x1a] = a5\n  7425: a5 = a4 >> 0x8\n  7428: u8 [a0 + 0x19] = a5\n  7431: u8 [a0 + 0x18] = a4\n  7434: u8 [a0 + 0x10] = a3\n  7437: a4 = a3 >> 0x38\n  7440: u8 [a0 + 0x17] = a4\n  7443: a4 = a3 >> 0x30\n  7446: u8 [a0 + 0x16] = a4\n  7449: a4 = a3 >> 0x28\n  7452: u8 [a0 + 0x15] = a4\n  7455: a4 = a3 >> 0x20\n  7458: u8 [a0 + 0x14] = a4\n  7461: a4 = a3 >> 0x18\n  7464: u8 [a0 + 0x13] = a4\n  7467: a4 = a3 >> 0x10\n  7470: u8 [a0 + 0x12] = a4\n  7473: a3 = a3 >> 0x8\n  7476: u8 [a0 + 0x11] = a3\n  7479: u8 [a0 + 0x8] = a2\n  7482: a3 = a2 >> 0x38\n  7485: u8 [a0 + 0xf] = a3\n  7488: a3 = a2 >> 0x30\n  7491: u8 [a0 + 0xe] = a3\n  7494: a3 = a2 >> 0x28\n  7497: u8 [a0 + 0xd] = a3\n  7500: a3 = a2 >> 0x20\n  7503: u8 [a0 + 0xc] = a3\n  7506: a3 = a2 >> 0x18\n  7509: u8 [a0 + 0xb] = a3\n  7512: a3 = a2 >> 0x10\n  7515: u8 [a0 + 0xa] = a3\n  7518: a2 = a2 >> 0x8\n  7521: u8 [a0 + 0x9] = a2\n  7524: u8 [a0] = a1\n  7526: a2 = a1 >> 0x38\n  7529: u8 [a0 + 0x7] = a2\n  7532: a2 = a1 >> 0x30\n  7535: u8 [a0 + 0x6] = a2\n  7538: a2 = a1 >> 0x28\n  7541: u8 [a0 + 0x5] = a2\n  7544: a2 = a1 >> 0x20\n  7547: u8 [a0 + 0x4] = a2\n  7550: a2 = a1 >> 0x18\n  7553: u8 [a0 + 0x3] = a2\n  7556: a2 = a1 >> 0x10\n  7559: u8 [a0 + 0x2] = a2\n  7562: a1 = a1 >> 0x8\n  7565: u8 [a0 + 0x1] = a1\n  7568: a1 = 0x20\n  7571: a0 = s1\n  7573: ra = 132, jump @0\n      : @144 [@dyn 66] (gas: 6)\n  7579: i32 a1 = a0 + 0\n  7581: a2 = 0x20\n  7584: a0 = 0\n  7586: ra = 0x86\n  7590: ecalli 11 // 'seal_return'\n  7592: fallthrough\n      : @145 [@dyn 67] (gas: 36)\n  7593: sp = sp + 0xffffffffffffffa0\n  7596: u64 [sp + 0x58] = ra\n  7599: u64 [sp + 0x50] = s0\n  7602: u64 [sp + 0x48] = s1\n  7605: s0 = sp + 0x60\n  7608: sp = sp & 0xffffffffffffffe0\n  7611: s1 = a0\n  7613: u64 [sp + 24] = 0\n  7616: u64 [sp + 16] = 0\n  7619: u64 [sp + 8] = 0\n  7622: u64 [sp + 0] = 0x2\n  7625: u64 [sp + 56] = 0\n  7628: u64 [sp + 48] = 0\n  7631: u64 [sp + 40] = 0\n  7634: u64 [sp + 32] = 0\n  7637: u32 [sp + 64] = 0x20\n  7641: i32 a1 = sp + 0\n  7643: i32 a3 = sp + 0x20\n  7646: i32 a4 = sp + 0x40\n  7649: a2 = 0xffffffffffffffff\n  7652: a0 = 0\n  7654: ecalli 6 // 'get_storage'\n  7656: a0 = u64 [sp + 0x38]\n  7659: a1 = u64 [sp + 0x30]\n  7662: a2 = u64 [sp + 0x28]\n  7665: a3 = u64 [sp + 0x20]\n  7668: u64 [s1 + 0x18] = a0\n  7671: u64 [s1 + 0x10] = a1\n  7674: u64 [s1 + 0x8] = a2\n  7677: u64 [s1] = a3\n  7679: sp = s0 + 0xffffffffffffffa0\n  7682: ra = u64 [sp + 0x58]\n  7685: s0 = u64 [sp + 0x50]\n  7688: s1 = u64 [sp + 0x48]\n  7691: sp = sp + 0x60\n  7694: ret\n      : @146 (gas: 8)\n  7696: a0 = u64 [sp + 0x30]\n  7699: a1 = u64 [sp + 0x38]\n  7702: a2 = u64 [sp + 0x28]\n  7705: a3 = u64 [sp + 0x20]\n  7708: a1 = a1 | a2\n  7711: a0 = a0 | a3\n  7714: a0 = a0 | a1\n  7717: jump @151 if a0 != 0\n      : @147 (gas: 2)\n  7721: a0 = i32 [0x20044]\n  7726: jump @151 if a0 <=u 3\n      : @148 (gas: 26)\n  7731: u64 [sp + 88] = 0\n  7734: u64 [sp + 80] = 0\n  7737: u64 [sp + 72] = 0\n  7740: u64 [sp + 64] = 0x2\n  7744: u64 [sp + 120] = 0\n  7747: u64 [sp + 112] = 0\n  7750: u64 [sp + 104] = 0\n  7753: u64 [sp + 96] = 0\n  7756: u32 [sp + 128] = 0x20\n  7761: i32 a1 = sp + 0x40\n  7764: i32 a3 = sp + 0x60\n  7767: i32 a4 = sp + 0x80\n  7771: a2 = 0xffffffffffffffff\n  7774: a0 = 0\n  7776: ecalli 6 // 'get_storage'\n  7778: a0 = u64 [sp + 0x78]\n  7781: u64 [sp] = a0\n  7783: a0 = u64 [sp + 0x70]\n  7786: u64 [sp + 0x8] = a0\n  7789: a0 = u64 [sp + 0x68]\n  7792: u64 [sp + 0x10] = a0\n  7795: a0 = u64 [sp + 0x60]\n  7798: u64 [sp + 0x18] = a0\n  7801: a0 = 0x40\n  7804: a1 = 0x20\n  7807: ra = 136, jump @0\n      : @149 [@dyn 68] (gas: 100)\n  7813: a1 = u8 [a0 + 0x11]\n  7816: a2 = u8 [a0 + 0x10]\n  7819: a3 = u8 [a0 + 0x12]\n  7822: a4 = u8 [a0 + 0x13]\n  7825: a1 = a1 << 0x8\n  7828: a1 = a1 | a2\n  7831: a3 = a3 << 0x10\n  7834: a4 = a4 << 0x18\n  7837: a3 = a3 | a4\n  7840: a1 = a1 | a3\n  7843: a2 = u8 [a0 + 0x15]\n  7846: a3 = u8 [a0 + 0x14]\n  7849: a4 = u8 [a0 + 0x16]\n  7852: a5 = u8 [a0 + 0x17]\n  7855: a2 = a2 << 0x8\n  7858: a2 = a2 | a3\n  7861: a4 = a4 << 0x10\n  7864: a5 = a5 << 0x18\n  7867: a4 = a4 | a5\n  7870: a2 = a2 | a4\n  7873: a2 = a2 << 0x20\n  7876: t0 = a2 | a1\n  7879: a2 = u8 [a0 + 0x1]\n  7882: a3 = u8 [a0]\n  7884: a4 = u8 [a0 + 0x2]\n  7887: a5 = u8 [a0 + 0x3]\n  7890: a2 = a2 << 0x8\n  7893: a2 = a2 | a3\n  7896: a4 = a4 << 0x10\n  7899: a5 = a5 << 0x18\n  7902: a4 = a4 | a5\n  7905: a2 = a2 | a4\n  7908: a3 = u8 [a0 + 0x5]\n  7911: a4 = u8 [a0 + 0x4]\n  7914: a5 = u8 [a0 + 0x6]\n  7917: s1 = u8 [a0 + 0x7]\n  7920: a3 = a3 << 0x8\n  7923: a3 = a3 | a4\n  7926: a5 = a5 << 0x10\n  7929: s1 = s1 << 0x18\n  7932: a5 = a5 | s1\n  7935: a3 = a3 | a5\n  7938: a3 = a3 << 0x20\n  7941: a2 = a2 | a3\n  7944: a3 = u8 [a0 + 0x19]\n  7947: a4 = u8 [a0 + 0x18]\n  7950: a5 = u8 [a0 + 0x1a]\n  7953: s1 = u8 [a0 + 0x1b]\n  7956: a3 = a3 << 0x8\n  7959: a3 = a3 | a4\n  7962: a5 = a5 << 0x10\n  7965: s1 = s1 << 0x18\n  7968: a5 = a5 | s1\n  7971: a3 = a3 | a5\n  7974: a4 = u8 [a0 + 0x1d]\n  7977: a5 = u8 [a0 + 0x1c]\n  7980: s1 = u8 [a0 + 0x1e]\n  7983: a1 = u8 [a0 + 0x1f]\n  7986: a4 = a4 << 0x8\n  7989: a4 = a4 | a5\n  7992: s1 = s1 << 0x10\n  7995: a1 = a1 << 0x18\n  7998: a1 = a1 | s1\n  8001: a1 = a1 | a4\n  8004: a1 = a1 << 0x20\n  8007: a3 = a3 | a1\n  8010: a1 = u8 [a0 + 0x9]\n  8013: a4 = u8 [a0 + 0x8]\n  8016: a5 = u8 [a0 + 0xa]\n  8019: s1 = u8 [a0 + 0xb]\n  8022: a1 = a1 << 0x8\n  8025: a1 = a1 | a4\n  8028: a5 = a5 << 0x10\n  8031: s1 = s1 << 0x18\n  8034: a5 = a5 | s1\n  8037: a1 = a1 | a5\n  8040: a4 = u8 [a0 + 0xd]\n  8043: a5 = u8 [a0 + 0xc]\n  8046: s1 = u8 [a0 + 0xe]\n  8049: a0 = u8 [a0 + 0xf]\n  8052: a4 = a4 << 0x8\n  8055: a4 = a4 | a5\n  8058: s1 = s1 << 0x10\n  8061: a0 = a0 << 0x18\n  8064: a0 = a0 | s1\n  8067: a0 = a0 | a4\n  8070: a0 = a0 << 0x20\n  8073: a0 = a0 | a1\n  8076: a1 = reverse a0\n  8078: a0 = reverse a3\n  8080: a2 = reverse a2\n  8082: a3 = reverse t0\n  8084: a2 = a2 | a3\n  8087: a3 = a0 | a1\n  8090: a3 = a3 | a2\n  8093: a3 = a3 >> 0x20\n  8096: a1 = a1 | a2\n  8099: a1 = a1 << 0x20\n  8102: a1 = a1 | a3\n  8105: jump @153 if a1 == 0\n      : @150 (gas: 1)\n  8108: trap\n      : @151 (gas: 3)\n  8109: a0 = 0\n  8111: a1 = 0\n  8113: ra = 138, jump @0\n      : @152 [@dyn 69] (gas: 5)\n  8119: i32 a1 = a0 + 0\n  8121: a0 = 0x1\n  8124: a2 = 0\n  8126: ecalli 11 // 'seal_return'\n  8128: fallthrough\n      : @153 (gas: 4)\n  8129: i32 s1 = a0 + 0\n  8131: a1 = 0x20\n  8134: a0 = s1\n  8136: ra = 140, jump @0\n      : @154 [@dyn 70] (gas: 71)\n  8142: a1 = u64 [sp]\n  8144: a1 = reverse a1\n  8146: a2 = u64 [sp + 0x8]\n  8149: a2 = reverse a2\n  8151: a3 = u64 [sp + 0x10]\n  8154: a3 = reverse a3\n  8156: a4 = u64 [sp + 0x18]\n  8159: a4 = reverse a4\n  8161: a5 = a4 >> 0x38\n  8164: u8 [a0 + 0x1f] = a5\n  8167: a5 = a4 >> 0x30\n  8170: u8 [a0 + 0x1e] = a5\n  8173: a5 = a4 >> 0x28\n  8176: u8 [a0 + 0x1d] = a5\n  8179: a5 = a4 >> 0x20\n  8182: u8 [a0 + 0x1c] = a5\n  8185: a5 = a4 >> 0x18\n  8188: u8 [a0 + 0x1b] = a5\n  8191: a5 = a4 >> 0x10\n  8194: u8 [a0 + 0x1a] = a5\n  8197: a5 = a4 >> 0x8\n  8200: u8 [a0 + 0x19] = a5\n  8203: u8 [a0 + 0x18] = a4\n  8206: u8 [a0 + 0x10] = a3\n  8209: a4 = a3 >> 0x38\n  8212: u8 [a0 + 0x17] = a4\n  8215: a4 = a3 >> 0x30\n  8218: u8 [a0 + 0x16] = a4\n  8221: a4 = a3 >> 0x28\n  8224: u8 [a0 + 0x15] = a4\n  8227: a4 = a3 >> 0x20\n  8230: u8 [a0 + 0x14] = a4\n  8233: a4 = a3 >> 0x18\n  8236: u8 [a0 + 0x13] = a4\n  8239: a4 = a3 >> 0x10\n  8242: u8 [a0 + 0x12] = a4\n  8245: a3 = a3 >> 0x8\n  8248: u8 [a0 + 0x11] = a3\n  8251: u8 [a0 + 0x8] = a2\n  8254: a3 = a2 >> 0x38\n  8257: u8 [a0 + 0xf] = a3\n  8260: a3 = a2 >> 0x30\n  8263: u8 [a0 + 0xe] = a3\n  8266: a3 = a2 >> 0x28\n  8269: u8 [a0 + 0xd] = a3\n  8272: a3 = a2 >> 0x20\n  8275: u8 [a0 + 0xc] = a3\n  8278: a3 = a2 >> 0x18\n  8281: u8 [a0 + 0xb] = a3\n  8284: a3 = a2 >> 0x10\n  8287: u8 [a0 + 0xa] = a3\n  8290: a2 = a2 >> 0x8\n  8293: u8 [a0 + 0x9] = a2\n  8296: u8 [a0] = a1\n  8298: a2 = a1 >> 0x38\n  8301: u8 [a0 + 0x7] = a2\n  8304: a2 = a1 >> 0x30\n  8307: u8 [a0 + 0x6] = a2\n  8310: a2 = a1 >> 0x28\n  8313: u8 [a0 + 0x5] = a2\n  8316: a2 = a1 >> 0x20\n  8319: u8 [a0 + 0x4] = a2\n  8322: a2 = a1 >> 0x18\n  8325: u8 [a0 + 0x3] = a2\n  8328: a2 = a1 >> 0x10\n  8331: u8 [a0 + 0x2] = a2\n  8334: a1 = a1 >> 0x8\n  8337: u8 [a0 + 0x1] = a1\n  8340: a1 = 0x20\n  8343: a0 = s1\n  8345: ra = 142, jump @0\n      : @155 [@dyn 71] (gas: 6)\n  8351: i32 a1 = a0 + 0\n  8353: a2 = 0x20\n  8356: a0 = 0\n  8358: ra = 0x90\n  8362: ecalli 11 // 'seal_return'\n  8364: fallthrough\n      : @156 [@dyn 72] (gas: 9)\n  8365: a2 = u64 [a1 + 0x18]\n  8368: a3 = u64 [a1 + 0x10]\n  8371: a4 = u64 [a1 + 0x8]\n  8374: a1 = u64 [a1]\n  8376: u64 [a0 + 0x18] = a2\n  8379: u64 [a0 + 0x10] = a3\n  8382: u64 [a0 + 0x8] = a4\n  8385: u64 [a0] = a1\n  8387: ret\n      : @157 (gas: 8)\n  8389: a0 = u64 [sp + 0x70]\n  8392: a1 = u64 [sp + 0x78]\n  8395: a2 = u64 [sp + 0x68]\n  8398: a3 = u64 [sp + 0x60]\n  8401: a1 = a1 | a2\n  8404: a0 = a0 | a3\n  8407: a0 = a0 | a1\n  8410: jump @164 if a0 != 0\n      : @158 (gas: 2)\n  8414: a1 = i32 [0x20044]\n  8419: jump @164 if a1 <=u 3\n      : @159 (gas: 48)\n  8424: u64 [sp + 152] = 0\n  8428: u64 [sp + 144] = 0\n  8432: u64 [sp + 136] = 0\n  8436: u64 [sp + 128] = 0x3\n  8441: u64 [sp + 184] = 0\n  8445: u64 [sp + 176] = 0\n  8449: u64 [sp + 168] = 0\n  8453: u64 [sp + 160] = 0\n  8457: s1 = 0x20\n  8460: u32 [sp + 0xc0] = s1\n  8464: i32 a1 = sp + 0x80\n  8468: i32 a3 = sp + 0xa0\n  8472: i32 a4 = sp + 0xc0\n  8476: a2 = 0xffffffffffffffff\n  8479: a0 = 0\n  8481: ecalli 6 // 'get_storage'\n  8483: a0 = u64 [sp + 0xb0]\n  8487: u64 [sp + 0x48] = a0\n  8490: a0 = u64 [sp + 0xa8]\n  8494: u64 [sp + 0x50] = a0\n  8497: a0 = u64 [sp + 0xa0]\n  8501: u64 [sp + 0x58] = a0\n  8504: u64 [sp + 152] = 0\n  8508: u64 [sp + 144] = 0\n  8512: u64 [sp + 136] = 0\n  8516: u64 [sp + 128] = 0x4\n  8521: u64 [sp + 184] = 0\n  8525: u64 [sp + 176] = 0\n  8529: u64 [sp + 168] = 0\n  8533: u64 [sp + 160] = 0\n  8537: u32 [sp + 0xc0] = s1\n  8541: i32 a1 = sp + 0x80\n  8545: i32 a3 = sp + 0xa0\n  8549: i32 a4 = sp + 0xc0\n  8553: a2 = 0xffffffffffffffff\n  8556: a0 = 0\n  8558: ecalli 6 // 'get_storage'\n  8560: a0 = u64 [sp + 0xb8]\n  8564: u64 [sp + 0x28] = a0\n  8567: a0 = u64 [sp + 0xb0]\n  8571: u64 [sp + 0x30] = a0\n  8574: a0 = u64 [sp + 0xa8]\n  8578: u64 [sp + 0x38] = a0\n  8581: a0 = u64 [sp + 0xa0]\n  8585: u64 [sp + 0x40] = a0\n  8588: a0 = 0x40\n  8591: a1 = 0x20\n  8594: ra = 146, jump @0\n      : @160 [@dyn 73] (gas: 100)\n  8600: a1 = u8 [a0 + 0x11]\n  8603: a2 = u8 [a0 + 0x10]\n  8606: a3 = u8 [a0 + 0x12]\n  8609: a4 = u8 [a0 + 0x13]\n  8612: a1 = a1 << 0x8\n  8615: a1 = a1 | a2\n  8618: a3 = a3 << 0x10\n  8621: a4 = a4 << 0x18\n  8624: a3 = a3 | a4\n  8627: a1 = a1 | a3\n  8630: a2 = u8 [a0 + 0x15]\n  8633: a3 = u8 [a0 + 0x14]\n  8636: a4 = u8 [a0 + 0x16]\n  8639: a5 = u8 [a0 + 0x17]\n  8642: a2 = a2 << 0x8\n  8645: a2 = a2 | a3\n  8648: a4 = a4 << 0x10\n  8651: a5 = a5 << 0x18\n  8654: a4 = a4 | a5\n  8657: a2 = a2 | a4\n  8660: a2 = a2 << 0x20\n  8663: t0 = a2 | a1\n  8666: a2 = u8 [a0 + 0x1]\n  8669: a3 = u8 [a0]\n  8671: a4 = u8 [a0 + 0x2]\n  8674: a5 = u8 [a0 + 0x3]\n  8677: a2 = a2 << 0x8\n  8680: a2 = a2 | a3\n  8683: a4 = a4 << 0x10\n  8686: a5 = a5 << 0x18\n  8689: a4 = a4 | a5\n  8692: a2 = a2 | a4\n  8695: a3 = u8 [a0 + 0x5]\n  8698: a4 = u8 [a0 + 0x4]\n  8701: a5 = u8 [a0 + 0x6]\n  8704: s1 = u8 [a0 + 0x7]\n  8707: a3 = a3 << 0x8\n  8710: a3 = a3 | a4\n  8713: a5 = a5 << 0x10\n  8716: s1 = s1 << 0x18\n  8719: a5 = a5 | s1\n  8722: a3 = a3 | a5\n  8725: a3 = a3 << 0x20\n  8728: a2 = a2 | a3\n  8731: a3 = u8 [a0 + 0x19]\n  8734: a4 = u8 [a0 + 0x18]\n  8737: a5 = u8 [a0 + 0x1a]\n  8740: s1 = u8 [a0 + 0x1b]\n  8743: a3 = a3 << 0x8\n  8746: a3 = a3 | a4\n  8749: a5 = a5 << 0x10\n  8752: s1 = s1 << 0x18\n  8755: a5 = a5 | s1\n  8758: a3 = a3 | a5\n  8761: a4 = u8 [a0 + 0x1d]\n  8764: a5 = u8 [a0 + 0x1c]\n  8767: s1 = u8 [a0 + 0x1e]\n  8770: a1 = u8 [a0 + 0x1f]\n  8773: a4 = a4 << 0x8\n  8776: a4 = a4 | a5\n  8779: s1 = s1 << 0x10\n  8782: a1 = a1 << 0x18\n  8785: a1 = a1 | s1\n  8788: a1 = a1 | a4\n  8791: a1 = a1 << 0x20\n  8794: a3 = a3 | a1\n  8797: a1 = u8 [a0 + 0x9]\n  8800: a4 = u8 [a0 + 0x8]\n  8803: a5 = u8 [a0 + 0xa]\n  8806: s1 = u8 [a0 + 0xb]\n  8809: a1 = a1 << 0x8\n  8812: a1 = a1 | a4\n  8815: a5 = a5 << 0x10\n  8818: s1 = s1 << 0x18\n  8821: a5 = a5 | s1\n  8824: a1 = a1 | a5\n  8827: a4 = u8 [a0 + 0xd]\n  8830: a5 = u8 [a0 + 0xc]\n  8833: s1 = u8 [a0 + 0xe]\n  8836: a0 = u8 [a0 + 0xf]\n  8839: a4 = a4 << 0x8\n  8842: a4 = a4 | a5\n  8845: s1 = s1 << 0x10\n  8848: a0 = a0 << 0x18\n  8851: a0 = a0 | s1\n  8854: a0 = a0 | a4\n  8857: a0 = a0 << 0x20\n  8860: a0 = a0 | a1\n  8863: s1 = reverse a0\n  8865: a3 = reverse a3\n  8867: a4 = reverse a2\n  8869: a2 = reverse t0\n  8871: a0 = a2 | a4\n  8874: a1 = a3 | s1\n  8877: a1 = a1 | a0\n  8880: a1 = a1 >> 0x20\n  8883: a0 = a0 | s1\n  8886: a0 = a0 << 0x20\n  8889: a0 = a0 | a1\n  8892: jump @163 if a0 != 0\n      : @161 (gas: 11)\n  8896: a0 = u64 [sp + 0x48]\n  8899: a0 = a0 << 0x20\n  8902: a0 = a0 >> 0x20\n  8905: u64 [sp + 0x10] = a0\n  8908: i32 a0 = a3 + 0\n  8910: a1 = 0x20\n  8913: u64 [sp + 0x8] = a0\n  8916: u64 [sp + 0x20] = a3\n  8919: u64 [sp + 0x48] = a2\n  8922: u64 [sp + 0x18] = a4\n  8925: ra = 148, jump @0\n      : @162 [@dyn 74] (gas: 65)\n  8931: a1 = u64 [sp + 0x10]\n  8934: a1 = reverse a1\n  8936: a2 = u64 [sp + 0x50]\n  8939: a2 = reverse a2\n  8941: a3 = u64 [sp + 0x58]\n  8944: a3 = reverse a3\n  8946: a4 = a3 >> 0x38\n  8949: u8 [a0 + 0x1f] = a4\n  8952: a4 = a3 >> 0x30\n  8955: u8 [a0 + 0x1e] = a4\n  8958: a4 = a3 >> 0x28\n  8961: u8 [a0 + 0x1d] = a4\n  8964: a4 = a3 >> 0x20\n  8967: u8 [a0 + 0x1c] = a4\n  8970: a4 = a3 >> 0x18\n  8973: u8 [a0 + 0x1b] = a4\n  8976: a4 = a3 >> 0x10\n  8979: u8 [a0 + 0x1a] = a4\n  8982: a4 = a3 >> 0x8\n  8985: u8 [a0 + 0x19] = a4\n  8988: u8 [a0 + 0x18] = a3\n  8991: u8 [a0 + 0x10] = a2\n  8994: u8 [a0 + 11] = 0\n  8997: u8 [a0 + 10] = 0\n  9000: u8 [a0 + 9] = 0\n  9003: u8 [a0 + 7] = 0\n  9006: u8 [a0 + 6] = 0\n  9009: u8 [a0 + 5] = 0\n  9012: u8 [a0 + 4] = 0\n  9015: u8 [a0 + 3] = 0\n  9018: u8 [a0 + 2] = 0\n  9021: u8 [a0 + 1] = 0\n  9024: u8 [a0 + 0] = 0\n  9026: a3 = a2 >> 0x38\n  9029: u8 [a0 + 0x17] = a3\n  9032: a3 = a2 >> 0x30\n  9035: u8 [a0 + 0x16] = a3\n  9038: a3 = a2 >> 0x28\n  9041: u8 [a0 + 0x15] = a3\n  9044: a3 = a2 >> 0x20\n  9047: u8 [a0 + 0x14] = a3\n  9050: a3 = a2 >> 0x18\n  9053: u8 [a0 + 0x13] = a3\n  9056: a3 = a2 >> 0x10\n  9059: u8 [a0 + 0x12] = a3\n  9062: a2 = a2 >> 0x8\n  9065: u8 [a0 + 0x11] = a2\n  9068: u8 [a0 + 0x8] = a1\n  9071: a2 = a1 >> 0x38\n  9074: u8 [a0 + 0xf] = a2\n  9077: a2 = a1 >> 0x30\n  9080: u8 [a0 + 0xe] = a2\n  9083: a2 = a1 >> 0x28\n  9086: u8 [a0 + 0xd] = a2\n  9089: a1 = a1 >> 0x20\n  9092: a2 = u64 [sp + 0x18]\n  9095: a2 = a2 | s1\n  9098: a3 = 0xffffffe0\n  9108: a4 = u64 [sp + 0x20]\n  9111: a3 = a4 <u a3\n  9114: a4 = u64 [sp + 0x48]\n  9117: a3 = 0 if a4 != 0\n  9119: a3 = 0 if a2 != 0\n  9121: u8 [a0 + 0xc] = a1\n  9124: jump @166 if a3 != 0\n      : @163 (gas: 1)\n  9127: trap\n      : @164 (gas: 3)\n  9128: a0 = 0\n  9130: a1 = 0\n  9132: ra = 150, jump @0\n      : @165 [@dyn 75] (gas: 5)\n  9138: i32 a1 = a0 + 0\n  9140: a0 = 0x1\n  9143: a2 = 0\n  9145: ecalli 11 // 'seal_return'\n  9147: fallthrough\n      : @166 (gas: 4)\n  9148: s1 = u64 [sp + 0x8]\n  9151: i32 a0 = s1 + 0x20\n  9154: a1 = 0x20\n  9157: ra = 152, jump @0\n      : @167 [@dyn 76] (gas: 71)\n  9163: a1 = u64 [sp + 0x28]\n  9166: a1 = reverse a1\n  9168: a2 = u64 [sp + 0x30]\n  9171: a2 = reverse a2\n  9173: a3 = u64 [sp + 0x38]\n  9176: a3 = reverse a3\n  9178: a4 = u64 [sp + 0x40]\n  9181: a4 = reverse a4\n  9183: a5 = a4 >> 0x38\n  9186: u8 [a0 + 0x1f] = a5\n  9189: a5 = a4 >> 0x30\n  9192: u8 [a0 + 0x1e] = a5\n  9195: a5 = a4 >> 0x28\n  9198: u8 [a0 + 0x1d] = a5\n  9201: a5 = a4 >> 0x20\n  9204: u8 [a0 + 0x1c] = a5\n  9207: a5 = a4 >> 0x18\n  9210: u8 [a0 + 0x1b] = a5\n  9213: a5 = a4 >> 0x10\n  9216: u8 [a0 + 0x1a] = a5\n  9219: a5 = a4 >> 0x8\n  9222: u8 [a0 + 0x19] = a5\n  9225: u8 [a0 + 0x18] = a4\n  9228: u8 [a0 + 0x10] = a3\n  9231: a4 = a3 >> 0x38\n  9234: u8 [a0 + 0x17] = a4\n  9237: a4 = a3 >> 0x30\n  9240: u8 [a0 + 0x16] = a4\n  9243: a4 = a3 >> 0x28\n  9246: u8 [a0 + 0x15] = a4\n  9249: a4 = a3 >> 0x20\n  9252: u8 [a0 + 0x14] = a4\n  9255: a4 = a3 >> 0x18\n  9258: u8 [a0 + 0x13] = a4\n  9261: a4 = a3 >> 0x10\n  9264: u8 [a0 + 0x12] = a4\n  9267: a3 = a3 >> 0x8\n  9270: u8 [a0 + 0x11] = a3\n  9273: u8 [a0 + 0x8] = a2\n  9276: a3 = a2 >> 0x38\n  9279: u8 [a0 + 0xf] = a3\n  9282: a3 = a2 >> 0x30\n  9285: u8 [a0 + 0xe] = a3\n  9288: a3 = a2 >> 0x28\n  9291: u8 [a0 + 0xd] = a3\n  9294: a3 = a2 >> 0x20\n  9297: u8 [a0 + 0xc] = a3\n  9300: a3 = a2 >> 0x18\n  9303: u8 [a0 + 0xb] = a3\n  9306: a3 = a2 >> 0x10\n  9309: u8 [a0 + 0xa] = a3\n  9312: a2 = a2 >> 0x8\n  9315: u8 [a0 + 0x9] = a2\n  9318: u8 [a0] = a1\n  9320: a2 = a1 >> 0x38\n  9323: u8 [a0 + 0x7] = a2\n  9326: a2 = a1 >> 0x30\n  9329: u8 [a0 + 0x6] = a2\n  9332: a2 = a1 >> 0x28\n  9335: u8 [a0 + 0x5] = a2\n  9338: a2 = a1 >> 0x20\n  9341: u8 [a0 + 0x4] = a2\n  9344: a2 = a1 >> 0x18\n  9347: u8 [a0 + 0x3] = a2\n  9350: a2 = a1 >> 0x10\n  9353: u8 [a0 + 0x2] = a2\n  9356: a1 = a1 >> 0x8\n  9359: u8 [a0 + 0x1] = a1\n  9362: a1 = 0x40\n  9365: a0 = s1\n  9367: ra = 154, jump @0\n      : @168 [@dyn 77] (gas: 6)\n  9373: i32 a1 = a0 + 0\n  9375: a2 = 0x40\n  9378: a0 = 0\n  9380: ra = 0x9c\n  9384: ecalli 11 // 'seal_return'\n  9386: fallthrough\n      : @169 [@dyn 78] (gas: 194)\n  9387: sp = sp + 0xffffffffffffffa0\n  9390: u64 [sp + 0x58] = ra\n  9393: u64 [sp + 0x50] = s0\n  9396: u64 [sp + 0x48] = s1\n  9399: u64 [sp] = a0\n  9401: t1 = u64 [a1]\n  9403: ra = u64 [a1 + 0x8]\n  9406: a4 = u64 [a1 + 0x10]\n  9409: a1 = u64 [a1 + 0x18]\n  9412: t0 = u64 [a2]\n  9414: a3 = u64 [a2 + 0x8]\n  9417: t2 = u64 [a2 + 0x18]\n  9420: a2 = u64 [a2 + 0x10]\n  9423: s0 = t0 >> 0x3d\n  9426: s1 = a3 << 0x3\n  9429: s0 = s0 | s1\n  9432: a3 = a3 >> 0x3d\n  9435: s1 = a2 << 0x3\n  9438: a3 = a3 | s1\n  9441: a2 = a2 >> 0x3d\n  9444: t2 = t2 << 0x3\n  9447: s1 = t2 | a2\n  9450: t2 = t0 << 0x3\n  9453: a2 = s1 >u 0\n  9455: a5 = a3 >u 0\n  9457: a5 = a2 if s1 != 0\n  9460: a0 = s0 >u 0\n  9462: a2 = t2 <u 0x100\n  9466: t2 = a2 ^ 0x1\n  9469: t2 = a0 if s0 != 0\n  9472: a3 = a3 | s1\n  9475: t2 = a5 if a3 != 0\n  9478: u8 [sp + 71] = 0\n  9481: u8 [sp + 70] = 0\n  9484: u8 [sp + 69] = 0\n  9487: u8 [sp + 68] = 0\n  9490: u8 [sp + 67] = 0\n  9493: u8 [sp + 66] = 0\n  9496: u8 [sp + 65] = 0\n  9499: u8 [sp + 64] = 0\n  9502: u8 [sp + 63] = 0\n  9505: u8 [sp + 62] = 0\n  9508: u8 [sp + 61] = 0\n  9511: u8 [sp + 60] = 0\n  9514: u8 [sp + 59] = 0\n  9517: u8 [sp + 58] = 0\n  9520: u8 [sp + 57] = 0\n  9523: u8 [sp + 56] = 0\n  9526: u8 [sp + 55] = 0\n  9529: u8 [sp + 54] = 0\n  9532: u8 [sp + 53] = 0\n  9535: u8 [sp + 52] = 0\n  9538: u8 [sp + 51] = 0\n  9541: u8 [sp + 50] = 0\n  9544: u8 [sp + 49] = 0\n  9547: u8 [sp + 48] = 0\n  9550: u8 [sp + 47] = 0\n  9553: u8 [sp + 46] = 0\n  9556: u8 [sp + 45] = 0\n  9559: u8 [sp + 44] = 0\n  9562: u8 [sp + 43] = 0\n  9565: u8 [sp + 42] = 0\n  9568: u8 [sp + 41] = 0\n  9571: u8 [sp + 40] = 0\n  9574: u8 [sp + 0x20] = a1\n  9577: u8 [sp + 0x18] = a4\n  9580: u8 [sp + 0x10] = ra\n  9583: u8 [sp + 0x8] = t1\n  9586: a0 = a1 >> 0x38\n  9589: u8 [sp + 0x27] = a0\n  9592: a0 = a1 >> 0x30\n  9595: u8 [sp + 0x26] = a0\n  9598: a0 = a1 >> 0x28\n  9601: u8 [sp + 0x25] = a0\n  9604: a0 = a1 >> 0x20\n  9607: u8 [sp + 0x24] = a0\n  9610: a0 = a1 >> 0x18\n  9613: u8 [sp + 0x23] = a0\n  9616: a0 = a1 >> 0x10\n  9619: u8 [sp + 0x22] = a0\n  9622: a1 = a1 >> 0x8\n  9625: u8 [sp + 0x21] = a1\n  9628: a0 = a4 >> 0x38\n  9631: u8 [sp + 0x1f] = a0\n  9634: a0 = a4 >> 0x30\n  9637: u8 [sp + 0x1e] = a0\n  9640: a0 = a4 >> 0x28\n  9643: u8 [sp + 0x1d] = a0\n  9646: a0 = a4 >> 0x20\n  9649: u8 [sp + 0x1c] = a0\n  9652: a0 = a4 >> 0x18\n  9655: u8 [sp + 0x1b] = a0\n  9658: a0 = a4 >> 0x10\n  9661: u8 [sp + 0x1a] = a0\n  9664: a4 = a4 >> 0x8\n  9667: u8 [sp + 0x19] = a4\n  9670: a0 = ra >> 0x38\n  9673: u8 [sp + 0x17] = a0\n  9676: a0 = ra >> 0x30\n  9679: u8 [sp + 0x16] = a0\n  9682: a0 = ra >> 0x28\n  9685: u8 [sp + 0x15] = a0\n  9688: a0 = ra >> 0x20\n  9691: u8 [sp + 0x14] = a0\n  9694: a0 = ra >> 0x18\n  9697: u8 [sp + 0x13] = a0\n  9700: a0 = ra >> 0x10\n  9703: u8 [sp + 0x12] = a0\n  9706: a0 = ra >> 0x8\n  9709: u8 [sp + 0x11] = a0\n  9712: a0 = t1 >> 0x38\n  9715: u8 [sp + 0xf] = a0\n  9718: a0 = t1 >> 0x30\n  9721: u8 [sp + 0xe] = a0\n  9724: a0 = t1 >> 0x28\n  9727: u8 [sp + 0xd] = a0\n  9730: a0 = t1 >> 0x20\n  9733: u8 [sp + 0xc] = a0\n  9736: a0 = t1 >> 0x18\n  9739: u8 [sp + 0xb] = a0\n  9742: a0 = t1 >> 0x10\n  9745: u8 [sp + 0xa] = a0\n  9748: a0 = t1 >> 0x8\n  9751: u8 [sp + 0x9] = a0\n  9754: a1 = t0 & 0x1f\n  9757: a0 = sp + 0x8\n  9760: a1 = a1 + a0\n  9763: a0 = u8 [a1 + 0x9]\n  9766: a2 = u8 [a1 + 0x8]\n  9769: a3 = u8 [a1 + 0xa]\n  9772: a4 = u8 [a1 + 0xb]\n  9775: a0 = a0 << 0x8\n  9778: a0 = a0 | a2\n  9781: a3 = a3 << 0x10\n  9784: a4 = a4 << 0x18\n  9787: a3 = a3 | a4\n  9790: a0 = a0 | a3\n  9793: a2 = u8 [a1 + 0xd]\n  9796: a3 = u8 [a1 + 0xc]\n  9799: a4 = u8 [a1 + 0xe]\n  9802: a5 = u8 [a1 + 0xf]\n  9805: a2 = a2 << 0x8\n  9808: a2 = a2 | a3\n  9811: a4 = a4 << 0x10\n  9814: a5 = a5 << 0x18\n  9817: a4 = a4 | a5\n  9820: a2 = a2 | a4\n  9823: a2 = a2 << 0x20\n  9826: a3 = a2 | a0\n  9829: a0 = u8 [a1 + 0x1]\n  9832: a2 = u8 [a1]\n  9834: a4 = u8 [a1 + 0x2]\n  9837: a5 = u8 [a1 + 0x3]\n  9840: a0 = a0 << 0x8\n  9843: a0 = a0 | a2\n  9846: a4 = a4 << 0x10\n  9849: a5 = a5 << 0x18\n  9852: a4 = a4 | a5\n  9855: a0 = a0 | a4\n  9858: a2 = u8 [a1 + 0x5]\n  9861: a4 = u8 [a1 + 0x4]\n  9864: a5 = u8 [a1 + 0x6]\n  9867: s1 = u8 [a1 + 0x7]\n  9870: a2 = a2 << 0x8\n  9873: a2 = a2 | a4\n  9876: a5 = a5 << 0x10\n  9879: s1 = s1 << 0x18\n  9882: a5 = a5 | s1\n  9885: a2 = a2 | a5\n  9888: a2 = a2 << 0x20\n  9891: a0 = a0 | a2\n  9894: a2 = u8 [a1 + 0x11]\n  9897: a4 = u8 [a1 + 0x10]\n  9900: a5 = u8 [a1 + 0x12]\n  9903: a1 = u8 [a1 + 0x13]\n  9906: a2 = a2 << 0x8\n  9909: a2 = a2 | a4\n  9912: a5 = a5 << 0x10\n  9915: a1 = a1 << 0x18\n  9918: a1 = a1 | a5\n  9921: a1 = a1 | a2\n  9924: a0 = 0 if t2 != 0\n  9926: a3 = 0 if t2 != 0\n  9928: a1 = 0 if t2 != 0\n  9930: a2 = u64 [sp]\n  9932: u64 [a2 + 24] = 0\n  9935: u64 [a2 + 0x10] = a1\n  9938: u64 [a2 + 0x8] = a3\n  9941: u64 [a2] = a0\n  9943: ra = u64 [sp + 0x58]\n  9946: s0 = u64 [sp + 0x50]\n  9949: s1 = u64 [sp + 0x48]\n  9952: sp = sp + 0x60\n  9955: ret\n      : @170 (gas: 8)\n  9957: a0 = u64 [sp + 0x30]\n  9960: a1 = u64 [sp + 0x38]\n  9963: a2 = u64 [sp + 0x28]\n  9966: a3 = u64 [sp + 0x20]\n  9969: a1 = a1 | a2\n  9972: a0 = a0 | a3\n  9975: a0 = a0 | a1\n  9978: jump @175 if a0 != 0\n      : @171 (gas: 2)\n  9982: a0 = i32 [0x20044]\n  9987: jump @175 if a0 <=u 3\n      : @172 (gas: 24)\n  9992: u64 [sp + 88] = 0\n  9995: u64 [sp + 80] = 0\n  9998: u64 [sp + 72] = 0\n 10001: u64 [sp + 64] = 0\n 10004: u64 [sp + 120] = 0\n 10007: u64 [sp + 112] = 0\n 10010: u64 [sp + 104] = 0\n 10013: u64 [sp + 96] = 0\n 10016: u32 [sp + 128] = 0x20\n 10021: i32 a1 = sp + 0x40\n 10024: i32 a3 = sp + 0x60\n 10027: i32 a4 = sp + 0x80\n 10031: a2 = 0xffffffffffffffff\n 10034: a0 = 0\n 10036: ecalli 6 // 'get_storage'\n 10038: a0 = u64 [sp + 0x70]\n 10041: u64 [sp + 0x8] = a0\n 10044: a0 = u64 [sp + 0x68]\n 10047: u64 [sp + 0x10] = a0\n 10050: a0 = u64 [sp + 0x60]\n 10053: u64 [sp + 0x18] = a0\n 10056: a0 = 0x40\n 10059: a1 = 0x20\n 10062: ra = 158, jump @0\n      : @173 [@dyn 79] (gas: 100)\n 10068: a1 = u8 [a0 + 0x11]\n 10071: a2 = u8 [a0 + 0x10]\n 10074: a3 = u8 [a0 + 0x12]\n 10077: a4 = u8 [a0 + 0x13]\n 10080: a1 = a1 << 0x8\n 10083: a1 = a1 | a2\n 10086: a3 = a3 << 0x10\n 10089: a4 = a4 << 0x18\n 10092: a3 = a3 | a4\n 10095: a1 = a1 | a3\n 10098: a2 = u8 [a0 + 0x15]\n 10101: a3 = u8 [a0 + 0x14]\n 10104: a4 = u8 [a0 + 0x16]\n 10107: a5 = u8 [a0 + 0x17]\n 10110: a2 = a2 << 0x8\n 10113: a2 = a2 | a3\n 10116: a4 = a4 << 0x10\n 10119: a5 = a5 << 0x18\n 10122: a4 = a4 | a5\n 10125: a2 = a2 | a4\n 10128: a2 = a2 << 0x20\n 10131: t0 = a2 | a1\n 10134: a2 = u8 [a0 + 0x1]\n 10137: a3 = u8 [a0]\n 10139: a4 = u8 [a0 + 0x2]\n 10142: a5 = u8 [a0 + 0x3]\n 10145: a2 = a2 << 0x8\n 10148: a2 = a2 | a3\n 10151: a4 = a4 << 0x10\n 10154: a5 = a5 << 0x18\n 10157: a4 = a4 | a5\n 10160: a2 = a2 | a4\n 10163: a3 = u8 [a0 + 0x5]\n 10166: a4 = u8 [a0 + 0x4]\n 10169: a5 = u8 [a0 + 0x6]\n 10172: s1 = u8 [a0 + 0x7]\n 10175: a3 = a3 << 0x8\n 10178: a3 = a3 | a4\n 10181: a5 = a5 << 0x10\n 10184: s1 = s1 << 0x18\n 10187: a5 = a5 | s1\n 10190: a3 = a3 | a5\n 10193: a3 = a3 << 0x20\n 10196: a2 = a2 | a3\n 10199: a3 = u8 [a0 + 0x19]\n 10202: a4 = u8 [a0 + 0x18]\n 10205: a5 = u8 [a0 + 0x1a]\n 10208: s1 = u8 [a0 + 0x1b]\n 10211: a3 = a3 << 0x8\n 10214: a3 = a3 | a4\n 10217: a5 = a5 << 0x10\n 10220: s1 = s1 << 0x18\n 10223: a5 = a5 | s1\n 10226: a3 = a3 | a5\n 10229: a4 = u8 [a0 + 0x1d]\n 10232: a5 = u8 [a0 + 0x1c]\n 10235: s1 = u8 [a0 + 0x1e]\n 10238: a1 = u8 [a0 + 0x1f]\n 10241: a4 = a4 << 0x8\n 10244: a4 = a4 | a5\n 10247: s1 = s1 << 0x10\n 10250: a1 = a1 << 0x18\n 10253: a1 = a1 | s1\n 10256: a1 = a1 | a4\n 10259: a1 = a1 << 0x20\n 10262: a3 = a3 | a1\n 10265: a1 = u8 [a0 + 0x9]\n 10268: a4 = u8 [a0 + 0x8]\n 10271: a5 = u8 [a0 + 0xa]\n 10274: s1 = u8 [a0 + 0xb]\n 10277: a1 = a1 << 0x8\n 10280: a1 = a1 | a4\n 10283: a5 = a5 << 0x10\n 10286: s1 = s1 << 0x18\n 10289: a5 = a5 | s1\n 10292: a1 = a1 | a5\n 10295: a4 = u8 [a0 + 0xd]\n 10298: a5 = u8 [a0 + 0xc]\n 10301: s1 = u8 [a0 + 0xe]\n 10304: a0 = u8 [a0 + 0xf]\n 10307: a4 = a4 << 0x8\n 10310: a4 = a4 | a5\n 10313: s1 = s1 << 0x10\n 10316: a0 = a0 << 0x18\n 10319: a0 = a0 | s1\n 10322: a0 = a0 | a4\n 10325: a0 = a0 << 0x20\n 10328: a0 = a0 | a1\n 10331: a1 = reverse a0\n 10333: a0 = reverse a3\n 10335: a2 = reverse a2\n 10337: a3 = reverse t0\n 10339: a2 = a2 | a3\n 10342: a3 = a0 | a1\n 10345: a3 = a3 | a2\n 10348: a3 = a3 >> 0x20\n 10351: a1 = a1 | a2\n 10354: a1 = a1 << 0x20\n 10357: a1 = a1 | a3\n 10360: jump @177 if a1 == 0\n      : @174 (gas: 1)\n 10363: trap\n      : @175 (gas: 3)\n 10364: a0 = 0\n 10366: a1 = 0\n 10368: ra = 160, jump @0\n      : @176 [@dyn 80] (gas: 5)\n 10374: i32 a1 = a0 + 0\n 10376: a0 = 0x1\n 10379: a2 = 0\n 10381: ecalli 11 // 'seal_return'\n 10383: fallthrough\n      : @177 (gas: 7)\n 10384: a1 = u64 [sp + 0x8]\n 10387: a1 = a1 << 0x20\n 10390: s1 = a1 >> 0x20\n 10393: i32 a0 = a0 + 0\n 10395: u64 [sp + 0x8] = a0\n 10398: a1 = 0x20\n 10401: ra = 162, jump @0\n      : @178 [@dyn 81] (gas: 58)\n 10407: a1 = reverse s1\n 10409: a2 = u64 [sp + 0x10]\n 10412: a2 = reverse a2\n 10414: a3 = u64 [sp + 0x18]\n 10417: a3 = reverse a3\n 10419: a4 = a3 >> 0x38\n 10422: u8 [a0 + 0x1f] = a4\n 10425: a4 = a3 >> 0x30\n 10428: u8 [a0 + 0x1e] = a4\n 10431: a4 = a3 >> 0x28\n 10434: u8 [a0 + 0x1d] = a4\n 10437: a4 = a3 >> 0x20\n 10440: u8 [a0 + 0x1c] = a4\n 10443: a4 = a3 >> 0x18\n 10446: u8 [a0 + 0x1b] = a4\n 10449: a4 = a3 >> 0x10\n 10452: u8 [a0 + 0x1a] = a4\n 10455: a4 = a3 >> 0x8\n 10458: u8 [a0 + 0x19] = a4\n 10461: u8 [a0 + 0x18] = a3\n 10464: u8 [a0 + 0x10] = a2\n 10467: u8 [a0 + 11] = 0\n 10470: u8 [a0 + 10] = 0\n 10473: u8 [a0 + 9] = 0\n 10476: u8 [a0 + 7] = 0\n 10479: u8 [a0 + 6] = 0\n 10482: u8 [a0 + 5] = 0\n 10485: u8 [a0 + 4] = 0\n 10488: u8 [a0 + 3] = 0\n 10491: u8 [a0 + 2] = 0\n 10494: u8 [a0 + 1] = 0\n 10497: u8 [a0 + 0] = 0\n 10499: a3 = a2 >> 0x38\n 10502: u8 [a0 + 0x17] = a3\n 10505: a3 = a2 >> 0x30\n 10508: u8 [a0 + 0x16] = a3\n 10511: a3 = a2 >> 0x28\n 10514: u8 [a0 + 0x15] = a3\n 10517: a3 = a2 >> 0x20\n 10520: u8 [a0 + 0x14] = a3\n 10523: a3 = a2 >> 0x18\n 10526: u8 [a0 + 0x13] = a3\n 10529: a3 = a2 >> 0x10\n 10532: u8 [a0 + 0x12] = a3\n 10535: a2 = a2 >> 0x8\n 10538: u8 [a0 + 0x11] = a2\n 10541: u8 [a0 + 0x8] = a1\n 10544: a2 = a1 >> 0x38\n 10547: u8 [a0 + 0xf] = a2\n 10550: a2 = a1 >> 0x30\n 10553: u8 [a0 + 0xe] = a2\n 10556: a2 = a1 >> 0x28\n 10559: u8 [a0 + 0xd] = a2\n 10562: a1 = a1 >> 0x20\n 10565: u8 [a0 + 0xc] = a1\n 10568: a1 = 0x20\n 10571: a0 = u64 [sp + 0x8]\n 10574: ra = 164, jump @0\n      : @179 [@dyn 82] (gas: 6)\n 10580: i32 a1 = a0 + 0\n 10582: a2 = 0x20\n 10585: a0 = 0\n 10587: ra = 0xa6\n 10591: ecalli 11 // 'seal_return'\n 10593: fallthrough\n      : @180 [@dyn 83] (gas: 12)\n 10594: sp = sp + 0xffffffffffffffc0\n 10597: u64 [sp + 0x38] = ra\n 10600: u64 [sp + 0x30] = s0\n 10603: s0 = sp + 0x40\n 10606: sp = sp & 0xffffffffffffffe0\n 10609: u64 [sp + 24] = 0\n 10612: u64 [sp + 16] = 0\n 10615: u64 [sp + 8] = 0\n 10618: u64 [sp + 0] = 0\n 10620: i32 a0 = sp + 0\n 10622: ecalli 14 // 'value_transferred'\n 10624: fallthrough\n      : @181 (gas: 8)\n 10625: a0 = u64 [sp + 0x10]\n 10628: a1 = u64 [sp + 0x18]\n 10631: a2 = u64 [sp + 0x8]\n 10634: a3 = u64 [sp]\n 10636: a1 = a1 | a2\n 10639: a0 = a0 | a3\n 10642: a0 = a0 | a1\n 10645: jump @187 if a0 != 0\n      : @182 (gas: 2)\n 10649: a0 = i32 [0x20044]\n 10654: jump @187 if a0 <=u 3\n      : @183 (gas: 32)\n 10659: ra = 0xa8\n 10663: sp = sp + 0xfffffffffffffe20\n 10667: u64 [sp + 0x1d8] = ra\n 10671: u64 [sp + 0x1d0] = s0\n 10675: u64 [sp + 0x1c8] = s1\n 10679: s0 = sp + 0x1e0\n 10683: sp = sp & 0xffffffffffffffe0\n 10686: i32 a0 = sp + 0xe0\n 10690: ecalli 8 // 'now'\n 10692: a0 = u64 [sp + 0xe0]\n 10696: u64 [sp + 0x58] = a0\n 10699: a0 = u64 [sp + 0xe8]\n 10703: u64 [sp + 0x50] = a0\n 10706: a0 = u64 [sp + 0xf0]\n 10710: u64 [sp + 0x48] = a0\n 10713: s1 = u64 [sp + 0xf8]\n 10717: u64 [sp + 408] = 0\n 10721: u64 [sp + 400] = 0\n 10725: u64 [sp + 392] = 0\n 10729: u64 [sp + 384] = 0x1\n 10734: u64 [sp + 440] = 0\n 10738: u64 [sp + 432] = 0\n 10742: u64 [sp + 424] = 0\n 10746: u64 [sp + 416] = 0\n 10750: u32 [sp + 448] = 0x20\n 10755: i32 a1 = sp + 0x180\n 10759: i32 a3 = sp + 0x1a0\n 10763: i32 a4 = sp + 0x1c0\n 10767: a2 = 0xffffffffffffffff\n 10770: a0 = 0\n 10772: ecalli 6 // 'get_storage'\n 10774: jump @337\n      : @184 [@dyn 84] (gas: 3)\n 10777: a0 = 0x40\n 10780: a1 = 0x20\n 10783: ra = 170, jump @0\n      : @185 [@dyn 85] (gas: 100)\n 10789: a1 = u8 [a0 + 0x11]\n 10792: a2 = u8 [a0 + 0x10]\n 10795: a3 = u8 [a0 + 0x12]\n 10798: a4 = u8 [a0 + 0x13]\n 10801: a1 = a1 << 0x8\n 10804: a1 = a1 | a2\n 10807: a3 = a3 << 0x10\n 10810: a4 = a4 << 0x18\n 10813: a3 = a3 | a4\n 10816: a1 = a1 | a3\n 10819: a2 = u8 [a0 + 0x15]\n 10822: a3 = u8 [a0 + 0x14]\n 10825: a4 = u8 [a0 + 0x16]\n 10828: a5 = u8 [a0 + 0x17]\n 10831: a2 = a2 << 0x8\n 10834: a2 = a2 | a3\n 10837: a4 = a4 << 0x10\n 10840: a5 = a5 << 0x18\n 10843: a4 = a4 | a5\n 10846: a2 = a2 | a4\n 10849: a2 = a2 << 0x20\n 10852: t0 = a2 | a1\n 10855: a2 = u8 [a0 + 0x1]\n 10858: a3 = u8 [a0]\n 10860: a4 = u8 [a0 + 0x2]\n 10863: a5 = u8 [a0 + 0x3]\n 10866: a2 = a2 << 0x8\n 10869: a2 = a2 | a3\n 10872: a4 = a4 << 0x10\n 10875: a5 = a5 << 0x18\n 10878: a4 = a4 | a5\n 10881: a2 = a2 | a4\n 10884: a3 = u8 [a0 + 0x5]\n 10887: a4 = u8 [a0 + 0x4]\n 10890: a5 = u8 [a0 + 0x6]\n 10893: a1 = u8 [a0 + 0x7]\n 10896: a3 = a3 << 0x8\n 10899: a3 = a3 | a4\n 10902: a5 = a5 << 0x10\n 10905: a1 = a1 << 0x18\n 10908: a1 = a1 | a5\n 10911: a1 = a1 | a3\n 10914: a1 = a1 << 0x20\n 10917: t1 = a1 | a2\n 10920: a1 = u8 [a0 + 0x19]\n 10923: a3 = u8 [a0 + 0x18]\n 10926: a4 = u8 [a0 + 0x1a]\n 10929: a5 = u8 [a0 + 0x1b]\n 10932: a1 = a1 << 0x8\n 10935: a1 = a1 | a3\n 10938: a4 = a4 << 0x10\n 10941: a5 = a5 << 0x18\n 10944: a4 = a4 | a5\n 10947: a1 = a1 | a4\n 10950: a3 = u8 [a0 + 0x1d]\n 10953: a4 = u8 [a0 + 0x1c]\n 10956: a5 = u8 [a0 + 0x1e]\n 10959: a2 = u8 [a0 + 0x1f]\n 10962: a3 = a3 << 0x8\n 10965: a3 = a3 | a4\n 10968: a5 = a5 << 0x10\n 10971: a2 = a2 << 0x18\n 10974: a2 = a2 | a5\n 10977: a2 = a2 | a3\n 10980: a2 = a2 << 0x20\n 10983: a3 = a2 | a1\n 10986: a1 = u8 [a0 + 0x9]\n 10989: a2 = u8 [a0 + 0x8]\n 10992: a4 = u8 [a0 + 0xa]\n 10995: a5 = u8 [a0 + 0xb]\n 10998: a1 = a1 << 0x8\n 11001: a1 = a1 | a2\n 11004: a4 = a4 << 0x10\n 11007: a5 = a5 << 0x18\n 11010: a4 = a4 | a5\n 11013: a1 = a1 | a4\n 11016: a2 = u8 [a0 + 0xd]\n 11019: a4 = u8 [a0 + 0xc]\n 11022: a5 = u8 [a0 + 0xe]\n 11025: a0 = u8 [a0 + 0xf]\n 11028: a2 = a2 << 0x8\n 11031: a2 = a2 | a4\n 11034: a5 = a5 << 0x10\n 11037: a0 = a0 << 0x18\n 11040: a0 = a0 | a5\n 11043: a0 = a0 | a2\n 11046: a0 = a0 << 0x20\n 11049: a0 = a0 | a1\n 11052: a1 = reverse a0\n 11054: a0 = reverse a3\n 11056: a2 = reverse t1\n 11058: a3 = reverse t0\n 11060: a2 = a2 | a3\n 11063: a3 = a0 | a1\n 11066: a3 = a3 | a2\n 11069: a3 = a3 >> 0x20\n 11072: a1 = a1 | a2\n 11075: a1 = a1 << 0x20\n 11078: a1 = a1 | a3\n 11081: jump @189 if a1 == 0\n      : @186 (gas: 1)\n 11084: trap\n      : @187 (gas: 3)\n 11085: a0 = 0\n 11087: a1 = 0\n 11089: ra = 172, jump @0\n      : @188 [@dyn 86] (gas: 7)\n 11095: i32 a1 = a0 + 0\n 11097: a0 = 0x1\n 11100: a2 = 0\n 11102: ecalli 11 // 'seal_return'\n 11104: i32 a0 = a0 + 0\n 11106: ra = 0xae\n 11110: jump @0\n      : @189 (gas: 2)\n 11113: i32 a0 = a0 + 0\n 11115: ra = 174, jump @0\n      : @190 [@dyn 87] (gas: 6)\n 11121: i32 a1 = a0 + 0\n 11123: a0 = 0\n 11125: a2 = 0\n 11127: ra = 0xb0\n 11131: ecalli 11 // 'seal_return'\n 11133: fallthrough\n      : @191 [@dyn 88] (gas: 5)\n 11134: sp = sp + 0xfffffffffffffff8\n 11137: u64 [sp] = ra\n 11139: a0 = 0\n 11141: a1 = 0\n 11143: ra = 178, jump @0\n      : @192 [@dyn 89] (gas: 6)\n 11149: i32 a1 = a0 + 0\n 11151: a0 = 0x1\n 11154: a2 = 0\n 11156: ra = 0xb4\n 11160: ecalli 11 // 'seal_return'\n 11162: fallthrough\n      : @193 [@dyn 90] (gas: 20)\n 11163: sp = sp + 0xffffffffffffffb0\n 11166: u64 [sp + 0x48] = ra\n 11169: u64 [sp + 0x40] = s0\n 11172: u64 [sp + 0x38] = s1\n 11175: a4 = u64 [a1 + 0x10]\n 11178: a3 = u64 [a1 + 0x18]\n 11181: a5 = u64 [a1 + 0x8]\n 11184: s0 = u64 [a1]\n 11186: u64 [sp + 0x28] = a3\n 11189: u64 [sp + 0x20] = a5\n 11192: a1 = a5 | a3\n 11195: a3 = s0 | a4\n 11198: a3 = a3 | a1\n 11201: a3 = a3 >> 0x20\n 11204: u64 [sp + 0x30] = a4\n 11207: a1 = a1 | a4\n 11210: a1 = a1 << 0x20\n 11213: a1 = a1 | a3\n 11216: u64 [sp + 0x18] = a0\n 11219: jump @196 if a1 != 0\n      : @194 (gas: 10)\n 11223: a0 = u64 [a2 + 0x18]\n 11226: u64 [sp] = a0\n 11228: s1 = u64 [a2 + 0x10]\n 11231: a0 = u64 [a2 + 0x8]\n 11234: u64 [sp + 0x8] = a0\n 11237: a0 = u64 [a2]\n 11239: u64 [sp + 0x10] = a0\n 11242: i32 a0 = s0 + 0\n 11244: a1 = 0x20\n 11247: ra = 182, jump @0\n      : @195 [@dyn 91] (gas: 88)\n 11253: a1 = u64 [sp]\n 11255: a1 = reverse a1\n 11257: a2 = reverse s1\n 11259: a3 = u64 [sp + 0x8]\n 11262: a3 = reverse a3\n 11264: a4 = u64 [sp + 0x10]\n 11267: a4 = reverse a4\n 11269: a5 = a4 >> 0x38\n 11272: u8 [a0 + 0x1f] = a5\n 11275: a5 = a4 >> 0x30\n 11278: u8 [a0 + 0x1e] = a5\n 11281: a5 = a4 >> 0x28\n 11284: u8 [a0 + 0x1d] = a5\n 11287: a5 = a4 >> 0x20\n 11290: u8 [a0 + 0x1c] = a5\n 11293: a5 = a4 >> 0x18\n 11296: u8 [a0 + 0x1b] = a5\n 11299: a5 = a4 >> 0x10\n 11302: u8 [a0 + 0x1a] = a5\n 11305: a5 = a4 >> 0x8\n 11308: u8 [a0 + 0x19] = a5\n 11311: u8 [a0 + 0x18] = a4\n 11314: u8 [a0 + 0x10] = a3\n 11317: a4 = a3 >> 0x38\n 11320: u8 [a0 + 0x17] = a4\n 11323: a4 = a3 >> 0x30\n 11326: u8 [a0 + 0x16] = a4\n 11329: a4 = a3 >> 0x28\n 11332: u8 [a0 + 0x15] = a4\n 11335: a4 = a3 >> 0x20\n 11338: u8 [a0 + 0x14] = a4\n 11341: a4 = a3 >> 0x18\n 11344: u8 [a0 + 0x13] = a4\n 11347: a4 = a3 >> 0x10\n 11350: u8 [a0 + 0x12] = a4\n 11353: a3 = a3 >> 0x8\n 11356: u8 [a0 + 0x11] = a3\n 11359: u8 [a0 + 0x8] = a2\n 11362: a3 = a2 >> 0x38\n 11365: u8 [a0 + 0xf] = a3\n 11368: a3 = a2 >> 0x30\n 11371: u8 [a0 + 0xe] = a3\n 11374: a3 = a2 >> 0x28\n 11377: u8 [a0 + 0xd] = a3\n 11380: a3 = a2 >> 0x20\n 11383: u8 [a0 + 0xc] = a3\n 11386: a3 = a2 >> 0x18\n 11389: u8 [a0 + 0xb] = a3\n 11392: a3 = a2 >> 0x10\n 11395: u8 [a0 + 0xa] = a3\n 11398: a2 = a2 >> 0x8\n 11401: u8 [a0 + 0x9] = a2\n 11404: u8 [a0] = a1\n 11406: a2 = a1 >> 0x38\n 11409: u8 [a0 + 0x7] = a2\n 11412: a2 = a1 >> 0x30\n 11415: u8 [a0 + 0x6] = a2\n 11418: a2 = a1 >> 0x28\n 11421: u8 [a0 + 0x5] = a2\n 11424: a2 = a1 >> 0x20\n 11427: u8 [a0 + 0x4] = a2\n 11430: a2 = a1 >> 0x18\n 11433: u8 [a0 + 0x3] = a2\n 11436: a2 = a1 >> 0x10\n 11439: u8 [a0 + 0x2] = a2\n 11442: a1 = a1 >> 0x8\n 11445: u8 [a0 + 0x1] = a1\n 11448: a0 = s0 + 0x20\n 11451: a1 = a0 <u s0\n 11454: a3 = u64 [sp + 0x20]\n 11457: a2 = a3 + a1\n 11460: a3 = a2 <u a3\n 11463: a3 = a1 if a1 == 0\n 11466: a1 = u64 [sp + 0x30]\n 11469: a3 = a3 + a1\n 11472: a1 = a3 <u a1\n 11475: a4 = u64 [sp + 0x28]\n 11478: a1 = a1 + a4\n 11481: a4 = u64 [sp + 0x18]\n 11484: u64 [a4] = a0\n 11486: u64 [a4 + 0x8] = a2\n 11489: u64 [a4 + 0x10] = a3\n 11492: u64 [a4 + 0x18] = a1\n 11495: ra = u64 [sp + 0x48]\n 11498: s0 = u64 [sp + 0x40]\n 11501: s1 = u64 [sp + 0x38]\n 11504: sp = sp + 0x50\n 11507: ret\n      : @196 (gas: 1)\n 11509: trap\n      : @197 (gas: 17)\n 11510: sp = sp + 0xffffffffffffffa0\n 11513: u64 [sp + 0x58] = ra\n 11516: u64 [sp + 0x50] = s0\n 11519: u64 [sp + 0x48] = s1\n 11522: a3 = u64 [a1 + 0x18]\n 11525: a4 = u64 [a1 + 0x10]\n 11528: a5 = u64 [a1 + 0x8]\n 11531: s1 = u64 [a1]\n 11533: a1 = a5 | a3\n 11536: a2 = s1 | a4\n 11539: a2 = a2 | a1\n 11542: a2 = a2 >> 0x20\n 11545: a1 = a1 | a4\n 11548: a1 = a1 << 0x20\n 11551: a1 = a1 | a2\n 11554: u64 [sp + 0x28] = a0\n 11557: jump @204 if a1 != 0\n      : @198 (gas: 19)\n 11561: a0 = s1 + 0x20\n 11564: u64 [sp + 0x30] = a0\n 11567: a0 = a0 <u s1\n 11570: a1 = a5 + a0\n 11573: u64 [sp + 0x40] = a1\n 11576: u64 [sp + 0x8] = a5\n 11579: s0 = a1 <u a5\n 11582: s0 = a0 if a0 == 0\n 11585: s0 = s0 + a4\n 11588: u64 [sp + 0x10] = a4\n 11591: a0 = s0 <u a4\n 11594: u64 [sp + 0x18] = a3\n 11597: a0 = a0 + a3\n 11600: u64 [sp + 0x38] = a0\n 11603: u64 [sp] = s1\n 11605: i32 a0 = s1 + 0\n 11607: a1 = 0x20\n 11610: s1 = 0x20\n 11613: ra = 184, jump @0\n      : @199 [@dyn 92] (gas: 45)\n 11619: u8 [a0 + 0x1f] = s1\n 11622: a1 = u64 [sp + 0x30]\n 11625: s1 = a1\n 11627: a1 = a1 | s0\n 11630: a2 = u64 [sp + 0x40]\n 11633: a4 = u64 [sp + 0x38]\n 11636: a2 = a2 | a4\n 11639: a1 = a1 | a2\n 11642: a1 = a1 >> 0x20\n 11645: u64 [sp + 0x20] = s0\n 11648: a2 = a2 | s0\n 11651: a2 = a2 << 0x20\n 11654: a1 = a1 | a2\n 11657: u8 [a0 + 30] = 0\n 11660: u8 [a0 + 29] = 0\n 11663: u8 [a0 + 28] = 0\n 11666: u8 [a0 + 27] = 0\n 11669: u8 [a0 + 26] = 0\n 11672: u8 [a0 + 25] = 0\n 11675: u8 [a0 + 24] = 0\n 11678: u8 [a0 + 23] = 0\n 11681: u8 [a0 + 22] = 0\n 11684: u8 [a0 + 21] = 0\n 11687: u8 [a0 + 20] = 0\n 11690: u8 [a0 + 19] = 0\n 11693: u8 [a0 + 18] = 0\n 11696: u8 [a0 + 17] = 0\n 11699: u8 [a0 + 16] = 0\n 11702: u8 [a0 + 15] = 0\n 11705: u8 [a0 + 14] = 0\n 11708: u8 [a0 + 13] = 0\n 11711: u8 [a0 + 12] = 0\n 11714: u8 [a0 + 11] = 0\n 11717: u8 [a0 + 10] = 0\n 11720: u8 [a0 + 9] = 0\n 11723: u8 [a0 + 8] = 0\n 11726: u8 [a0 + 7] = 0\n 11729: u8 [a0 + 6] = 0\n 11732: u8 [a0 + 5] = 0\n 11735: u8 [a0 + 4] = 0\n 11738: u8 [a0 + 3] = 0\n 11741: u8 [a0 + 2] = 0\n 11744: u8 [a0 + 1] = 0\n 11747: u8 [a0 + 0] = 0\n 11749: jump @204 if a1 != 0\n      : @200 (gas: 4)\n 11753: i32 s0 = s1 + 0\n 11755: a1 = 0x20\n 11758: a0 = s0\n 11760: ra = 186, jump @0\n      : @201 [@dyn 93] (gas: 41)\n 11766: u8 [a0 + 31] = 0xe\n 11770: u8 [a0 + 30] = 0\n 11773: u8 [a0 + 29] = 0\n 11776: u8 [a0 + 28] = 0\n 11779: u8 [a0 + 27] = 0\n 11782: u8 [a0 + 26] = 0\n 11785: u8 [a0 + 25] = 0\n 11788: u8 [a0 + 24] = 0\n 11791: u8 [a0 + 23] = 0\n 11794: u8 [a0 + 22] = 0\n 11797: u8 [a0 + 21] = 0\n 11800: u8 [a0 + 20] = 0\n 11803: u8 [a0 + 19] = 0\n 11806: u8 [a0 + 18] = 0\n 11809: u8 [a0 + 17] = 0\n 11812: u8 [a0 + 16] = 0\n 11815: u8 [a0 + 15] = 0\n 11818: u8 [a0 + 14] = 0\n 11821: u8 [a0 + 13] = 0\n 11824: u8 [a0 + 12] = 0\n 11827: u8 [a0 + 11] = 0\n 11830: u8 [a0 + 10] = 0\n 11833: u8 [a0 + 9] = 0\n 11836: u8 [a0 + 8] = 0\n 11839: u8 [a0 + 7] = 0\n 11842: u8 [a0 + 6] = 0\n 11845: u8 [a0 + 5] = 0\n 11848: u8 [a0 + 4] = 0\n 11851: u8 [a0 + 3] = 0\n 11854: u8 [a0 + 2] = 0\n 11857: u8 [a0 + 1] = 0\n 11860: a1 = u64 [sp + 0x20]\n 11863: a2 = u64 [sp + 0x38]\n 11866: a1 = a1 | a2\n 11869: a2 = 0xffffffe0\n 11879: a2 = s1 <u a2\n 11882: a3 = u64 [sp + 0x40]\n 11885: a2 = 0 if a3 != 0\n 11887: a2 = 0 if a1 != 0\n 11889: u8 [a0 + 0] = 0\n 11891: jump @204 if a2 == 0\n      : @202 (gas: 3)\n 11895: i32 a0 = s0 + 0x20\n 11898: a1 = 0x20\n 11901: ra = 188, jump @0\n      : @203 [@dyn 94] (gas: 54)\n 11907: u8 [a0 + 31] = 0\n 11910: u8 [a0 + 30] = 0\n 11913: u8 [a0 + 29] = 0\n 11916: u8 [a0 + 28] = 0\n 11919: u8 [a0 + 27] = 0\n 11922: u8 [a0 + 26] = 0\n 11925: u8 [a0 + 25] = 0\n 11928: u8 [a0 + 24] = 0\n 11931: u8 [a0 + 23] = 0\n 11934: u8 [a0 + 22] = 0\n 11937: u8 [a0 + 21] = 0\n 11940: u8 [a0 + 20] = 0\n 11943: u8 [a0 + 19] = 0\n 11946: u8 [a0 + 18] = 0\n 11949: u8 [a0 + 17] = 0\n 11952: u8 [a0 + 16] = 0\n 11955: u8 [a0 + 15] = 0\n 11958: u8 [a0 + 14] = 0\n 11961: u8 [a0 + 13] = 0x2e\n 11965: u8 [a0 + 12] = 0x64\n 11969: u8 [a0 + 11] = 0x65\n 11973: u8 [a0 + 10] = 0x64\n 11977: u8 [a0 + 9] = 0x6e\n 11981: u8 [a0 + 8] = 0x65\n 11985: u8 [a0 + 7] = 0x20\n 11989: u8 [a0 + 6] = 0x67\n 11993: u8 [a0 + 5] = 0x6e\n 11997: u8 [a0 + 4] = 0x69\n 12001: u8 [a0 + 3] = 0x64\n 12005: u8 [a0 + 2] = 0x64\n 12009: u8 [a0 + 1] = 0x69\n 12013: u8 [a0 + 0] = 0x42\n 12016: a1 = u64 [sp]\n 12018: a0 = a1 + 0x60\n 12021: a1 = a0 <u a1\n 12024: a3 = u64 [sp + 0x8]\n 12027: a2 = a3 + a1\n 12030: a3 = a2 <u a3\n 12033: a3 = a1 if a1 == 0\n 12036: a1 = u64 [sp + 0x10]\n 12039: a3 = a3 + a1\n 12042: a1 = a3 <u a1\n 12045: a4 = u64 [sp + 0x18]\n 12048: a1 = a1 + a4\n 12051: a4 = u64 [sp + 0x28]\n 12054: u64 [a4] = a0\n 12056: u64 [a4 + 0x8] = a2\n 12059: u64 [a4 + 0x10] = a3\n 12062: u64 [a4 + 0x18] = a1\n 12065: ra = u64 [sp + 0x58]\n 12068: s0 = u64 [sp + 0x50]\n 12071: s1 = u64 [sp + 0x48]\n 12074: sp = sp + 0x60\n 12077: ret\n      : @204 (gas: 1)\n 12079: trap\n      : @205 (gas: 17)\n 12080: sp = sp + 0xffffffffffffffa0\n 12083: u64 [sp + 0x58] = ra\n 12086: u64 [sp + 0x50] = s0\n 12089: u64 [sp + 0x48] = s1\n 12092: a3 = u64 [a1 + 0x18]\n 12095: a4 = u64 [a1 + 0x10]\n 12098: a5 = u64 [a1 + 0x8]\n 12101: s1 = u64 [a1]\n 12103: a1 = a5 | a3\n 12106: a2 = s1 | a4\n 12109: a2 = a2 | a1\n 12112: a2 = a2 >> 0x20\n 12115: a1 = a1 | a4\n 12118: a1 = a1 << 0x20\n 12121: a1 = a1 | a2\n 12124: u64 [sp + 0x28] = a0\n 12127: jump @212 if a1 != 0\n      : @206 (gas: 19)\n 12131: a0 = s1 + 0x20\n 12134: u64 [sp + 0x30] = a0\n 12137: a0 = a0 <u s1\n 12140: a1 = a5 + a0\n 12143: u64 [sp + 0x40] = a1\n 12146: u64 [sp + 0x8] = a5\n 12149: s0 = a1 <u a5\n 12152: s0 = a0 if a0 == 0\n 12155: s0 = s0 + a4\n 12158: u64 [sp + 0x10] = a4\n 12161: a0 = s0 <u a4\n 12164: u64 [sp + 0x18] = a3\n 12167: a0 = a0 + a3\n 12170: u64 [sp + 0x38] = a0\n 12173: u64 [sp] = s1\n 12175: i32 a0 = s1 + 0\n 12177: a1 = 0x20\n 12180: s1 = 0x20\n 12183: ra = 190, jump @0\n      : @207 [@dyn 95] (gas: 45)\n 12189: u8 [a0 + 0x1f] = s1\n 12192: a1 = u64 [sp + 0x30]\n 12195: s1 = a1\n 12197: a1 = a1 | s0\n 12200: a2 = u64 [sp + 0x40]\n 12203: a4 = u64 [sp + 0x38]\n 12206: a2 = a2 | a4\n 12209: a1 = a1 | a2\n 12212: a1 = a1 >> 0x20\n 12215: u64 [sp + 0x20] = s0\n 12218: a2 = a2 | s0\n 12221: a2 = a2 << 0x20\n 12224: a1 = a1 | a2\n 12227: u8 [a0 + 30] = 0\n 12230: u8 [a0 + 29] = 0\n 12233: u8 [a0 + 28] = 0\n 12236: u8 [a0 + 27] = 0\n 12239: u8 [a0 + 26] = 0\n 12242: u8 [a0 + 25] = 0\n 12245: u8 [a0 + 24] = 0\n 12248: u8 [a0 + 23] = 0\n 12251: u8 [a0 + 22] = 0\n 12254: u8 [a0 + 21] = 0\n 12257: u8 [a0 + 20] = 0\n 12260: u8 [a0 + 19] = 0\n 12263: u8 [a0 + 18] = 0\n 12266: u8 [a0 + 17] = 0\n 12269: u8 [a0 + 16] = 0\n 12272: u8 [a0 + 15] = 0\n 12275: u8 [a0 + 14] = 0\n 12278: u8 [a0 + 13] = 0\n 12281: u8 [a0 + 12] = 0\n 12284: u8 [a0 + 11] = 0\n 12287: u8 [a0 + 10] = 0\n 12290: u8 [a0 + 9] = 0\n 12293: u8 [a0 + 8] = 0\n 12296: u8 [a0 + 7] = 0\n 12299: u8 [a0 + 6] = 0\n 12302: u8 [a0 + 5] = 0\n 12305: u8 [a0 + 4] = 0\n 12308: u8 [a0 + 3] = 0\n 12311: u8 [a0 + 2] = 0\n 12314: u8 [a0 + 1] = 0\n 12317: u8 [a0 + 0] = 0\n 12319: jump @212 if a1 != 0\n      : @208 (gas: 4)\n 12323: i32 s0 = s1 + 0\n 12325: a1 = 0x20\n 12328: a0 = s0\n 12330: ra = 192, jump @0\n      : @209 [@dyn 96] (gas: 41)\n 12336: u8 [a0 + 31] = 0xc\n 12340: u8 [a0 + 30] = 0\n 12343: u8 [a0 + 29] = 0\n 12346: u8 [a0 + 28] = 0\n 12349: u8 [a0 + 27] = 0\n 12352: u8 [a0 + 26] = 0\n 12355: u8 [a0 + 25] = 0\n 12358: u8 [a0 + 24] = 0\n 12361: u8 [a0 + 23] = 0\n 12364: u8 [a0 + 22] = 0\n 12367: u8 [a0 + 21] = 0\n 12370: u8 [a0 + 20] = 0\n 12373: u8 [a0 + 19] = 0\n 12376: u8 [a0 + 18] = 0\n 12379: u8 [a0 + 17] = 0\n 12382: u8 [a0 + 16] = 0\n 12385: u8 [a0 + 15] = 0\n 12388: u8 [a0 + 14] = 0\n 12391: u8 [a0 + 13] = 0\n 12394: u8 [a0 + 12] = 0\n 12397: u8 [a0 + 11] = 0\n 12400: u8 [a0 + 10] = 0\n 12403: u8 [a0 + 9] = 0\n 12406: u8 [a0 + 8] = 0\n 12409: u8 [a0 + 7] = 0\n 12412: u8 [a0 + 6] = 0\n 12415: u8 [a0 + 5] = 0\n 12418: u8 [a0 + 4] = 0\n 12421: u8 [a0 + 3] = 0\n 12424: u8 [a0 + 2] = 0\n 12427: u8 [a0 + 1] = 0\n 12430: a1 = u64 [sp + 0x20]\n 12433: a2 = u64 [sp + 0x38]\n 12436: a1 = a1 | a2\n 12439: a2 = 0xffffffe0\n 12449: a2 = s1 <u a2\n 12452: a3 = u64 [sp + 0x40]\n 12455: a2 = 0 if a3 != 0\n 12457: a2 = 0 if a1 != 0\n 12459: u8 [a0 + 0] = 0\n 12461: jump @212 if a2 == 0\n      : @210 (gas: 3)\n 12465: i32 a0 = s0 + 0x20\n 12468: a1 = 0x20\n 12471: ra = 194, jump @0\n      : @211 [@dyn 97] (gas: 54)\n 12477: u8 [a0 + 31] = 0\n 12480: u8 [a0 + 30] = 0\n 12483: u8 [a0 + 29] = 0\n 12486: u8 [a0 + 28] = 0\n 12489: u8 [a0 + 27] = 0\n 12492: u8 [a0 + 26] = 0\n 12495: u8 [a0 + 25] = 0\n 12498: u8 [a0 + 24] = 0\n 12501: u8 [a0 + 23] = 0\n 12504: u8 [a0 + 22] = 0\n 12507: u8 [a0 + 21] = 0\n 12510: u8 [a0 + 20] = 0\n 12513: u8 [a0 + 19] = 0\n 12516: u8 [a0 + 18] = 0\n 12519: u8 [a0 + 17] = 0\n 12522: u8 [a0 + 16] = 0\n 12525: u8 [a0 + 15] = 0\n 12528: u8 [a0 + 14] = 0\n 12531: u8 [a0 + 13] = 0\n 12534: u8 [a0 + 12] = 0\n 12537: u8 [a0 + 11] = 0x2e\n 12541: u8 [a0 + 10] = 0x77\n 12545: u8 [a0 + 9] = 0x6f\n 12549: u8 [a0 + 8] = 0x6c\n 12553: u8 [a0 + 7] = 0x20\n 12557: u8 [a0 + 6] = 0x6f\n 12561: u8 [a0 + 5] = 0x6f\n 12565: u8 [a0 + 4] = 0x74\n 12569: u8 [a0 + 3] = 0x20\n 12573: u8 [a0 + 2] = 0x64\n 12577: u8 [a0 + 1] = 0x69\n 12581: u8 [a0 + 0] = 0x42\n 12584: a1 = u64 [sp]\n 12586: a0 = a1 + 0x60\n 12589: a1 = a0 <u a1\n 12592: a3 = u64 [sp + 0x8]\n 12595: a2 = a3 + a1\n 12598: a3 = a2 <u a3\n 12601: a3 = a1 if a1 == 0\n 12604: a1 = u64 [sp + 0x10]\n 12607: a3 = a3 + a1\n 12610: a1 = a3 <u a1\n 12613: a4 = u64 [sp + 0x18]\n 12616: a1 = a1 + a4\n 12619: a4 = u64 [sp + 0x28]\n 12622: u64 [a4] = a0\n 12624: u64 [a4 + 0x8] = a2\n 12627: u64 [a4 + 0x10] = a3\n 12630: u64 [a4 + 0x18] = a1\n 12633: ra = u64 [sp + 0x58]\n 12636: s0 = u64 [sp + 0x50]\n 12639: s1 = u64 [sp + 0x48]\n 12642: sp = sp + 0x60\n 12645: ret\n      : @212 (gas: 1)\n 12647: trap\n      : @213 (gas: 17)\n 12648: sp = sp + 0xffffffffffffffa0\n 12651: u64 [sp + 0x58] = ra\n 12654: u64 [sp + 0x50] = s0\n 12657: u64 [sp + 0x48] = s1\n 12660: a3 = u64 [a1 + 0x18]\n 12663: a4 = u64 [a1 + 0x10]\n 12666: a5 = u64 [a1 + 0x8]\n 12669: s1 = u64 [a1]\n 12671: a1 = a5 | a3\n 12674: a2 = s1 | a4\n 12677: a2 = a2 | a1\n 12680: a2 = a2 >> 0x20\n 12683: a1 = a1 | a4\n 12686: a1 = a1 << 0x20\n 12689: a1 = a1 | a2\n 12692: u64 [sp + 0x28] = a0\n 12695: jump @220 if a1 != 0\n      : @214 (gas: 19)\n 12699: a0 = s1 + 0x20\n 12702: u64 [sp + 0x30] = a0\n 12705: a0 = a0 <u s1\n 12708: a1 = a5 + a0\n 12711: u64 [sp + 0x40] = a1\n 12714: u64 [sp + 0x8] = a5\n 12717: s0 = a1 <u a5\n 12720: s0 = a0 if a0 == 0\n 12723: s0 = s0 + a4\n 12726: u64 [sp + 0x10] = a4\n 12729: a0 = s0 <u a4\n 12732: u64 [sp + 0x18] = a3\n 12735: a0 = a0 + a3\n 12738: u64 [sp + 0x38] = a0\n 12741: u64 [sp] = s1\n 12743: i32 a0 = s1 + 0\n 12745: a1 = 0x20\n 12748: s1 = 0x20\n 12751: ra = 196, jump @0\n      : @215 [@dyn 98] (gas: 45)\n 12757: u8 [a0 + 0x1f] = s1\n 12760: a1 = u64 [sp + 0x30]\n 12763: s1 = a1\n 12765: a1 = a1 | s0\n 12768: a2 = u64 [sp + 0x40]\n 12771: a4 = u64 [sp + 0x38]\n 12774: a2 = a2 | a4\n 12777: a1 = a1 | a2\n 12780: a1 = a1 >> 0x20\n 12783: u64 [sp + 0x20] = s0\n 12786: a2 = a2 | s0\n 12789: a2 = a2 << 0x20\n 12792: a1 = a1 | a2\n 12795: u8 [a0 + 30] = 0\n 12798: u8 [a0 + 29] = 0\n 12801: u8 [a0 + 28] = 0\n 12804: u8 [a0 + 27] = 0\n 12807: u8 [a0 + 26] = 0\n 12810: u8 [a0 + 25] = 0\n 12813: u8 [a0 + 24] = 0\n 12816: u8 [a0 + 23] = 0\n 12819: u8 [a0 + 22] = 0\n 12822: u8 [a0 + 21] = 0\n 12825: u8 [a0 + 20] = 0\n 12828: u8 [a0 + 19] = 0\n 12831: u8 [a0 + 18] = 0\n 12834: u8 [a0 + 17] = 0\n 12837: u8 [a0 + 16] = 0\n 12840: u8 [a0 + 15] = 0\n 12843: u8 [a0 + 14] = 0\n 12846: u8 [a0 + 13] = 0\n 12849: u8 [a0 + 12] = 0\n 12852: u8 [a0 + 11] = 0\n 12855: u8 [a0 + 10] = 0\n 12858: u8 [a0 + 9] = 0\n 12861: u8 [a0 + 8] = 0\n 12864: u8 [a0 + 7] = 0\n 12867: u8 [a0 + 6] = 0\n 12870: u8 [a0 + 5] = 0\n 12873: u8 [a0 + 4] = 0\n 12876: u8 [a0 + 3] = 0\n 12879: u8 [a0 + 2] = 0\n 12882: u8 [a0 + 1] = 0\n 12885: u8 [a0 + 0] = 0\n 12887: jump @220 if a1 != 0\n      : @216 (gas: 4)\n 12891: i32 s0 = s1 + 0\n 12893: a1 = 0x20\n 12896: a0 = s0\n 12898: ra = 198, jump @0\n      : @217 [@dyn 99] (gas: 41)\n 12904: u8 [a0 + 31] = 0x1e\n 12908: u8 [a0 + 30] = 0\n 12911: u8 [a0 + 29] = 0\n 12914: u8 [a0 + 28] = 0\n 12917: u8 [a0 + 27] = 0\n 12920: u8 [a0 + 26] = 0\n 12923: u8 [a0 + 25] = 0\n 12926: u8 [a0 + 24] = 0\n 12929: u8 [a0 + 23] = 0\n 12932: u8 [a0 + 22] = 0\n 12935: u8 [a0 + 21] = 0\n 12938: u8 [a0 + 20] = 0\n 12941: u8 [a0 + 19] = 0\n 12944: u8 [a0 + 18] = 0\n 12947: u8 [a0 + 17] = 0\n 12950: u8 [a0 + 16] = 0\n 12953: u8 [a0 + 15] = 0\n 12956: u8 [a0 + 14] = 0\n 12959: u8 [a0 + 13] = 0\n 12962: u8 [a0 + 12] = 0\n 12965: u8 [a0 + 11] = 0\n 12968: u8 [a0 + 10] = 0\n 12971: u8 [a0 + 9] = 0\n 12974: u8 [a0 + 8] = 0\n 12977: u8 [a0 + 7] = 0\n 12980: u8 [a0 + 6] = 0\n 12983: u8 [a0 + 5] = 0\n 12986: u8 [a0 + 4] = 0\n 12989: u8 [a0 + 3] = 0\n 12992: u8 [a0 + 2] = 0\n 12995: u8 [a0 + 1] = 0\n 12998: a1 = u64 [sp + 0x20]\n 13001: a2 = u64 [sp + 0x38]\n 13004: a1 = a1 | a2\n 13007: a2 = 0xffffffe0\n 13017: a2 = s1 <u a2\n 13020: a3 = u64 [sp + 0x40]\n 13023: a2 = 0 if a3 != 0\n 13025: a2 = 0 if a1 != 0\n 13027: u8 [a0 + 0] = 0\n 13029: jump @220 if a2 == 0\n      : @218 (gas: 3)\n 13033: i32 a0 = s0 + 0x20\n 13036: a1 = 0x20\n 13039: ra = 200, jump @0\n      : @219 [@dyn 100] (gas: 54)\n 13045: u8 [a0 + 29] = 0x2e\n 13049: u8 [a0 + 26] = 0x62\n 13053: u8 [a0 + 21] = 0x67\n 13057: u8 [a0 + 15] = 0x73\n 13061: u8 [a0 + 27] = 0x69\n 13065: u8 [a0 + 20] = 0x69\n 13069: u8 [a0 + 14] = 0x69\n 13073: u8 [a0 + 12] = 0x79\n 13077: u8 [a0 + 28] = 0x64\n 13081: u8 [a0 + 11] = 0x64\n 13085: u8 [a0 + 7] = 0x6c\n 13089: u8 [a0 + 17] = 0x61\n 13093: u8 [a0 + 10] = 0x61\n 13097: u8 [a0 + 6] = 0x61\n 13101: u8 [a0 + 31] = 0\n 13104: u8 [a0 + 30] = 0\n 13107: u8 [a0 + 25] = 0x20\n 13111: u8 [a0 + 18] = 0x20\n 13115: u8 [a0 + 16] = 0x20\n 13119: u8 [a0 + 13] = 0x20\n 13123: u8 [a0 + 5] = 0x20\n 13127: u8 [a0 + 24] = 0x72\n 13131: u8 [a0 + 8] = 0x72\n 13135: u8 [a0 + 3] = 0x72\n 13139: u8 [a0 + 23] = 0x65\n 13143: u8 [a0 + 9] = 0x65\n 13147: u8 [a0 + 4] = 0x65\n 13151: u8 [a0 + 2] = 0x65\n 13155: u8 [a0 + 22] = 0x68\n 13159: u8 [a0 + 19] = 0x68\n 13163: u8 [a0 + 1] = 0x68\n 13167: u8 [a0 + 0] = 0x54\n 13170: a1 = u64 [sp]\n 13172: a0 = a1 + 0x60\n 13175: a1 = a0 <u a1\n 13178: a3 = u64 [sp + 0x8]\n 13181: a2 = a3 + a1\n 13184: a3 = a2 <u a3\n 13187: a3 = a1 if a1 == 0\n 13190: a1 = u64 [sp + 0x10]\n 13193: a3 = a3 + a1\n 13196: a1 = a3 <u a1\n 13199: a4 = u64 [sp + 0x18]\n 13202: a1 = a1 + a4\n 13205: a4 = u64 [sp + 0x28]\n 13208: u64 [a4] = a0\n 13210: u64 [a4 + 0x8] = a2\n 13213: u64 [a4 + 0x10] = a3\n 13216: u64 [a4 + 0x18] = a1\n 13219: ra = u64 [sp + 0x58]\n 13222: s0 = u64 [sp + 0x50]\n 13225: s1 = u64 [sp + 0x48]\n 13228: sp = sp + 0x60\n 13231: ret\n      : @220 (gas: 1)\n 13233: trap\n      : @221 (gas: 21)\n 13234: sp = sp + 0xffffffffffffff20\n 13238: u64 [sp + 0xd8] = ra\n 13242: u64 [sp + 0xd0] = s0\n 13246: u64 [sp + 0xc8] = s1\n 13250: s0 = sp + 0xe0\n 13254: sp = sp & 0xffffffffffffffe0\n 13257: a4 = u64 [a1 + 0x10]\n 13260: a5 = u64 [a1 + 0x18]\n 13263: a2 = u64 [a1 + 0x8]\n 13266: a3 = u64 [a1]\n 13268: u64 [sp + 0x40] = a2\n 13271: u64 [sp + 0x30] = a5\n 13274: a1 = a2 | a5\n 13277: a2 = a3 | a4\n 13280: a2 = a2 | a1\n 13283: a2 = a2 >> 0x20\n 13286: u64 [sp + 0x38] = a4\n 13289: a1 = a1 | a4\n 13292: a1 = a1 << 0x20\n 13295: a1 = a1 | a2\n 13298: jump @227 if a1 != 0\n      : @222 (gas: 13)\n 13302: a1 = u64 [a0 + 0x18]\n 13305: u64 [sp + 0x20] = a1\n 13308: a1 = u64 [a0 + 0x10]\n 13311: u64 [sp + 0x58] = a1\n 13314: a1 = u64 [a0 + 0x8]\n 13317: u64 [sp + 0x50] = a1\n 13320: a0 = u64 [a0]\n 13322: u64 [sp + 0x48] = a0\n 13325: i32 a0 = a3 + 0\n 13327: a1 = 0x20\n 13330: u64 [sp] = a0\n 13332: u64 [sp + 0x28] = a3\n 13335: ra = 202, jump @0\n      : @223 [@dyn 101] (gas: 105)\n 13341: a1 = u8 [a0 + 0x11]\n 13344: a2 = u8 [a0 + 0x10]\n 13347: a3 = u8 [a0 + 0x12]\n 13350: a4 = u8 [a0 + 0x13]\n 13353: a1 = a1 << 0x8\n 13356: a1 = a1 | a2\n 13359: a3 = a3 << 0x10\n 13362: a4 = a4 << 0x18\n 13365: a3 = a3 | a4\n 13368: a1 = a1 | a3\n 13371: a2 = u8 [a0 + 0x15]\n 13374: a3 = u8 [a0 + 0x14]\n 13377: a4 = u8 [a0 + 0x16]\n 13380: a5 = u8 [a0 + 0x17]\n 13383: a2 = a2 << 0x8\n 13386: a2 = a2 | a3\n 13389: a4 = a4 << 0x10\n 13392: a5 = a5 << 0x18\n 13395: a4 = a4 | a5\n 13398: a2 = a2 | a4\n 13401: a2 = a2 << 0x20\n 13404: a1 = a1 | a2\n 13407: a2 = u8 [a0 + 0x19]\n 13410: a3 = u8 [a0 + 0x18]\n 13413: a4 = u8 [a0 + 0x1a]\n 13416: a5 = u8 [a0 + 0x1b]\n 13419: a2 = a2 << 0x8\n 13422: a2 = a2 | a3\n 13425: a4 = a4 << 0x10\n 13428: a5 = a5 << 0x18\n 13431: a4 = a4 | a5\n 13434: a2 = a2 | a4\n 13437: a3 = u8 [a0 + 0x1d]\n 13440: a4 = u8 [a0 + 0x1c]\n 13443: a5 = u8 [a0 + 0x1e]\n 13446: s1 = u8 [a0 + 0x1f]\n 13449: a3 = a3 << 0x8\n 13452: a3 = a3 | a4\n 13455: a5 = a5 << 0x10\n 13458: s1 = s1 << 0x18\n 13461: a5 = a5 | s1\n 13464: a3 = a3 | a5\n 13467: a3 = a3 << 0x20\n 13470: a2 = a2 | a3\n 13473: a3 = u8 [a0 + 0xd]\n 13476: a4 = u8 [a0 + 0xc]\n 13479: a5 = u8 [a0 + 0xe]\n 13482: a0 = u8 [a0 + 0xf]\n 13485: a3 = a3 << 0x8\n 13488: a3 = a3 | a4\n 13491: a5 = a5 << 0x10\n 13494: a0 = a0 << 0x18\n 13497: a0 = a0 | a5\n 13500: a0 = a0 | a3\n 13503: a2 = reverse a2\n 13505: u64 [sp + 0x18] = a2\n 13508: a1 = reverse a1\n 13510: u64 [sp + 0x10] = a1\n 13513: s1 = reverse a0\n 13515: s1 = s1 >> 0x20\n 13518: u64 [sp + 0x8] = s1\n 13521: s1 = u64 [sp + 0x20]\n 13524: u64 [sp + 0x98] = s1\n 13528: a0 = u64 [sp + 0x58]\n 13531: u64 [sp + 0x90] = a0\n 13535: a0 = u64 [sp + 0x50]\n 13538: u64 [sp + 0x88] = a0\n 13542: a0 = u64 [sp + 0x48]\n 13545: u64 [sp + 0x80] = a0\n 13549: u64 [sp + 184] = 0\n 13553: u64 [sp + 176] = 0\n 13557: u64 [sp + 168] = 0\n 13561: u64 [sp + 160] = 0\n 13565: u32 [sp + 96] = 0x20\n 13569: i32 a1 = sp + 0x80\n 13573: i32 a3 = sp + 0xa0\n 13577: i32 a4 = sp + 0x60\n 13580: a2 = 0xffffffffffffffff\n 13583: a0 = 0\n 13585: ecalli 6 // 'get_storage'\n 13587: a0 = u32 [sp + 0xb4]\n 13591: a0 = a0 << 0x20\n 13594: a1 = u64 [sp + 0xb8]\n 13598: a2 = u64 [sp + 0x8]\n 13601: a0 = a0 | a2\n 13604: u64 [sp + 0x98] = s1\n 13608: a2 = u64 [sp + 0x58]\n 13611: u64 [sp + 0x90] = a2\n 13615: a2 = u64 [sp + 0x50]\n 13618: u64 [sp + 0x88] = a2\n 13622: a2 = u64 [sp + 0x48]\n 13625: u64 [sp + 0x80] = a2\n 13629: u64 [sp + 0xb8] = a1\n 13633: u64 [sp + 0xb0] = a0\n 13637: a0 = u64 [sp + 0x10]\n 13640: u64 [sp + 0xa8] = a0\n 13644: a0 = u64 [sp + 0x18]\n 13647: u64 [sp + 0xa0] = a0\n 13651: i32 a1 = sp + 0x80\n 13655: i32 a3 = sp + 0xa0\n 13659: a2 = 0xffffffffffffffff\n 13662: a4 = 0x20\n 13665: a0 = 0\n 13667: ecalli 13 // 'set_storage'\n 13669: fallthrough\n      : @224 (gas: 10)\n 13670: a0 = u64 [sp + 0x38]\n 13673: a1 = u64 [sp + 0x30]\n 13676: a0 = a0 | a1\n 13679: a1 = 0xffffffe0\n 13689: a2 = u64 [sp + 0x28]\n 13692: a1 = a2 <u a1\n 13695: a2 = u64 [sp + 0x40]\n 13698: a1 = 0 if a2 != 0\n 13700: a1 = 0 if a0 != 0\n 13702: jump @227 if a1 == 0\n      : @225 (gas: 19)\n 13706: a1 = u64 [sp + 0x48]\n 13709: a1 = a1 + 0x1\n 13712: u64 [sp + 0x40] = a1\n 13715: a0 = a1 <u 0x1\n 13718: a2 = u64 [sp + 0x50]\n 13721: a0 = a0 + a2\n 13724: u64 [sp + 0x50] = a0\n 13727: a0 = a0 | a1\n 13730: a0 = a0 <u 0x1\n 13733: a1 = u64 [sp + 0x58]\n 13736: a0 = a0 + a1\n 13739: u64 [sp + 0x48] = a0\n 13742: a0 = a0 <u a1\n 13745: a0 = a0 + s1\n 13748: u64 [sp + 0x58] = a0\n 13751: a0 = u64 [sp]\n 13753: i32 a0 = a0 + 0x20\n 13756: a1 = 0x20\n 13759: ra = 204, jump @0\n      : @226 [@dyn 102] (gas: 142)\n 13765: a1 = u8 [a0 + 0x1]\n 13768: a2 = u8 [a0]\n 13770: a3 = u8 [a0 + 0x2]\n 13773: a4 = u8 [a0 + 0x3]\n 13776: a1 = a1 << 0x8\n 13779: a1 = a1 | a2\n 13782: a3 = a3 << 0x10\n 13785: a4 = a4 << 0x18\n 13788: a3 = a3 | a4\n 13791: a1 = a1 | a3\n 13794: a2 = u8 [a0 + 0x5]\n 13797: a3 = u8 [a0 + 0x4]\n 13800: a4 = u8 [a0 + 0x6]\n 13803: a5 = u8 [a0 + 0x7]\n 13806: a2 = a2 << 0x8\n 13809: a2 = a2 | a3\n 13812: a4 = a4 << 0x10\n 13815: a5 = a5 << 0x18\n 13818: a4 = a4 | a5\n 13821: a2 = a2 | a4\n 13824: a2 = a2 << 0x20\n 13827: t0 = a2 | a1\n 13830: a2 = u8 [a0 + 0x9]\n 13833: a3 = u8 [a0 + 0x8]\n 13836: a4 = u8 [a0 + 0xa]\n 13839: a5 = u8 [a0 + 0xb]\n 13842: a2 = a2 << 0x8\n 13845: a2 = a2 | a3\n 13848: a4 = a4 << 0x10\n 13851: a5 = a5 << 0x18\n 13854: a4 = a4 | a5\n 13857: a2 = a2 | a4\n 13860: a3 = u8 [a0 + 0xd]\n 13863: a4 = u8 [a0 + 0xc]\n 13866: a5 = u8 [a0 + 0xe]\n 13869: s1 = u8 [a0 + 0xf]\n 13872: a3 = a3 << 0x8\n 13875: a3 = a3 | a4\n 13878: a5 = a5 << 0x10\n 13881: s1 = s1 << 0x18\n 13884: a5 = a5 | s1\n 13887: a3 = a3 | a5\n 13890: a3 = a3 << 0x20\n 13893: a2 = a2 | a3\n 13896: a3 = u8 [a0 + 0x11]\n 13899: a4 = u8 [a0 + 0x10]\n 13902: a5 = u8 [a0 + 0x12]\n 13905: s1 = u8 [a0 + 0x13]\n 13908: a3 = a3 << 0x8\n 13911: a3 = a3 | a4\n 13914: a5 = a5 << 0x10\n 13917: s1 = s1 << 0x18\n 13920: a5 = a5 | s1\n 13923: a3 = a3 | a5\n 13926: a4 = u8 [a0 + 0x15]\n 13929: a5 = u8 [a0 + 0x14]\n 13932: s1 = u8 [a0 + 0x16]\n 13935: a1 = u8 [a0 + 0x17]\n 13938: a4 = a4 << 0x8\n 13941: a4 = a4 | a5\n 13944: s1 = s1 << 0x10\n 13947: a1 = a1 << 0x18\n 13950: a1 = a1 | s1\n 13953: a1 = a1 | a4\n 13956: a1 = a1 << 0x20\n 13959: a3 = a3 | a1\n 13962: a1 = u8 [a0 + 0x19]\n 13965: a4 = u8 [a0 + 0x18]\n 13968: a5 = u8 [a0 + 0x1a]\n 13971: s1 = u8 [a0 + 0x1b]\n 13974: a1 = a1 << 0x8\n 13977: a1 = a1 | a4\n 13980: a5 = a5 << 0x10\n 13983: s1 = s1 << 0x18\n 13986: a5 = a5 | s1\n 13989: a1 = a1 | a5\n 13992: a4 = u8 [a0 + 0x1d]\n 13995: a5 = u8 [a0 + 0x1c]\n 13998: s1 = u8 [a0 + 0x1e]\n 14001: a0 = u8 [a0 + 0x1f]\n 14004: a4 = a4 << 0x8\n 14007: a4 = a4 | a5\n 14010: s1 = s1 << 0x10\n 14013: a0 = a0 << 0x18\n 14016: a0 = a0 | s1\n 14019: a0 = a0 | a4\n 14022: a0 = a0 << 0x20\n 14025: a0 = a0 | a1\n 14028: u32 [sp + 96] = 0x20\n 14032: a0 = reverse a0\n 14034: u64 [sp + 0x38] = a0\n 14037: a0 = reverse a3\n 14039: u64 [sp + 0x30] = a0\n 14042: a0 = reverse a2\n 14044: u64 [sp + 0x28] = a0\n 14047: a0 = reverse t0\n 14049: u64 [sp + 0x20] = a0\n 14052: a0 = u64 [sp + 0x48]\n 14055: u64 [sp + 0x90] = a0\n 14059: a0 = u64 [sp + 0x50]\n 14062: u64 [sp + 0x88] = a0\n 14066: a0 = u64 [sp + 0x40]\n 14069: u64 [sp + 0x80] = a0\n 14073: s1 = u64 [sp + 0x58]\n 14076: u64 [sp + 0x98] = s1\n 14080: u64 [sp + 184] = 0\n 14084: u64 [sp + 176] = 0\n 14088: u64 [sp + 168] = 0\n 14092: u64 [sp + 160] = 0\n 14096: i32 a1 = sp + 0x80\n 14100: i32 a3 = sp + 0xa0\n 14104: i32 a4 = sp + 0x60\n 14107: a2 = 0xffffffffffffffff\n 14110: a0 = 0\n 14112: ecalli 6 // 'get_storage'\n 14114: u64 [sp + 0x98] = s1\n 14118: a0 = u64 [sp + 0x48]\n 14121: u64 [sp + 0x90] = a0\n 14125: a0 = u64 [sp + 0x50]\n 14128: u64 [sp + 0x88] = a0\n 14132: a0 = u64 [sp + 0x40]\n 14135: u64 [sp + 0x80] = a0\n 14139: a0 = u64 [sp + 0x20]\n 14142: u64 [sp + 0xb8] = a0\n 14146: a0 = u64 [sp + 0x28]\n 14149: u64 [sp + 0xb0] = a0\n 14153: a0 = u64 [sp + 0x30]\n 14156: u64 [sp + 0xa8] = a0\n 14160: a0 = u64 [sp + 0x38]\n 14163: u64 [sp + 0xa0] = a0\n 14167: i32 a1 = sp + 0x80\n 14171: i32 a3 = sp + 0xa0\n 14175: a2 = 0xffffffffffffffff\n 14178: a4 = 0x20\n 14181: a0 = 0\n 14183: ecalli 13 // 'set_storage'\n 14185: sp = s0 + 0xffffffffffffff20\n 14189: ra = u64 [sp + 0xd8]\n 14193: s0 = u64 [sp + 0xd0]\n 14197: s1 = u64 [sp + 0xc8]\n 14201: sp = sp + 0xe0\n 14205: ret\n      : @227 (gas: 1)\n 14207: trap\n      : @228 (gas: 20)\n 14208: a0 = u64 [s1 + 0x258]\n 14212: t0 = u64 [s1 + 0x240]\n 14216: a2 = u64 [s1 + 0x250]\n 14220: a3 = u64 [s1 + 0x248]\n 14224: a1 = u64 [s1 + 0x40]\n 14227: a4 = a1 ^ a0\n 14230: a1 = a0 <u a1\n 14233: a0 = u64 [s1 + 0x48]\n 14236: a5 = a2 <u a0\n 14239: a5 = a1 if a4 != 0\n 14242: a1 = u64 [s1 + 0x50]\n 14245: t1 = a1 ^ a3\n 14248: a3 = a3 <u a1\n 14251: a1 = u64 [s1 + 0x58]\n 14254: a1 = t0 <u a1\n 14257: a1 = a3 if t1 != 0\n 14260: a0 = a0 ^ a2\n 14263: a0 = a0 | a4\n 14266: a1 = a5 if a0 != 0\n 14269: jump @252 if a1 != 0\n      : @229 (gas: 35)\n 14273: a0 = sp + 0xffffffffffffffe0\n 14276: a0 = a0 & 0xffffffffffffffe0\n 14279: u64 [s1 + 0x40] = a0\n 14282: sp = a0\n 14284: u64 [a0 + 24] = 0\n 14287: u64 [a0 + 16] = 0\n 14290: u64 [a0 + 8] = 0\n 14293: u64 [a0 + 0] = 0\n 14295: i32 a0 = a0 + 0\n 14297: ecalli 14 // 'value_transferred'\n 14299: a1 = u64 [s1 + 0x40]\n 14302: a0 = u64 [a1]\n 14304: u64 [s1 + 0x58] = a0\n 14307: a0 = u64 [a1 + 0x8]\n 14310: u64 [s1 + 0x50] = a0\n 14313: a0 = u64 [a1 + 0x10]\n 14316: u64 [s1 + 0x48] = a0\n 14319: a0 = u64 [a1 + 0x18]\n 14322: u64 [s1 + 0x40] = a0\n 14325: u64 [s1 + 568] = 0\n 14329: u64 [s1 + 560] = 0\n 14333: u64 [s1 + 552] = 0\n 14337: u64 [s1 + 544] = 0x2\n 14342: u64 [s1 + 600] = 0\n 14346: u64 [s1 + 592] = 0\n 14350: u64 [s1 + 584] = 0\n 14354: u64 [s1 + 576] = 0\n 14358: u32 [s1 + 512] = 0x20\n 14363: i32 a1 = s1 + 0x220\n 14367: i32 a3 = s1 + 0x240\n 14371: i32 a4 = s1 + 0x200\n 14375: a2 = 0xffffffffffffffff\n 14378: a0 = 0\n 14380: ecalli 6 // 'get_storage'\n 14382: fallthrough\n      : @230 (gas: 20)\n 14383: a0 = u64 [s1 + 0x258]\n 14387: t0 = u64 [s1 + 0x240]\n 14391: a2 = u64 [s1 + 0x250]\n 14395: a3 = u64 [s1 + 0x248]\n 14399: a1 = u64 [s1 + 0x40]\n 14402: a4 = a1 ^ a0\n 14405: a1 = a1 <u a0\n 14408: a0 = u64 [s1 + 0x48]\n 14411: a5 = a0 <u a2\n 14414: a5 = a1 if a4 != 0\n 14417: a1 = u64 [s1 + 0x50]\n 14420: t1 = a1 ^ a3\n 14423: a3 = a1 <u a3\n 14426: a1 = u64 [s1 + 0x58]\n 14429: a1 = a1 <u t0\n 14432: a1 = a3 if t1 != 0\n 14435: a0 = a0 ^ a2\n 14438: a0 = a0 | a4\n 14441: a1 = a5 if a0 != 0\n 14444: jump @257 if a1 != 0\n      : @231 (gas: 35)\n 14448: a0 = sp + 0xffffffffffffffe0\n 14451: a0 = a0 & 0xffffffffffffffe0\n 14454: u64 [s1 + 0x40] = a0\n 14457: sp = a0\n 14459: u64 [a0 + 24] = 0\n 14462: u64 [a0 + 16] = 0\n 14465: u64 [a0 + 8] = 0\n 14468: u64 [a0 + 0] = 0\n 14470: i32 a0 = a0 + 0\n 14472: ecalli 14 // 'value_transferred'\n 14474: a1 = u64 [s1 + 0x40]\n 14477: a0 = u64 [a1]\n 14479: u64 [s1 + 0x58] = a0\n 14482: a0 = u64 [a1 + 0x8]\n 14485: u64 [s1 + 0x50] = a0\n 14488: a0 = u64 [a1 + 0x10]\n 14491: u64 [s1 + 0x48] = a0\n 14494: a0 = u64 [a1 + 0x18]\n 14497: u64 [s1 + 0x40] = a0\n 14500: u64 [s1 + 568] = 0\n 14504: u64 [s1 + 560] = 0\n 14508: u64 [s1 + 552] = 0\n 14512: u64 [s1 + 544] = 0x4\n 14517: u64 [s1 + 600] = 0\n 14521: u64 [s1 + 592] = 0\n 14525: u64 [s1 + 584] = 0\n 14529: u64 [s1 + 576] = 0\n 14533: u32 [s1 + 512] = 0x20\n 14538: i32 a1 = s1 + 0x220\n 14542: i32 a3 = s1 + 0x240\n 14546: i32 a4 = s1 + 0x200\n 14550: a2 = 0xffffffffffffffff\n 14553: a0 = 0\n 14555: ecalli 6 // 'get_storage'\n 14557: fallthrough\n      : @232 (gas: 20)\n 14558: a0 = u64 [s1 + 0x258]\n 14562: t0 = u64 [s1 + 0x240]\n 14566: a2 = u64 [s1 + 0x250]\n 14570: a3 = u64 [s1 + 0x248]\n 14574: a1 = u64 [s1 + 0x40]\n 14577: a4 = a1 ^ a0\n 14580: a1 = a0 <u a1\n 14583: a0 = u64 [s1 + 0x48]\n 14586: a5 = a2 <u a0\n 14589: a5 = a1 if a4 != 0\n 14592: a1 = u64 [s1 + 0x50]\n 14595: t1 = a1 ^ a3\n 14598: a3 = a3 <u a1\n 14601: a1 = u64 [s1 + 0x58]\n 14604: a1 = t0 <u a1\n 14607: a1 = a3 if t1 != 0\n 14610: a0 = a0 ^ a2\n 14613: a0 = a0 | a4\n 14616: a1 = a5 if a0 != 0\n 14619: jump @262 if a1 == 0\n      : @233 (gas: 16)\n 14623: u64 [s1 + 568] = 0\n 14627: u64 [s1 + 560] = 0\n 14631: u64 [s1 + 552] = 0\n 14635: u64 [s1 + 544] = 0x4\n 14640: u64 [s1 + 600] = 0\n 14644: u64 [s1 + 592] = 0\n 14648: u64 [s1 + 584] = 0\n 14652: u64 [s1 + 576] = 0\n 14656: u32 [s1 + 512] = 0x20\n 14661: i32 a1 = s1 + 0x220\n 14665: i32 a3 = s1 + 0x240\n 14669: i32 a4 = s1 + 0x200\n 14673: a2 = 0xffffffffffffffff\n 14676: a0 = 0\n 14678: ecalli 6 // 'get_storage'\n 14680: fallthrough\n      : @234 (gas: 8)\n 14681: a0 = u64 [s1 + 0x250]\n 14685: a1 = u64 [s1 + 0x258]\n 14689: a2 = u64 [s1 + 0x248]\n 14693: a3 = u64 [s1 + 0x240]\n 14697: a1 = a1 | a2\n 14700: a0 = a0 | a3\n 14703: a0 = a0 | a1\n 14706: jump @239 if a0 == 0\n      : @235 (gas: 47)\n 14710: u64 [s1 + 568] = 0\n 14714: u64 [s1 + 560] = 0\n 14718: u64 [s1 + 552] = 0\n 14722: u64 [s1 + 544] = 0x4\n 14727: u64 [s1 + 600] = 0\n 14731: u64 [s1 + 592] = 0\n 14735: u64 [s1 + 584] = 0\n 14739: u64 [s1 + 576] = 0\n 14743: u32 [s1 + 512] = 0x20\n 14748: i32 a1 = s1 + 0x220\n 14752: i32 a3 = s1 + 0x240\n 14756: i32 a4 = s1 + 0x200\n 14760: a2 = 0xffffffffffffffff\n 14763: a0 = 0\n 14765: ecalli 6 // 'get_storage'\n 14767: a0 = u64 [s1 + 0x240]\n 14771: u64 [s1 + 0x58] = a0\n 14774: a0 = u64 [s1 + 0x248]\n 14778: u64 [s1 + 0x50] = a0\n 14781: a0 = u64 [s1 + 0x250]\n 14785: u64 [s1 + 0x48] = a0\n 14788: a0 = u64 [s1 + 0x258]\n 14792: u64 [s1 + 0x40] = a0\n 14795: u64 [s1 + 568] = 0\n 14799: u64 [s1 + 560] = 0\n 14803: u64 [s1 + 552] = 0\n 14807: u64 [s1 + 544] = 0x3\n 14812: u64 [s1 + 600] = 0\n 14816: u64 [s1 + 592] = 0\n 14820: u64 [s1 + 584] = 0\n 14824: u64 [s1 + 576] = 0\n 14828: u32 [s1 + 512] = 0x20\n 14833: i32 a1 = s1 + 0x220\n 14837: i32 a3 = s1 + 0x240\n 14841: i32 a4 = s1 + 0x200\n 14845: a2 = 0xffffffffffffffff\n 14848: a0 = 0\n 14850: ecalli 6 // 'get_storage'\n 14852: a0 = u64 [s1 + 0x240]\n 14856: u64 [s1 + 0x38] = a0\n 14859: a0 = u64 [s1 + 0x248]\n 14863: u64 [s1 + 0x30] = a0\n 14866: a0 = u32 [s1 + 0x250]\n 14870: u64 [s1 + 0x28] = a0\n 14873: a1 = 0x20\n 14876: a0 = 0\n 14878: ra = 206, jump @0\n      : @236 [@dyn 103] (gas: 59)\n 14884: a1 = u64 [s1 + 0x28]\n 14887: a1 = reverse a1\n 14889: a2 = u64 [s1 + 0x30]\n 14892: a2 = reverse a2\n 14894: a3 = u64 [s1 + 0x38]\n 14897: a3 = reverse a3\n 14899: a4 = a3 >> 0x38\n 14902: u8 [a0 + 0x1f] = a4\n 14905: a4 = a3 >> 0x30\n 14908: u8 [a0 + 0x1e] = a4\n 14911: a4 = a3 >> 0x28\n 14914: u8 [a0 + 0x1d] = a4\n 14917: a4 = a3 >> 0x20\n 14920: u8 [a0 + 0x1c] = a4\n 14923: a4 = a3 >> 0x18\n 14926: u8 [a0 + 0x1b] = a4\n 14929: a4 = a3 >> 0x10\n 14932: u8 [a0 + 0x1a] = a4\n 14935: a4 = a3 >> 0x8\n 14938: u8 [a0 + 0x19] = a4\n 14941: u8 [a0 + 0x18] = a3\n 14944: a3 = a2 >> 0x38\n 14947: u8 [a0 + 0x17] = a3\n 14950: a3 = a2 >> 0x30\n 14953: u8 [a0 + 0x16] = a3\n 14956: a3 = a2 >> 0x28\n 14959: u8 [a0 + 0x15] = a3\n 14962: a3 = a2 >> 0x20\n 14965: u8 [a0 + 0x14] = a3\n 14968: a3 = a2 >> 0x18\n 14971: u8 [a0 + 0x13] = a3\n 14974: a3 = a2 >> 0x10\n 14977: u8 [a0 + 0x12] = a3\n 14980: a3 = a2 >> 0x8\n 14983: u8 [a0 + 0x11] = a3\n 14986: u8 [a0 + 0x10] = a2\n 14989: a2 = a1 >> 0x38\n 14992: u8 [a0 + 0xf] = a2\n 14995: a2 = a1 >> 0x30\n 14998: u8 [a0 + 0xe] = a2\n 15001: a2 = a1 >> 0x28\n 15004: u8 [a0 + 0xd] = a2\n 15007: a2 = a1 >> 0x20\n 15010: u8 [a0 + 0xc] = a2\n 15013: u8 [a0 + 11] = 0\n 15016: u8 [a0 + 10] = 0\n 15019: u8 [a0 + 9] = 0\n 15022: u8 [a0 + 0x8] = a1\n 15025: u8 [a0 + 7] = 0\n 15028: u8 [a0 + 6] = 0\n 15031: u8 [a0 + 5] = 0\n 15034: u8 [a0 + 4] = 0\n 15037: u8 [a0 + 3] = 0\n 15040: u8 [a0 + 2] = 0\n 15043: u8 [a0 + 1] = 0\n 15046: u8 [a0 + 0] = 0\n 15048: a0 = 0x20\n 15051: a1 = 0x20\n 15054: ra = 208, jump @0\n      : @237 [@dyn 104] (gas: 35)\n 15060: u8 [a0 + 31] = 0x5\n 15064: u8 [a0 + 30] = 0\n 15067: u8 [a0 + 29] = 0\n 15070: u8 [a0 + 28] = 0\n 15073: u8 [a0 + 27] = 0\n 15076: u8 [a0 + 26] = 0\n 15079: u8 [a0 + 25] = 0\n 15082: u8 [a0 + 24] = 0\n 15085: u8 [a0 + 23] = 0\n 15088: u8 [a0 + 22] = 0\n 15091: u8 [a0 + 21] = 0\n 15094: u8 [a0 + 20] = 0\n 15097: u8 [a0 + 19] = 0\n 15100: u8 [a0 + 18] = 0\n 15103: u8 [a0 + 17] = 0\n 15106: u8 [a0 + 16] = 0\n 15109: u8 [a0 + 15] = 0\n 15112: u8 [a0 + 14] = 0\n 15115: u8 [a0 + 13] = 0\n 15118: u8 [a0 + 12] = 0\n 15121: u8 [a0 + 11] = 0\n 15124: u8 [a0 + 10] = 0\n 15127: u8 [a0 + 9] = 0\n 15130: u8 [a0 + 8] = 0\n 15133: u8 [a0 + 7] = 0\n 15136: u8 [a0 + 6] = 0\n 15139: u8 [a0 + 5] = 0\n 15142: u8 [a0 + 4] = 0\n 15145: u8 [a0 + 3] = 0\n 15148: u8 [a0 + 2] = 0\n 15151: u8 [a0 + 1] = 0\n 15154: u8 [a0 + 0] = 0\n 15156: a1 = 0x40\n 15159: a0 = 0\n 15161: ra = 210, jump @0\n      : @238 [@dyn 105] (gas: 54)\n 15167: i32 a0 = a0 + 0\n 15169: i32 a2 = s1 + 0x240\n 15173: a1 = 0x40\n 15176: ecalli 7 // 'hash_keccak_256'\n 15178: a0 = u64 [s1 + 0x258]\n 15182: a1 = u64 [s1 + 0x250]\n 15186: a2 = u64 [s1 + 0x248]\n 15190: a3 = u64 [s1 + 0x240]\n 15194: a0 = reverse a0\n 15196: u64 [s1 + 0x38] = a0\n 15199: a1 = reverse a1\n 15201: u64 [s1 + 0x30] = a1\n 15204: a2 = reverse a2\n 15206: u64 [s1 + 0x28] = a2\n 15209: a3 = reverse a3\n 15211: u64 [s1 + 0x20] = a3\n 15214: u64 [s1 + 0x238] = a3\n 15218: u64 [s1 + 0x230] = a2\n 15222: u64 [s1 + 0x228] = a1\n 15226: u64 [s1 + 0x220] = a0\n 15230: u64 [s1 + 600] = 0\n 15234: u64 [s1 + 592] = 0\n 15238: u64 [s1 + 584] = 0\n 15242: u64 [s1 + 576] = 0\n 15246: u32 [s1 + 512] = 0x20\n 15251: i32 a1 = s1 + 0x220\n 15255: i32 a3 = s1 + 0x240\n 15259: i32 a4 = s1 + 0x200\n 15263: a2 = 0xffffffffffffffff\n 15266: a0 = 0\n 15268: ecalli 6 // 'get_storage'\n 15270: a0 = u64 [s1 + 0x20]\n 15273: u64 [s1 + 0x238] = a0\n 15277: a0 = u64 [s1 + 0x28]\n 15280: u64 [s1 + 0x230] = a0\n 15284: a0 = u64 [s1 + 0x30]\n 15287: u64 [s1 + 0x228] = a0\n 15291: a0 = u64 [s1 + 0x38]\n 15294: u64 [s1 + 0x220] = a0\n 15298: a0 = u64 [s1 + 0x40]\n 15301: u64 [s1 + 0x258] = a0\n 15305: a0 = u64 [s1 + 0x48]\n 15308: u64 [s1 + 0x250] = a0\n 15312: a0 = u64 [s1 + 0x50]\n 15315: u64 [s1 + 0x248] = a0\n 15319: a0 = u64 [s1 + 0x58]\n 15322: u64 [s1 + 0x240] = a0\n 15326: i32 a1 = s1 + 0x220\n 15330: i32 a3 = s1 + 0x240\n 15334: a2 = 0xffffffffffffffff\n 15337: a4 = 0x20\n 15340: a0 = 0\n 15342: ecalli 13 // 'set_storage'\n 15344: fallthrough\n      : @239 (gas: 34)\n 15345: i32 a0 = s1 + 0x1c0\n 15349: ecalli 4 // 'caller'\n 15351: a0 = u32 [s1 + 0x1d0]\n 15355: u64 [s1 + 0x38] = a0\n 15358: a0 = u64 [s1 + 0x1c8]\n 15362: u64 [s1 + 0x30] = a0\n 15365: a0 = u64 [s1 + 0x1c0]\n 15369: u64 [s1 + 0x58] = a0\n 15372: a0 = sp + 0xffffffffffffffe0\n 15375: a0 = a0 & 0xffffffffffffffe0\n 15378: u64 [s1 + 0x50] = a0\n 15381: sp = a0\n 15383: u64 [a0 + 24] = 0\n 15386: u64 [a0 + 16] = 0\n 15389: u64 [a0 + 8] = 0\n 15392: u64 [a0 + 0] = 0\n 15394: i32 a0 = a0 + 0\n 15396: ecalli 14 // 'value_transferred'\n 15398: a1 = u64 [s1 + 0x50]\n 15401: a0 = u64 [a1 + 0x18]\n 15404: u64 [s1 + 0x10] = a0\n 15407: a0 = u64 [a1 + 0x10]\n 15410: u64 [s1 + 0x18] = a0\n 15413: a0 = u64 [a1 + 0x8]\n 15416: u64 [s1 + 0x20] = a0\n 15419: a0 = u64 [a1]\n 15421: u64 [s1 + 0x28] = a0\n 15424: u64 [s1 + 312] = 0\n 15428: u64 [s1 + 304] = 0\n 15432: u64 [s1 + 288] = 0x40\n 15437: a0 = s1 + 0x140\n 15441: a1 = s1 + 0x120\n 15445: u64 [s1 + 296] = 0\n 15449: ra = 212, jump @57\n      : @240 [@dyn 106] (gas: 15)\n 15455: a1 = u64 [s1 + 0x158]\n 15459: a2 = u64 [s1 + 0x150]\n 15463: a0 = u64 [s1 + 0x148]\n 15467: a3 = u64 [s1 + 0x140]\n 15471: u64 [s1 + 0x50] = a0\n 15474: u64 [s1 + 0x40] = a1\n 15477: a0 = a0 | a1\n 15480: a1 = a3 | a2\n 15483: a1 = a1 | a0\n 15486: a1 = a1 >> 0x20\n 15489: u64 [s1 + 0x48] = a2\n 15492: a0 = a0 | a2\n 15495: a0 = a0 << 0x20\n 15498: a0 = a0 | a1\n 15501: jump @268 if a0 != 0\n      : @241 (gas: 19)\n 15505: a0 = u64 [s1 + 0x58]\n 15508: a0 = reverse a0\n 15510: a0 = a0 << 0x20\n 15513: a1 = u64 [s1 + 0x30]\n 15516: a1 = reverse a1\n 15518: a2 = a1 >> 0x20\n 15521: a0 = a0 | a2\n 15524: u64 [s1 + 0x30] = a0\n 15527: a1 = a1 << 0x20\n 15530: a0 = u64 [s1 + 0x38]\n 15533: a0 = reverse a0\n 15535: a0 = a0 >> 0x20\n 15538: a0 = a0 | a1\n 15541: u64 [s1 + 0x8] = a0\n 15544: i32 a0 = a3 + 0\n 15546: a1 = 0x20\n 15549: u64 [s1] = a0\n 15551: u64 [s1 + 0x38] = a3\n 15554: ra = 214, jump @0\n      : @242 [@dyn 107] (gas: 64)\n 15560: a1 = u64 [s1 + 0x8]\n 15563: a1 = reverse a1\n 15565: a2 = u64 [s1 + 0x30]\n 15568: a2 = reverse a2\n 15570: a4 = u64 [s1 + 0x58]\n 15573: a3 = a4 >> 0x18\n 15576: u8 [a0 + 0xf] = a3\n 15579: a3 = a4 >> 0x10\n 15582: u8 [a0 + 0xe] = a3\n 15585: a3 = a4 >> 0x8\n 15588: u8 [a0 + 0xd] = a3\n 15591: u8 [a0 + 0xc] = a4\n 15594: u8 [a0 + 11] = 0\n 15597: u8 [a0 + 10] = 0\n 15600: u8 [a0 + 9] = 0\n 15603: u8 [a0 + 8] = 0\n 15606: u8 [a0 + 7] = 0\n 15609: u8 [a0 + 6] = 0\n 15612: u8 [a0 + 5] = 0\n 15615: u8 [a0 + 4] = 0\n 15618: u8 [a0 + 3] = 0\n 15621: u8 [a0 + 2] = 0\n 15624: u8 [a0 + 1] = 0\n 15627: u8 [a0 + 0] = 0\n 15629: u8 [a0 + 0x10] = a2\n 15632: u8 [a0 + 0x18] = a1\n 15635: a3 = a2 >> 0x38\n 15638: u8 [a0 + 0x17] = a3\n 15641: a3 = a2 >> 0x30\n 15644: u8 [a0 + 0x16] = a3\n 15647: a3 = a2 >> 0x28\n 15650: u8 [a0 + 0x15] = a3\n 15653: a3 = a2 >> 0x20\n 15656: u8 [a0 + 0x14] = a3\n 15659: a3 = a2 >> 0x18\n 15662: u8 [a0 + 0x13] = a3\n 15665: a3 = a2 >> 0x10\n 15668: u8 [a0 + 0x12] = a3\n 15671: a2 = a2 >> 0x8\n 15674: u8 [a0 + 0x11] = a2\n 15677: a2 = a1 >> 0x38\n 15680: u8 [a0 + 0x1f] = a2\n 15683: a2 = a1 >> 0x30\n 15686: u8 [a0 + 0x1e] = a2\n 15689: a2 = a1 >> 0x28\n 15692: u8 [a0 + 0x1d] = a2\n 15695: a2 = a1 >> 0x20\n 15698: u8 [a0 + 0x1c] = a2\n 15701: a2 = a1 >> 0x18\n 15704: u8 [a0 + 0x1b] = a2\n 15707: a2 = a1 >> 0x10\n 15710: u8 [a0 + 0x1a] = a2\n 15713: a1 = a1 >> 0x8\n 15716: a2 = u64 [s1 + 0x48]\n 15719: a3 = u64 [s1 + 0x40]\n 15722: a2 = a2 | a3\n 15725: a3 = 0xffffffe0\n 15735: a4 = u64 [s1 + 0x38]\n 15738: a3 = a4 <u a3\n 15741: a4 = u64 [s1 + 0x50]\n 15744: a3 = 0 if a4 != 0\n 15746: a3 = 0 if a2 != 0\n 15748: u8 [a0 + 0x19] = a1\n 15751: jump @268 if a3 == 0\n      : @243 (gas: 4)\n 15755: a0 = u64 [s1]\n 15757: i32 a0 = a0 + 0x20\n 15760: a1 = 0x20\n 15763: ra = 216, jump @0\n      : @244 [@dyn 108] (gas: 83)\n 15769: a1 = u64 [s1 + 0x10]\n 15772: a1 = reverse a1\n 15774: a2 = u64 [s1 + 0x18]\n 15777: a2 = reverse a2\n 15779: a3 = u64 [s1 + 0x20]\n 15782: a3 = reverse a3\n 15784: a4 = u64 [s1 + 0x28]\n 15787: a4 = reverse a4\n 15789: a5 = a4 >> 0x38\n 15792: u8 [a0 + 0x1f] = a5\n 15795: a5 = a4 >> 0x30\n 15798: u8 [a0 + 0x1e] = a5\n 15801: a5 = a4 >> 0x28\n 15804: u8 [a0 + 0x1d] = a5\n 15807: a5 = a4 >> 0x20\n 15810: u8 [a0 + 0x1c] = a5\n 15813: a5 = a4 >> 0x18\n 15816: u8 [a0 + 0x1b] = a5\n 15819: a5 = a4 >> 0x10\n 15822: u8 [a0 + 0x1a] = a5\n 15825: a5 = a4 >> 0x8\n 15828: u8 [a0 + 0x19] = a5\n 15831: u8 [a0 + 0x18] = a4\n 15834: u8 [a0 + 0x10] = a3\n 15837: a4 = a3 >> 0x38\n 15840: u8 [a0 + 0x17] = a4\n 15843: a4 = a3 >> 0x30\n 15846: u8 [a0 + 0x16] = a4\n 15849: a4 = a3 >> 0x28\n 15852: u8 [a0 + 0x15] = a4\n 15855: a4 = a3 >> 0x20\n 15858: u8 [a0 + 0x14] = a4\n 15861: a4 = a3 >> 0x18\n 15864: u8 [a0 + 0x13] = a4\n 15867: a4 = a3 >> 0x10\n 15870: u8 [a0 + 0x12] = a4\n 15873: a3 = a3 >> 0x8\n 15876: u8 [a0 + 0x11] = a3\n 15879: u8 [a0 + 0x8] = a2\n 15882: a3 = a2 >> 0x38\n 15885: u8 [a0 + 0xf] = a3\n 15888: a3 = a2 >> 0x30\n 15891: u8 [a0 + 0xe] = a3\n 15894: a3 = a2 >> 0x28\n 15897: u8 [a0 + 0xd] = a3\n 15900: a3 = a2 >> 0x20\n 15903: u8 [a0 + 0xc] = a3\n 15906: a3 = a2 >> 0x18\n 15909: u8 [a0 + 0xb] = a3\n 15912: a3 = a2 >> 0x10\n 15915: u8 [a0 + 0xa] = a3\n 15918: a2 = a2 >> 0x8\n 15921: u8 [a0 + 0x9] = a2\n 15924: u8 [a0] = a1\n 15926: a2 = a1 >> 0x38\n 15929: u8 [a0 + 0x7] = a2\n 15932: a2 = a1 >> 0x30\n 15935: u8 [a0 + 0x6] = a2\n 15938: a2 = a1 >> 0x28\n 15941: u8 [a0 + 0x5] = a2\n 15944: a2 = a1 >> 0x20\n 15947: u8 [a0 + 0x4] = a2\n 15950: a2 = a1 >> 0x18\n 15953: u8 [a0 + 0x3] = a2\n 15956: a2 = a1 >> 0x10\n 15959: u8 [a0 + 0x2] = a2\n 15962: a1 = a1 >> 0x8\n 15965: u8 [a0 + 0x1] = a1\n 15968: a0 = u64 [s1 + 0x40]\n 15971: u64 [s1 + 0xf8] = a0\n 15975: a0 = u64 [s1 + 0x48]\n 15978: u64 [s1 + 0xf0] = a0\n 15982: a0 = u64 [s1 + 0x50]\n 15985: u64 [s1 + 0xe8] = a0\n 15989: a0 = u64 [s1 + 0x38]\n 15992: u64 [s1 + 0xe0] = a0\n 15996: u64 [s1 + 280] = 0\n 16000: u64 [s1 + 272] = 0\n 16004: u64 [s1 + 264] = 0\n 16008: a0 = s1 + 0x100\n 16012: a1 = s1 + 0xe0\n 16016: u64 [s1 + 256] = 0x3\n 16021: ra = 218, jump @221\n      : @245 [@dyn 109] (gas: 30)\n 16027: i32 a0 = s1 + 0x1e0\n 16031: ecalli 4 // 'caller'\n 16033: a0 = u32 [s1 + 0x1f0]\n 16037: u64 [s1 + 0x48] = a0\n 16040: a0 = u64 [s1 + 0x1e8]\n 16044: u64 [s1 + 0x40] = a0\n 16047: a0 = u64 [s1 + 0x1e0]\n 16051: u64 [s1 + 0x58] = a0\n 16054: a0 = sp + 0xffffffffffffffe0\n 16057: a0 = a0 & 0xffffffffffffffe0\n 16060: u64 [s1 + 0x50] = a0\n 16063: sp = a0\n 16065: u64 [a0 + 24] = 0\n 16068: u64 [a0 + 16] = 0\n 16071: u64 [a0 + 8] = 0\n 16074: u64 [a0 + 0] = 0\n 16076: i32 a0 = a0 + 0\n 16078: ecalli 14 // 'value_transferred'\n 16080: a1 = u64 [s1 + 0x50]\n 16083: a0 = u64 [a1 + 0x18]\n 16086: u64 [s1 + 0x8] = a0\n 16089: a0 = u64 [a1 + 0x10]\n 16092: u64 [s1 + 0x10] = a0\n 16095: a0 = u64 [a1 + 0x8]\n 16098: u64 [s1 + 0x18] = a0\n 16101: a0 = u64 [a1]\n 16103: u64 [s1 + 0x20] = a0\n 16106: a0 = 0x40\n 16109: a1 = 0x20\n 16112: ra = 220, jump @0\n      : @246 [@dyn 110] (gas: 103)\n 16118: a1 = u8 [a0 + 0x11]\n 16121: a2 = u8 [a0 + 0x10]\n 16124: a3 = u8 [a0 + 0x12]\n 16127: a4 = u8 [a0 + 0x13]\n 16130: a1 = a1 << 0x8\n 16133: a1 = a1 | a2\n 16136: a3 = a3 << 0x10\n 16139: a4 = a4 << 0x18\n 16142: a3 = a3 | a4\n 16145: a1 = a1 | a3\n 16148: a2 = u8 [a0 + 0x15]\n 16151: a3 = u8 [a0 + 0x14]\n 16154: a4 = u8 [a0 + 0x16]\n 16157: a5 = u8 [a0 + 0x17]\n 16160: a2 = a2 << 0x8\n 16163: a2 = a2 | a3\n 16166: a4 = a4 << 0x10\n 16169: a5 = a5 << 0x18\n 16172: a4 = a4 | a5\n 16175: a2 = a2 | a4\n 16178: a2 = a2 << 0x20\n 16181: t0 = a2 | a1\n 16184: a2 = u8 [a0 + 0x1]\n 16187: a3 = u8 [a0]\n 16189: a4 = u8 [a0 + 0x2]\n 16192: a5 = u8 [a0 + 0x3]\n 16195: a2 = a2 << 0x8\n 16198: a2 = a2 | a3\n 16201: a4 = a4 << 0x10\n 16204: a5 = a5 << 0x18\n 16207: a4 = a4 | a5\n 16210: a2 = a2 | a4\n 16213: a3 = u8 [a0 + 0x5]\n 16216: a4 = u8 [a0 + 0x4]\n 16219: a5 = u8 [a0 + 0x6]\n 16222: a1 = u8 [a0 + 0x7]\n 16225: a3 = a3 << 0x8\n 16228: a3 = a3 | a4\n 16231: a5 = a5 << 0x10\n 16234: a1 = a1 << 0x18\n 16237: a1 = a1 | a5\n 16240: a1 = a1 | a3\n 16243: a1 = a1 << 0x20\n 16246: t1 = a1 | a2\n 16249: a1 = u8 [a0 + 0x19]\n 16252: a3 = u8 [a0 + 0x18]\n 16255: a4 = u8 [a0 + 0x1a]\n 16258: a5 = u8 [a0 + 0x1b]\n 16261: a1 = a1 << 0x8\n 16264: a1 = a1 | a3\n 16267: a4 = a4 << 0x10\n 16270: a5 = a5 << 0x18\n 16273: a4 = a4 | a5\n 16276: a1 = a1 | a4\n 16279: a3 = u8 [a0 + 0x1d]\n 16282: a4 = u8 [a0 + 0x1c]\n 16285: a5 = u8 [a0 + 0x1e]\n 16288: a2 = u8 [a0 + 0x1f]\n 16291: a3 = a3 << 0x8\n 16294: a3 = a3 | a4\n 16297: a5 = a5 << 0x10\n 16300: a2 = a2 << 0x18\n 16303: a2 = a2 | a5\n 16306: a2 = a2 | a3\n 16309: a2 = a2 << 0x20\n 16312: a3 = a2 | a1\n 16315: a1 = u8 [a0 + 0x9]\n 16318: a2 = u8 [a0 + 0x8]\n 16321: a4 = u8 [a0 + 0xa]\n 16324: a5 = u8 [a0 + 0xb]\n 16327: a1 = a1 << 0x8\n 16330: a1 = a1 | a2\n 16333: a4 = a4 << 0x10\n 16336: a5 = a5 << 0x18\n 16339: a4 = a4 | a5\n 16342: a1 = a1 | a4\n 16345: a2 = u8 [a0 + 0xd]\n 16348: a4 = u8 [a0 + 0xc]\n 16351: a5 = u8 [a0 + 0xe]\n 16354: a0 = u8 [a0 + 0xf]\n 16357: a2 = a2 << 0x8\n 16360: a2 = a2 | a4\n 16363: a5 = a5 << 0x10\n 16366: a0 = a0 << 0x18\n 16369: a0 = a0 | a5\n 16372: a0 = a0 | a2\n 16375: a0 = a0 << 0x20\n 16378: a0 = a0 | a1\n 16381: a2 = reverse a0\n 16383: a3 = reverse a3\n 16385: a1 = reverse t1\n 16387: a0 = reverse t0\n 16389: u64 [s1 + 0x38] = a0\n 16392: u64 [s1 + 0x28] = a1\n 16395: a0 = a0 | a1\n 16398: a1 = a3 | a2\n 16401: a1 = a1 | a0\n 16404: a1 = a1 >> 0x20\n 16407: u64 [s1 + 0x30] = a2\n 16410: a0 = a0 | a2\n 16413: a0 = a0 << 0x20\n 16416: a0 = a0 | a1\n 16419: jump @268 if a0 != 0\n      : @247 (gas: 19)\n 16423: a0 = u64 [s1 + 0x58]\n 16426: a0 = reverse a0\n 16428: a0 = a0 << 0x20\n 16431: a1 = u64 [s1 + 0x40]\n 16434: a1 = reverse a1\n 16436: a2 = a1 >> 0x20\n 16439: a0 = a0 | a2\n 16442: u64 [s1 + 0x40] = a0\n 16445: a1 = a1 << 0x20\n 16448: a0 = u64 [s1 + 0x48]\n 16451: a0 = reverse a0\n 16453: a0 = a0 >> 0x20\n 16456: a0 = a0 | a1\n 16459: u64 [s1] = a0\n 16461: i32 a0 = a3 + 0\n 16463: a1 = 0x20\n 16466: u64 [s1 + 0x50] = a0\n 16469: u64 [s1 + 0x48] = a3\n 16472: ra = 222, jump @0\n      : @248 [@dyn 111] (gas: 64)\n 16478: a1 = u64 [s1]\n 16480: a1 = reverse a1\n 16482: a2 = u64 [s1 + 0x40]\n 16485: a2 = reverse a2\n 16487: a4 = u64 [s1 + 0x58]\n 16490: a3 = a4 >> 0x18\n 16493: u8 [a0 + 0xf] = a3\n 16496: a3 = a4 >> 0x10\n 16499: u8 [a0 + 0xe] = a3\n 16502: a3 = a4 >> 0x8\n 16505: u8 [a0 + 0xd] = a3\n 16508: u8 [a0 + 0xc] = a4\n 16511: u8 [a0 + 11] = 0\n 16514: u8 [a0 + 10] = 0\n 16517: u8 [a0 + 9] = 0\n 16520: u8 [a0 + 8] = 0\n 16523: u8 [a0 + 7] = 0\n 16526: u8 [a0 + 6] = 0\n 16529: u8 [a0 + 5] = 0\n 16532: u8 [a0 + 4] = 0\n 16535: u8 [a0 + 3] = 0\n 16538: u8 [a0 + 2] = 0\n 16541: u8 [a0 + 1] = 0\n 16544: u8 [a0 + 0] = 0\n 16546: u8 [a0 + 0x10] = a2\n 16549: u8 [a0 + 0x18] = a1\n 16552: a3 = a2 >> 0x38\n 16555: u8 [a0 + 0x17] = a3\n 16558: a3 = a2 >> 0x30\n 16561: u8 [a0 + 0x16] = a3\n 16564: a3 = a2 >> 0x28\n 16567: u8 [a0 + 0x15] = a3\n 16570: a3 = a2 >> 0x20\n 16573: u8 [a0 + 0x14] = a3\n 16576: a3 = a2 >> 0x18\n 16579: u8 [a0 + 0x13] = a3\n 16582: a3 = a2 >> 0x10\n 16585: u8 [a0 + 0x12] = a3\n 16588: a2 = a2 >> 0x8\n 16591: u8 [a0 + 0x11] = a2\n 16594: a2 = a1 >> 0x38\n 16597: u8 [a0 + 0x1f] = a2\n 16600: a2 = a1 >> 0x30\n 16603: u8 [a0 + 0x1e] = a2\n 16606: a2 = a1 >> 0x28\n 16609: u8 [a0 + 0x1d] = a2\n 16612: a2 = a1 >> 0x20\n 16615: u8 [a0 + 0x1c] = a2\n 16618: a2 = a1 >> 0x18\n 16621: u8 [a0 + 0x1b] = a2\n 16624: a2 = a1 >> 0x10\n 16627: u8 [a0 + 0x1a] = a2\n 16630: a1 = a1 >> 0x8\n 16633: a2 = u64 [s1 + 0x30]\n 16636: a3 = u64 [s1 + 0x28]\n 16639: a2 = a2 | a3\n 16642: a3 = 0xffffffe0\n 16652: a4 = u64 [s1 + 0x48]\n 16655: a3 = a4 <u a3\n 16658: a4 = u64 [s1 + 0x38]\n 16661: a3 = 0 if a4 != 0\n 16663: a3 = 0 if a2 != 0\n 16665: u8 [a0 + 0x19] = a1\n 16668: jump @268 if a3 == 0\n      : @249 (gas: 4)\n 16672: a0 = u64 [s1 + 0x50]\n 16675: i32 a0 = a0 + 0x20\n 16678: a1 = 0x20\n 16681: ra = 224, jump @0\n      : @250 [@dyn 112] (gas: 71)\n 16687: a1 = u64 [s1 + 0x8]\n 16690: a1 = reverse a1\n 16692: a2 = u64 [s1 + 0x10]\n 16695: a2 = reverse a2\n 16697: a3 = u64 [s1 + 0x18]\n 16700: a3 = reverse a3\n 16702: a4 = u64 [s1 + 0x20]\n 16705: a4 = reverse a4\n 16707: a5 = a4 >> 0x38\n 16710: u8 [a0 + 0x1f] = a5\n 16713: a5 = a4 >> 0x30\n 16716: u8 [a0 + 0x1e] = a5\n 16719: a5 = a4 >> 0x28\n 16722: u8 [a0 + 0x1d] = a5\n 16725: a5 = a4 >> 0x20\n 16728: u8 [a0 + 0x1c] = a5\n 16731: a5 = a4 >> 0x18\n 16734: u8 [a0 + 0x1b] = a5\n 16737: a5 = a4 >> 0x10\n 16740: u8 [a0 + 0x1a] = a5\n 16743: a5 = a4 >> 0x8\n 16746: u8 [a0 + 0x19] = a5\n 16749: u8 [a0 + 0x18] = a4\n 16752: u8 [a0 + 0x10] = a3\n 16755: a4 = a3 >> 0x38\n 16758: u8 [a0 + 0x17] = a4\n 16761: a4 = a3 >> 0x30\n 16764: u8 [a0 + 0x16] = a4\n 16767: a4 = a3 >> 0x28\n 16770: u8 [a0 + 0x15] = a4\n 16773: a4 = a3 >> 0x20\n 16776: u8 [a0 + 0x14] = a4\n 16779: a4 = a3 >> 0x18\n 16782: u8 [a0 + 0x13] = a4\n 16785: a4 = a3 >> 0x10\n 16788: u8 [a0 + 0x12] = a4\n 16791: a3 = a3 >> 0x8\n 16794: u8 [a0 + 0x11] = a3\n 16797: u8 [a0 + 0x8] = a2\n 16800: a3 = a2 >> 0x38\n 16803: u8 [a0 + 0xf] = a3\n 16806: a3 = a2 >> 0x30\n 16809: u8 [a0 + 0xe] = a3\n 16812: a3 = a2 >> 0x28\n 16815: u8 [a0 + 0xd] = a3\n 16818: a3 = a2 >> 0x20\n 16821: u8 [a0 + 0xc] = a3\n 16824: a3 = a2 >> 0x18\n 16827: u8 [a0 + 0xb] = a3\n 16830: a3 = a2 >> 0x10\n 16833: u8 [a0 + 0xa] = a3\n 16836: a2 = a2 >> 0x8\n 16839: u8 [a0 + 0x9] = a2\n 16842: u8 [a0] = a1\n 16844: a2 = a1 >> 0x38\n 16847: u8 [a0 + 0x7] = a2\n 16850: a2 = a1 >> 0x30\n 16853: u8 [a0 + 0x6] = a2\n 16856: a2 = a1 >> 0x28\n 16859: u8 [a0 + 0x5] = a2\n 16862: a2 = a1 >> 0x20\n 16865: u8 [a0 + 0x4] = a2\n 16868: a2 = a1 >> 0x18\n 16871: u8 [a0 + 0x3] = a2\n 16874: a2 = a1 >> 0x10\n 16877: u8 [a0 + 0x2] = a2\n 16880: a1 = a1 >> 0x8\n 16883: u8 [a0 + 0x1] = a1\n 16886: a1 = 0x40\n 16889: a0 = u64 [s1 + 0x50]\n 16892: ra = 226, jump @0\n      : @251 [@dyn 113] (gas: 19)\n 16898: a1 = u64 [0x20000]\n 16903: a2 = u64 [0x20008]\n 16908: a3 = u64 [0x20010]\n 16913: a4 = u64 [0x20018]\n 16918: u64 [s1 + 0x258] = a1\n 16922: u64 [s1 + 0x250] = a2\n 16926: u64 [s1 + 0x248] = a3\n 16930: u64 [s1 + 0x240] = a4\n 16934: i32 a2 = a0 + 0\n 16936: i32 a0 = s1 + 0x240\n 16940: a1 = 0x1\n 16943: a3 = 0x40\n 16946: ecalli 5 // 'deposit_event'\n 16948: sp = s0 + 0xfffffffffffffd80\n 16952: ra = u64 [sp + 0x278]\n 16956: s0 = u64 [sp + 0x270]\n 16960: s1 = u64 [sp + 0x268]\n 16964: sp = sp + 0x280\n 16968: ret\n      : @252 (gas: 3)\n 16970: a0 = 0x40\n 16973: a1 = 0x20\n 16976: ra = 228, jump @0\n      : @253 [@dyn 114] (gas: 104)\n 16982: a1 = u8 [a0 + 0x11]\n 16985: a2 = u8 [a0 + 0x10]\n 16988: a3 = u8 [a0 + 0x12]\n 16991: a4 = u8 [a0 + 0x13]\n 16994: a1 = a1 << 0x8\n 16997: a1 = a1 | a2\n 17000: a3 = a3 << 0x10\n 17003: a4 = a4 << 0x18\n 17006: a3 = a3 | a4\n 17009: a1 = a1 | a3\n 17012: a2 = u8 [a0 + 0x15]\n 17015: a3 = u8 [a0 + 0x14]\n 17018: a4 = u8 [a0 + 0x16]\n 17021: a5 = u8 [a0 + 0x17]\n 17024: a2 = a2 << 0x8\n 17027: a2 = a2 | a3\n 17030: a4 = a4 << 0x10\n 17033: a5 = a5 << 0x18\n 17036: a4 = a4 | a5\n 17039: a2 = a2 | a4\n 17042: a2 = a2 << 0x20\n 17045: t0 = a2 | a1\n 17048: a2 = u8 [a0 + 0x1]\n 17051: a3 = u8 [a0]\n 17053: a4 = u8 [a0 + 0x2]\n 17056: a5 = u8 [a0 + 0x3]\n 17059: a2 = a2 << 0x8\n 17062: a2 = a2 | a3\n 17065: a4 = a4 << 0x10\n 17068: a5 = a5 << 0x18\n 17071: a4 = a4 | a5\n 17074: a2 = a2 | a4\n 17077: a3 = u8 [a0 + 0x5]\n 17080: a4 = u8 [a0 + 0x4]\n 17083: a5 = u8 [a0 + 0x6]\n 17086: a1 = u8 [a0 + 0x7]\n 17089: a3 = a3 << 0x8\n 17092: a3 = a3 | a4\n 17095: a5 = a5 << 0x10\n 17098: a1 = a1 << 0x18\n 17101: a1 = a1 | a5\n 17104: a1 = a1 | a3\n 17107: a1 = a1 << 0x20\n 17110: t1 = a1 | a2\n 17113: a1 = u8 [a0 + 0x19]\n 17116: a3 = u8 [a0 + 0x18]\n 17119: a4 = u8 [a0 + 0x1a]\n 17122: a5 = u8 [a0 + 0x1b]\n 17125: a1 = a1 << 0x8\n 17128: a1 = a1 | a3\n 17131: a4 = a4 << 0x10\n 17134: a5 = a5 << 0x18\n 17137: a4 = a4 | a5\n 17140: a1 = a1 | a4\n 17143: a3 = u8 [a0 + 0x1d]\n 17146: a4 = u8 [a0 + 0x1c]\n 17149: a5 = u8 [a0 + 0x1e]\n 17152: a2 = u8 [a0 + 0x1f]\n 17155: a3 = a3 << 0x8\n 17158: a3 = a3 | a4\n 17161: a5 = a5 << 0x10\n 17164: a2 = a2 << 0x18\n 17167: a2 = a2 | a5\n 17170: a2 = a2 | a3\n 17173: a2 = a2 << 0x20\n 17176: a3 = a2 | a1\n 17179: a1 = u8 [a0 + 0x9]\n 17182: a2 = u8 [a0 + 0x8]\n 17185: a4 = u8 [a0 + 0xa]\n 17188: a5 = u8 [a0 + 0xb]\n 17191: a1 = a1 << 0x8\n 17194: a1 = a1 | a2\n 17197: a4 = a4 << 0x10\n 17200: a5 = a5 << 0x18\n 17203: a4 = a4 | a5\n 17206: a1 = a1 | a4\n 17209: a2 = u8 [a0 + 0xd]\n 17212: a4 = u8 [a0 + 0xc]\n 17215: a5 = u8 [a0 + 0xe]\n 17218: a0 = u8 [a0 + 0xf]\n 17221: a2 = a2 << 0x8\n 17224: a2 = a2 | a4\n 17227: a5 = a5 << 0x10\n 17230: a0 = a0 << 0x18\n 17233: a0 = a0 | a5\n 17236: a0 = a0 | a2\n 17239: a0 = a0 << 0x20\n 17242: a0 = a0 | a1\n 17245: a4 = reverse a0\n 17247: a1 = reverse a3\n 17249: a2 = reverse t1\n 17251: a0 = reverse t0\n 17253: u64 [s1 + 0x58] = a0\n 17256: u64 [s1 + 0x48] = a2\n 17259: a0 = a0 | a2\n 17262: a2 = a1\n 17264: a1 = a1 | a4\n 17267: a1 = a1 | a0\n 17270: a1 = a1 >> 0x20\n 17273: u64 [s1 + 0x50] = a4\n 17276: a0 = a0 | a4\n 17279: a0 = a0 << 0x20\n 17282: a0 = a0 | a1\n 17285: jump @268 if a0 != 0\n      : @254 (gas: 5)\n 17289: u64 [s1 + 0x40] = a2\n 17292: i32 a0 = a2 + 0\n 17294: a1 = 0x20\n 17297: u64 [s1 + 0x38] = a0\n 17300: ra = 230, jump @0\n      : @255 [@dyn 115] (gas: 51)\n 17306: u8 [a0 + 31] = 0\n 17309: u8 [a0 + 30] = 0\n 17312: u8 [a0 + 29] = 0\n 17315: u8 [a0 + 28] = 0\n 17318: u8 [a0 + 27] = 0\n 17321: u8 [a0 + 26] = 0\n 17324: u8 [a0 + 25] = 0\n 17327: u8 [a0 + 24] = 0\n 17330: u8 [a0 + 23] = 0\n 17333: u8 [a0 + 22] = 0\n 17336: u8 [a0 + 21] = 0\n 17339: u8 [a0 + 20] = 0\n 17342: u8 [a0 + 19] = 0\n 17345: u8 [a0 + 18] = 0\n 17348: u8 [a0 + 17] = 0\n 17351: u8 [a0 + 16] = 0\n 17354: u8 [a0 + 15] = 0\n 17357: u8 [a0 + 14] = 0\n 17360: u8 [a0 + 13] = 0\n 17363: u8 [a0 + 12] = 0\n 17366: u8 [a0 + 11] = 0\n 17369: u8 [a0 + 10] = 0\n 17372: u8 [a0 + 9] = 0\n 17375: u8 [a0 + 8] = 0\n 17378: u8 [a0 + 7] = 0\n 17381: u8 [a0 + 6] = 0\n 17384: u8 [a0 + 5] = 0\n 17387: u8 [a0 + 4] = 0\n 17390: u8 [a0 + 3] = 0xa0\n 17395: u8 [a0 + 2] = 0x79\n 17399: u8 [a0 + 1] = 0xc3\n 17404: u8 [a0 + 0] = 0x8\n 17407: a1 = u64 [s1 + 0x40]\n 17410: a0 = a1 + 0x4\n 17413: a1 = a0 <u a1\n 17416: a3 = u64 [s1 + 0x58]\n 17419: a2 = a3 + a1\n 17422: a3 = a2 <u a3\n 17425: a3 = a1 if a1 == 0\n 17428: a1 = u64 [s1 + 0x50]\n 17431: a3 = a3 + a1\n 17434: a1 = a3 <u a1\n 17437: a4 = u64 [s1 + 0x48]\n 17440: a4 = a4 + a1\n 17443: u64 [s1 + 0x68] = a2\n 17446: u64 [s1 + 0x60] = a0\n 17449: u64 [s1 + 0x70] = a3\n 17452: a0 = s1 + 0x80\n 17456: a1 = s1 + 0x60\n 17459: u64 [s1 + 0x78] = a4\n 17462: ra = 232, jump @197\n      : @256 [@dyn 116] (gas: 5)\n 17468: a0 = u64 [s1 + 0x88]\n 17472: t0 = u64 [s1 + 0x98]\n 17476: t1 = u64 [s1 + 0x80]\n 17480: a3 = u64 [s1 + 0x90]\n 17484: jump @267\n      : @257 (gas: 3)\n 17487: a0 = 0x40\n 17490: a1 = 0x20\n 17493: ra = 234, jump @0\n      : @258 [@dyn 117] (gas: 104)\n 17499: a1 = u8 [a0 + 0x11]\n 17502: a2 = u8 [a0 + 0x10]\n 17505: a3 = u8 [a0 + 0x12]\n 17508: a4 = u8 [a0 + 0x13]\n 17511: a1 = a1 << 0x8\n 17514: a1 = a1 | a2\n 17517: a3 = a3 << 0x10\n 17520: a4 = a4 << 0x18\n 17523: a3 = a3 | a4\n 17526: a1 = a1 | a3\n 17529: a2 = u8 [a0 + 0x15]\n 17532: a3 = u8 [a0 + 0x14]\n 17535: a4 = u8 [a0 + 0x16]\n 17538: a5 = u8 [a0 + 0x17]\n 17541: a2 = a2 << 0x8\n 17544: a2 = a2 | a3\n 17547: a4 = a4 << 0x10\n 17550: a5 = a5 << 0x18\n 17553: a4 = a4 | a5\n 17556: a2 = a2 | a4\n 17559: a2 = a2 << 0x20\n 17562: t0 = a2 | a1\n 17565: a2 = u8 [a0 + 0x1]\n 17568: a3 = u8 [a0]\n 17570: a4 = u8 [a0 + 0x2]\n 17573: a5 = u8 [a0 + 0x3]\n 17576: a2 = a2 << 0x8\n 17579: a2 = a2 | a3\n 17582: a4 = a4 << 0x10\n 17585: a5 = a5 << 0x18\n 17588: a4 = a4 | a5\n 17591: a2 = a2 | a4\n 17594: a3 = u8 [a0 + 0x5]\n 17597: a4 = u8 [a0 + 0x4]\n 17600: a5 = u8 [a0 + 0x6]\n 17603: a1 = u8 [a0 + 0x7]\n 17606: a3 = a3 << 0x8\n 17609: a3 = a3 | a4\n 17612: a5 = a5 << 0x10\n 17615: a1 = a1 << 0x18\n 17618: a1 = a1 | a5\n 17621: a1 = a1 | a3\n 17624: a1 = a1 << 0x20\n 17627: t1 = a1 | a2\n 17630: a1 = u8 [a0 + 0x19]\n 17633: a3 = u8 [a0 + 0x18]\n 17636: a4 = u8 [a0 + 0x1a]\n 17639: a5 = u8 [a0 + 0x1b]\n 17642: a1 = a1 << 0x8\n 17645: a1 = a1 | a3\n 17648: a4 = a4 << 0x10\n 17651: a5 = a5 << 0x18\n 17654: a4 = a4 | a5\n 17657: a1 = a1 | a4\n 17660: a3 = u8 [a0 + 0x1d]\n 17663: a4 = u8 [a0 + 0x1c]\n 17666: a5 = u8 [a0 + 0x1e]\n 17669: a2 = u8 [a0 + 0x1f]\n 17672: a3 = a3 << 0x8\n 17675: a3 = a3 | a4\n 17678: a5 = a5 << 0x10\n 17681: a2 = a2 << 0x18\n 17684: a2 = a2 | a5\n 17687: a2 = a2 | a3\n 17690: a2 = a2 << 0x20\n 17693: a3 = a2 | a1\n 17696: a1 = u8 [a0 + 0x9]\n 17699: a2 = u8 [a0 + 0x8]\n 17702: a4 = u8 [a0 + 0xa]\n 17705: a5 = u8 [a0 + 0xb]\n 17708: a1 = a1 << 0x8\n 17711: a1 = a1 | a2\n 17714: a4 = a4 << 0x10\n 17717: a5 = a5 << 0x18\n 17720: a4 = a4 | a5\n 17723: a1 = a1 | a4\n 17726: a2 = u8 [a0 + 0xd]\n 17729: a4 = u8 [a0 + 0xc]\n 17732: a5 = u8 [a0 + 0xe]\n 17735: a0 = u8 [a0 + 0xf]\n 17738: a2 = a2 << 0x8\n 17741: a2 = a2 | a4\n 17744: a5 = a5 << 0x10\n 17747: a0 = a0 << 0x18\n 17750: a0 = a0 | a5\n 17753: a0 = a0 | a2\n 17756: a0 = a0 << 0x20\n 17759: a0 = a0 | a1\n 17762: a4 = reverse a0\n 17764: a1 = reverse a3\n 17766: a2 = reverse t1\n 17768: a0 = reverse t0\n 17770: u64 [s1 + 0x58] = a0\n 17773: u64 [s1 + 0x48] = a2\n 17776: a0 = a0 | a2\n 17779: a2 = a1\n 17781: a1 = a1 | a4\n 17784: a1 = a1 | a0\n 17787: a1 = a1 >> 0x20\n 17790: u64 [s1 + 0x50] = a4\n 17793: a0 = a0 | a4\n 17796: a0 = a0 << 0x20\n 17799: a0 = a0 | a1\n 17802: jump @268 if a0 != 0\n      : @259 (gas: 5)\n 17806: u64 [s1 + 0x40] = a2\n 17809: i32 a0 = a2 + 0\n 17811: a1 = 0x20\n 17814: u64 [s1 + 0x38] = a0\n 17817: ra = 236, jump @0\n      : @260 [@dyn 118] (gas: 51)\n 17823: u8 [a0 + 31] = 0\n 17826: u8 [a0 + 30] = 0\n 17829: u8 [a0 + 29] = 0\n 17832: u8 [a0 + 28] = 0\n 17835: u8 [a0 + 27] = 0\n 17838: u8 [a0 + 26] = 0\n 17841: u8 [a0 + 25] = 0\n 17844: u8 [a0 + 24] = 0\n 17847: u8 [a0 + 23] = 0\n 17850: u8 [a0 + 22] = 0\n 17853: u8 [a0 + 21] = 0\n 17856: u8 [a0 + 20] = 0\n 17859: u8 [a0 + 19] = 0\n 17862: u8 [a0 + 18] = 0\n 17865: u8 [a0 + 17] = 0\n 17868: u8 [a0 + 16] = 0\n 17871: u8 [a0 + 15] = 0\n 17874: u8 [a0 + 14] = 0\n 17877: u8 [a0 + 13] = 0\n 17880: u8 [a0 + 12] = 0\n 17883: u8 [a0 + 11] = 0\n 17886: u8 [a0 + 10] = 0\n 17889: u8 [a0 + 9] = 0\n 17892: u8 [a0 + 8] = 0\n 17895: u8 [a0 + 7] = 0\n 17898: u8 [a0 + 6] = 0\n 17901: u8 [a0 + 5] = 0\n 17904: u8 [a0 + 4] = 0\n 17907: u8 [a0 + 3] = 0xa0\n 17912: u8 [a0 + 2] = 0x79\n 17916: u8 [a0 + 1] = 0xc3\n 17921: u8 [a0 + 0] = 0x8\n 17924: a1 = u64 [s1 + 0x40]\n 17927: a0 = a1 + 0x4\n 17930: a1 = a0 <u a1\n 17933: a3 = u64 [s1 + 0x58]\n 17936: a2 = a3 + a1\n 17939: a3 = a2 <u a3\n 17942: a3 = a1 if a1 == 0\n 17945: a1 = u64 [s1 + 0x50]\n 17948: a3 = a3 + a1\n 17951: a1 = a3 <u a1\n 17954: a4 = u64 [s1 + 0x48]\n 17957: a4 = a4 + a1\n 17960: u64 [s1 + 0xa8] = a2\n 17964: u64 [s1 + 0xa0] = a0\n 17968: u64 [s1 + 0xb0] = a3\n 17972: a0 = s1 + 0xc0\n 17976: a1 = s1 + 0xa0\n 17980: u64 [s1 + 0xb8] = a4\n 17984: ra = 238, jump @205\n      : @261 [@dyn 119] (gas: 5)\n 17990: a0 = u64 [s1 + 0xc8]\n 17994: t0 = u64 [s1 + 0xd8]\n 17998: t1 = u64 [s1 + 0xc0]\n 18002: a3 = u64 [s1 + 0xd0]\n 18006: jump @267\n      : @262 (gas: 3)\n 18009: a0 = 0x40\n 18012: a1 = 0x20\n 18015: ra = 240, jump @0\n      : @263 [@dyn 120] (gas: 104)\n 18021: a1 = u8 [a0 + 0x11]\n 18024: a2 = u8 [a0 + 0x10]\n 18027: a3 = u8 [a0 + 0x12]\n 18030: a4 = u8 [a0 + 0x13]\n 18033: a1 = a1 << 0x8\n 18036: a1 = a1 | a2\n 18039: a3 = a3 << 0x10\n 18042: a4 = a4 << 0x18\n 18045: a3 = a3 | a4\n 18048: a1 = a1 | a3\n 18051: a2 = u8 [a0 + 0x15]\n 18054: a3 = u8 [a0 + 0x14]\n 18057: a4 = u8 [a0 + 0x16]\n 18060: a5 = u8 [a0 + 0x17]\n 18063: a2 = a2 << 0x8\n 18066: a2 = a2 | a3\n 18069: a4 = a4 << 0x10\n 18072: a5 = a5 << 0x18\n 18075: a4 = a4 | a5\n 18078: a2 = a2 | a4\n 18081: a2 = a2 << 0x20\n 18084: t0 = a2 | a1\n 18087: a2 = u8 [a0 + 0x1]\n 18090: a3 = u8 [a0]\n 18092: a4 = u8 [a0 + 0x2]\n 18095: a5 = u8 [a0 + 0x3]\n 18098: a2 = a2 << 0x8\n 18101: a2 = a2 | a3\n 18104: a4 = a4 << 0x10\n 18107: a5 = a5 << 0x18\n 18110: a4 = a4 | a5\n 18113: a2 = a2 | a4\n 18116: a3 = u8 [a0 + 0x5]\n 18119: a4 = u8 [a0 + 0x4]\n 18122: a5 = u8 [a0 + 0x6]\n 18125: a1 = u8 [a0 + 0x7]\n 18128: a3 = a3 << 0x8\n 18131: a3 = a3 | a4\n 18134: a5 = a5 << 0x10\n 18137: a1 = a1 << 0x18\n 18140: a1 = a1 | a5\n 18143: a1 = a1 | a3\n 18146: a1 = a1 << 0x20\n 18149: t1 = a1 | a2\n 18152: a1 = u8 [a0 + 0x19]\n 18155: a3 = u8 [a0 + 0x18]\n 18158: a4 = u8 [a0 + 0x1a]\n 18161: a5 = u8 [a0 + 0x1b]\n 18164: a1 = a1 << 0x8\n 18167: a1 = a1 | a3\n 18170: a4 = a4 << 0x10\n 18173: a5 = a5 << 0x18\n 18176: a4 = a4 | a5\n 18179: a1 = a1 | a4\n 18182: a3 = u8 [a0 + 0x1d]\n 18185: a4 = u8 [a0 + 0x1c]\n 18188: a5 = u8 [a0 + 0x1e]\n 18191: a2 = u8 [a0 + 0x1f]\n 18194: a3 = a3 << 0x8\n 18197: a3 = a3 | a4\n 18200: a5 = a5 << 0x10\n 18203: a2 = a2 << 0x18\n 18206: a2 = a2 | a5\n 18209: a2 = a2 | a3\n 18212: a2 = a2 << 0x20\n 18215: a3 = a2 | a1\n 18218: a1 = u8 [a0 + 0x9]\n 18221: a2 = u8 [a0 + 0x8]\n 18224: a4 = u8 [a0 + 0xa]\n 18227: a5 = u8 [a0 + 0xb]\n 18230: a1 = a1 << 0x8\n 18233: a1 = a1 | a2\n 18236: a4 = a4 << 0x10\n 18239: a5 = a5 << 0x18\n 18242: a4 = a4 | a5\n 18245: a1 = a1 | a4\n 18248: a2 = u8 [a0 + 0xd]\n 18251: a4 = u8 [a0 + 0xc]\n 18254: a5 = u8 [a0 + 0xe]\n 18257: a0 = u8 [a0 + 0xf]\n 18260: a2 = a2 << 0x8\n 18263: a2 = a2 | a4\n 18266: a5 = a5 << 0x10\n 18269: a0 = a0 << 0x18\n 18272: a0 = a0 | a5\n 18275: a0 = a0 | a2\n 18278: a0 = a0 << 0x20\n 18281: a0 = a0 | a1\n 18284: a4 = reverse a0\n 18286: a1 = reverse a3\n 18288: a2 = reverse t1\n 18290: a0 = reverse t0\n 18292: u64 [s1 + 0x58] = a0\n 18295: u64 [s1 + 0x48] = a2\n 18298: a0 = a0 | a2\n 18301: a2 = a1\n 18303: a1 = a1 | a4\n 18306: a1 = a1 | a0\n 18309: a1 = a1 >> 0x20\n 18312: u64 [s1 + 0x50] = a4\n 18315: a0 = a0 | a4\n 18318: a0 = a0 << 0x20\n 18321: a0 = a0 | a1\n 18324: jump @268 if a0 != 0\n      : @264 (gas: 5)\n 18328: u64 [s1 + 0x40] = a2\n 18331: i32 a0 = a2 + 0\n 18333: a1 = 0x20\n 18336: u64 [s1 + 0x38] = a0\n 18339: ra = 242, jump @0\n      : @265 [@dyn 121] (gas: 51)\n 18345: u8 [a0 + 31] = 0\n 18348: u8 [a0 + 30] = 0\n 18351: u8 [a0 + 29] = 0\n 18354: u8 [a0 + 28] = 0\n 18357: u8 [a0 + 27] = 0\n 18360: u8 [a0 + 26] = 0\n 18363: u8 [a0 + 25] = 0\n 18366: u8 [a0 + 24] = 0\n 18369: u8 [a0 + 23] = 0\n 18372: u8 [a0 + 22] = 0\n 18375: u8 [a0 + 21] = 0\n 18378: u8 [a0 + 20] = 0\n 18381: u8 [a0 + 19] = 0\n 18384: u8 [a0 + 18] = 0\n 18387: u8 [a0 + 17] = 0\n 18390: u8 [a0 + 16] = 0\n 18393: u8 [a0 + 15] = 0\n 18396: u8 [a0 + 14] = 0\n 18399: u8 [a0 + 13] = 0\n 18402: u8 [a0 + 12] = 0\n 18405: u8 [a0 + 11] = 0\n 18408: u8 [a0 + 10] = 0\n 18411: u8 [a0 + 9] = 0\n 18414: u8 [a0 + 8] = 0\n 18417: u8 [a0 + 7] = 0\n 18420: u8 [a0 + 6] = 0\n 18423: u8 [a0 + 5] = 0\n 18426: u8 [a0 + 4] = 0\n 18429: u8 [a0 + 3] = 0xa0\n 18434: u8 [a0 + 2] = 0x79\n 18438: u8 [a0 + 1] = 0xc3\n 18443: u8 [a0 + 0] = 0x8\n 18446: a1 = u64 [s1 + 0x40]\n 18449: a0 = a1 + 0x4\n 18452: a1 = a0 <u a1\n 18455: a3 = u64 [s1 + 0x58]\n 18458: a2 = a3 + a1\n 18461: a3 = a2 <u a3\n 18464: a3 = a1 if a1 == 0\n 18467: a1 = u64 [s1 + 0x50]\n 18470: a3 = a3 + a1\n 18473: a1 = a3 <u a1\n 18476: a4 = u64 [s1 + 0x48]\n 18479: a4 = a4 + a1\n 18482: u64 [s1 + 0x168] = a2\n 18486: u64 [s1 + 0x160] = a0\n 18490: u64 [s1 + 0x170] = a3\n 18494: a0 = s1 + 0x180\n 18498: a1 = s1 + 0x160\n 18502: u64 [s1 + 0x178] = a4\n 18506: ra = 244, jump @213\n      : @266 [@dyn 122] (gas: 5)\n 18512: a0 = u64 [s1 + 0x188]\n 18516: t0 = u64 [s1 + 0x198]\n 18520: t1 = u64 [s1 + 0x180]\n 18524: a3 = u64 [s1 + 0x190]\n 18528: fallthrough\n      : @267 (gas: 27)\n 18529: a1 = u64 [s1 + 0x58]\n 18532: a4 = a0 ^ a1\n 18535: a5 = a0 <u a1\n 18538: ra = a1\n 18540: t2 = u64 [s1 + 0x40]\n 18543: a1 = t1 <u t2\n 18546: a5 = a1 if a4 == 0\n 18549: a2 = u64 [s1 + 0x50]\n 18552: a4 = a3 - a2\n 18555: a3 = a3 <u a2\n 18558: a2 = u64 [s1 + 0x48]\n 18561: a2 = t0 - a2\n 18564: a2 = a2 - a3\n 18567: a3 = a4 <u a5\n 18570: a2 = a2 - a3\n 18573: a4 = a4 - a5\n 18576: a0 = a0 - ra\n 18579: a1 = a0 - a1\n 18582: a0 = t1 - t2\n 18585: a1 = a1 | a2\n 18588: a2 = a0 | a4\n 18591: a2 = a2 | a1\n 18594: a1 = a1 | a4\n 18597: a2 = a2 >> 0x20\n 18600: a1 = a1 << 0x20\n 18603: a1 = a1 | a2\n 18606: jump @269 if a1 == 0\n      : @268 (gas: 1)\n 18609: trap\n      : @269 (gas: 4)\n 18610: i32 a1 = a0 + 0\n 18612: u64 [s1 + 0x58] = a1\n 18615: a0 = u64 [s1 + 0x38]\n 18618: ra = 246, jump @0\n      : @270 [@dyn 123] (gas: 6)\n 18624: i32 a1 = a0 + 0\n 18626: a0 = 0x1\n 18629: a2 = u64 [s1 + 0x58]\n 18632: ra = 0xf8\n 18636: ecalli 11 // 'seal_return'\n 18638: fallthrough\n      : @271 [@dyn 124] (gas: 12)\n 18639: a1 = u64 [a0 + 0x10]\n 18642: a2 = u64 [a0 + 0x18]\n 18645: a3 = u64 [a0 + 0x8]\n 18648: a0 = u64 [a0]\n 18650: a2 = a2 | a3\n 18653: a3 = a0 | a1\n 18656: a3 = a3 | a2\n 18659: a3 = a3 >> 0x20\n 18662: a1 = a1 | a2\n 18665: a1 = a1 << 0x20\n 18668: a1 = a1 | a3\n 18671: jump @274 if a1 != 0\n      : @272 (gas: 7)\n 18675: sp = sp + 0xfffffffffffffff0\n 18678: u64 [sp + 0x8] = ra\n 18681: u64 [sp] = s0\n 18683: i32 a0 = a0 + 0\n 18685: a1 = 0x20\n 18688: s0 = 0x20\n 18691: ra = 250, jump @0\n      : @273 [@dyn 125] (gas: 40)\n 18697: u8 [a0 + 31] = 0\n 18700: u8 [a0 + 30] = 0\n 18703: u8 [a0 + 29] = 0\n 18706: u8 [a0 + 28] = 0\n 18709: u8 [a0 + 27] = 0\n 18712: u8 [a0 + 26] = 0\n 18715: u8 [a0 + 25] = 0\n 18718: u8 [a0 + 24] = 0\n 18721: u8 [a0 + 23] = 0\n 18724: u8 [a0 + 22] = 0\n 18727: u8 [a0 + 21] = 0\n 18730: u8 [a0 + 20] = 0x2e\n 18734: u8 [a0 + 19] = 0x77\n 18738: u8 [a0 + 18] = 0x61\n 18742: u8 [a0 + 17] = 0x72\n 18746: u8 [a0 + 16] = 0x64\n 18750: u8 [a0 + 15] = 0x68\n 18754: u8 [a0 + 14] = 0x74\n 18758: a4 = 0x69\n 18761: u8 [a0 + 0xd] = a4\n 18764: u8 [a0 + 12] = 0x77\n 18768: u8 [a0 + 0xb] = s0\n 18771: u8 [a0 + 10] = 0x6f\n 18775: u8 [a0 + 9] = 0x74\n 18779: u8 [a0 + 0x8] = s0\n 18782: a3 = 0x73\n 18785: u8 [a0 + 0x7] = a3\n 18788: u8 [a0 + 6] = 0x64\n 18792: u8 [a0 + 5] = 0x6e\n 18796: u8 [a0 + 4] = 0x75\n 18800: a2 = 0x66\n 18803: u8 [a0 + 0x3] = a2\n 18806: u8 [a0 + 0x2] = s0\n 18809: u8 [a0 + 1] = 0x6f\n 18813: a1 = 0x4e\n 18816: u8 [a0] = a1\n 18818: ra = u64 [sp + 0x8]\n 18821: s0 = u64 [sp]\n 18823: sp = sp + 0x10\n 18826: ret\n      : @274 (gas: 1)\n 18828: trap\n      : @275 (gas: 17)\n 18829: sp = sp + 0xffffffffffffffa0\n 18832: u64 [sp + 0x58] = ra\n 18835: u64 [sp + 0x50] = s0\n 18838: u64 [sp + 0x48] = s1\n 18841: a3 = u64 [a1 + 0x18]\n 18844: a4 = u64 [a1 + 0x10]\n 18847: a5 = u64 [a1 + 0x8]\n 18850: s1 = u64 [a1]\n 18852: a1 = a5 | a3\n 18855: a2 = s1 | a4\n 18858: a2 = a2 | a1\n 18861: a2 = a2 >> 0x20\n 18864: a1 = a1 | a4\n 18867: a1 = a1 << 0x20\n 18870: a1 = a1 | a2\n 18873: u64 [sp + 0x28] = a0\n 18876: jump @282 if a1 != 0\n      : @276 (gas: 19)\n 18880: a0 = s1 + 0x20\n 18883: u64 [sp + 0x30] = a0\n 18886: a0 = a0 <u s1\n 18889: a1 = a5 + a0\n 18892: u64 [sp + 0x40] = a1\n 18895: u64 [sp + 0x8] = a5\n 18898: s0 = a1 <u a5\n 18901: s0 = a0 if a0 == 0\n 18904: s0 = s0 + a4\n 18907: u64 [sp + 0x10] = a4\n 18910: a0 = s0 <u a4\n 18913: u64 [sp + 0x18] = a3\n 18916: a0 = a0 + a3\n 18919: u64 [sp + 0x38] = a0\n 18922: u64 [sp] = s1\n 18924: i32 a0 = s1 + 0\n 18926: a1 = 0x20\n 18929: s1 = 0x20\n 18932: ra = 252, jump @0\n      : @277 [@dyn 126] (gas: 45)\n 18938: u8 [a0 + 0x1f] = s1\n 18941: a1 = u64 [sp + 0x30]\n 18944: s1 = a1\n 18946: a1 = a1 | s0\n 18949: a2 = u64 [sp + 0x40]\n 18952: a4 = u64 [sp + 0x38]\n 18955: a2 = a2 | a4\n 18958: a1 = a1 | a2\n 18961: a1 = a1 >> 0x20\n 18964: u64 [sp + 0x20] = s0\n 18967: a2 = a2 | s0\n 18970: a2 = a2 << 0x20\n 18973: a1 = a1 | a2\n 18976: u8 [a0 + 30] = 0\n 18979: u8 [a0 + 29] = 0\n 18982: u8 [a0 + 28] = 0\n 18985: u8 [a0 + 27] = 0\n 18988: u8 [a0 + 26] = 0\n 18991: u8 [a0 + 25] = 0\n 18994: u8 [a0 + 24] = 0\n 18997: u8 [a0 + 23] = 0\n 19000: u8 [a0 + 22] = 0\n 19003: u8 [a0 + 21] = 0\n 19006: u8 [a0 + 20] = 0\n 19009: u8 [a0 + 19] = 0\n 19012: u8 [a0 + 18] = 0\n 19015: u8 [a0 + 17] = 0\n 19018: u8 [a0 + 16] = 0\n 19021: u8 [a0 + 15] = 0\n 19024: u8 [a0 + 14] = 0\n 19027: u8 [a0 + 13] = 0\n 19030: u8 [a0 + 12] = 0\n 19033: u8 [a0 + 11] = 0\n 19036: u8 [a0 + 10] = 0\n 19039: u8 [a0 + 9] = 0\n 19042: u8 [a0 + 8] = 0\n 19045: u8 [a0 + 7] = 0\n 19048: u8 [a0 + 6] = 0\n 19051: u8 [a0 + 5] = 0\n 19054: u8 [a0 + 4] = 0\n 19057: u8 [a0 + 3] = 0\n 19060: u8 [a0 + 2] = 0\n 19063: u8 [a0 + 1] = 0\n 19066: u8 [a0 + 0] = 0\n 19068: jump @282 if a1 != 0\n      : @278 (gas: 4)\n 19072: i32 s0 = s1 + 0\n 19074: a1 = 0x20\n 19077: a0 = s0\n 19079: ra = 254, jump @0\n      : @279 [@dyn 127] (gas: 41)\n 19085: u8 [a0 + 31] = 0x15\n 19089: u8 [a0 + 30] = 0\n 19092: u8 [a0 + 29] = 0\n 19095: u8 [a0 + 28] = 0\n 19098: u8 [a0 + 27] = 0\n 19101: u8 [a0 + 26] = 0\n 19104: u8 [a0 + 25] = 0\n 19107: u8 [a0 + 24] = 0\n 19110: u8 [a0 + 23] = 0\n 19113: u8 [a0 + 22] = 0\n 19116: u8 [a0 + 21] = 0\n 19119: u8 [a0 + 20] = 0\n 19122: u8 [a0 + 19] = 0\n 19125: u8 [a0 + 18] = 0\n 19128: u8 [a0 + 17] = 0\n 19131: u8 [a0 + 16] = 0\n 19134: u8 [a0 + 15] = 0\n 19137: u8 [a0 + 14] = 0\n 19140: u8 [a0 + 13] = 0\n 19143: u8 [a0 + 12] = 0\n 19146: u8 [a0 + 11] = 0\n 19149: u8 [a0 + 10] = 0\n 19152: u8 [a0 + 9] = 0\n 19155: u8 [a0 + 8] = 0\n 19158: u8 [a0 + 7] = 0\n 19161: u8 [a0 + 6] = 0\n 19164: u8 [a0 + 5] = 0\n 19167: u8 [a0 + 4] = 0\n 19170: u8 [a0 + 3] = 0\n 19173: u8 [a0 + 2] = 0\n 19176: u8 [a0 + 1] = 0\n 19179: a1 = u64 [sp + 0x20]\n 19182: a2 = u64 [sp + 0x38]\n 19185: a1 = a1 | a2\n 19188: a2 = 0xffffffe0\n 19198: a2 = s1 <u a2\n 19201: a3 = u64 [sp + 0x40]\n 19204: a2 = 0 if a3 != 0\n 19206: a2 = 0 if a1 != 0\n 19208: u8 [a0 + 0] = 0\n 19210: jump @282 if a2 == 0\n      : @280 (gas: 3)\n 19214: i32 a0 = s0 + 0x20\n 19217: a1 = 0x20\n 19220: ra = 256, jump @0\n      : @281 [@dyn 128] (gas: 54)\n 19226: u8 [a0 + 31] = 0\n 19229: u8 [a0 + 30] = 0\n 19232: u8 [a0 + 29] = 0\n 19235: u8 [a0 + 28] = 0\n 19238: u8 [a0 + 27] = 0\n 19241: u8 [a0 + 26] = 0\n 19244: u8 [a0 + 25] = 0\n 19247: u8 [a0 + 24] = 0\n 19250: u8 [a0 + 23] = 0\n 19253: u8 [a0 + 22] = 0\n 19256: u8 [a0 + 21] = 0\n 19259: u8 [a0 + 20] = 0x2e\n 19263: u8 [a0 + 19] = 0x77\n 19267: u8 [a0 + 18] = 0x61\n 19271: u8 [a0 + 17] = 0x72\n 19275: u8 [a0 + 16] = 0x64\n 19279: u8 [a0 + 15] = 0x68\n 19283: u8 [a0 + 14] = 0x74\n 19287: u8 [a0 + 13] = 0x69\n 19291: u8 [a0 + 12] = 0x77\n 19295: u8 [a0 + 11] = 0x20\n 19299: u8 [a0 + 10] = 0x6f\n 19303: u8 [a0 + 9] = 0x74\n 19307: u8 [a0 + 8] = 0x20\n 19311: u8 [a0 + 7] = 0x73\n 19315: u8 [a0 + 6] = 0x64\n 19319: u8 [a0 + 5] = 0x6e\n 19323: u8 [a0 + 4] = 0x75\n 19327: u8 [a0 + 3] = 0x66\n 19331: u8 [a0 + 2] = 0x20\n 19335: u8 [a0 + 1] = 0x6f\n 19339: u8 [a0 + 0] = 0x4e\n 19342: a1 = u64 [sp]\n 19344: a0 = a1 + 0x60\n 19347: a1 = a0 <u a1\n 19350: a3 = u64 [sp + 0x8]\n 19353: a2 = a3 + a1\n 19356: a3 = a2 <u a3\n 19359: a3 = a1 if a1 == 0\n 19362: a1 = u64 [sp + 0x10]\n 19365: a3 = a3 + a1\n 19368: a1 = a3 <u a1\n 19371: a4 = u64 [sp + 0x18]\n 19374: a1 = a1 + a4\n 19377: a4 = u64 [sp + 0x28]\n 19380: u64 [a4] = a0\n 19382: u64 [a4 + 0x8] = a2\n 19385: u64 [a4 + 0x10] = a3\n 19388: u64 [a4 + 0x18] = a1\n 19391: ra = u64 [sp + 0x58]\n 19394: s0 = u64 [sp + 0x50]\n 19397: s1 = u64 [sp + 0x48]\n 19400: sp = sp + 0x60\n 19403: ret\n      : @282 (gas: 1)\n 19405: trap\n      : @283 (gas: 9)\n 19406: sp = sp + 0xffffffffffffffc0\n 19409: u64 [sp + 0x38] = ra\n 19412: u64 [sp + 0x30] = s0\n 19415: u64 [sp + 0x28] = s1\n 19418: s0 = sp + 0x40\n 19421: sp = sp & 0xffffffffffffffe0\n 19424: a0 = 0x40\n 19427: a1 = 0x20\n 19430: ra = 258, jump @0\n      : @284 [@dyn 129] (gas: 97)\n 19436: a1 = u8 [a0 + 0x11]\n 19439: a2 = u8 [a0 + 0x10]\n 19442: a3 = u8 [a0 + 0x12]\n 19445: a4 = u8 [a0 + 0x13]\n 19448: a1 = a1 << 0x8\n 19451: a1 = a1 | a2\n 19454: a3 = a3 << 0x10\n 19457: a4 = a4 << 0x18\n 19460: a3 = a3 | a4\n 19463: a1 = a1 | a3\n 19466: a2 = u8 [a0 + 0x15]\n 19469: a3 = u8 [a0 + 0x14]\n 19472: a4 = u8 [a0 + 0x16]\n 19475: a5 = u8 [a0 + 0x17]\n 19478: a2 = a2 << 0x8\n 19481: a2 = a2 | a3\n 19484: a4 = a4 << 0x10\n 19487: a5 = a5 << 0x18\n 19490: a4 = a4 | a5\n 19493: a2 = a2 | a4\n 19496: a2 = a2 << 0x20\n 19499: t0 = a2 | a1\n 19502: a2 = u8 [a0 + 0x1]\n 19505: a3 = u8 [a0]\n 19507: a4 = u8 [a0 + 0x2]\n 19510: a5 = u8 [a0 + 0x3]\n 19513: a2 = a2 << 0x8\n 19516: a2 = a2 | a3\n 19519: a4 = a4 << 0x10\n 19522: a5 = a5 << 0x18\n 19525: a4 = a4 | a5\n 19528: a2 = a2 | a4\n 19531: a3 = u8 [a0 + 0x5]\n 19534: a4 = u8 [a0 + 0x4]\n 19537: a5 = u8 [a0 + 0x6]\n 19540: s1 = u8 [a0 + 0x7]\n 19543: a3 = a3 << 0x8\n 19546: a3 = a3 | a4\n 19549: a5 = a5 << 0x10\n 19552: s1 = s1 << 0x18\n 19555: a5 = a5 | s1\n 19558: a3 = a3 | a5\n 19561: a3 = a3 << 0x20\n 19564: a2 = a2 | a3\n 19567: a3 = u8 [a0 + 0x19]\n 19570: a4 = u8 [a0 + 0x18]\n 19573: a5 = u8 [a0 + 0x1a]\n 19576: s1 = u8 [a0 + 0x1b]\n 19579: a3 = a3 << 0x8\n 19582: a3 = a3 | a4\n 19585: a5 = a5 << 0x10\n 19588: s1 = s1 << 0x18\n 19591: a5 = a5 | s1\n 19594: a3 = a3 | a5\n 19597: a4 = u8 [a0 + 0x1d]\n 19600: a5 = u8 [a0 + 0x1c]\n 19603: s1 = u8 [a0 + 0x1e]\n 19606: a1 = u8 [a0 + 0x1f]\n 19609: a4 = a4 << 0x8\n 19612: a4 = a4 | a5\n 19615: s1 = s1 << 0x10\n 19618: a1 = a1 << 0x18\n 19621: a1 = a1 | s1\n 19624: a1 = a1 | a4\n 19627: a1 = a1 << 0x20\n 19630: a3 = a3 | a1\n 19633: a1 = u8 [a0 + 0x9]\n 19636: a4 = u8 [a0 + 0x8]\n 19639: a5 = u8 [a0 + 0xa]\n 19642: s1 = u8 [a0 + 0xb]\n 19645: a1 = a1 << 0x8\n 19648: a1 = a1 | a4\n 19651: a5 = a5 << 0x10\n 19654: s1 = s1 << 0x18\n 19657: a5 = a5 | s1\n 19660: a1 = a1 | a5\n 19663: a4 = u8 [a0 + 0xd]\n 19666: a5 = u8 [a0 + 0xc]\n 19669: s1 = u8 [a0 + 0xe]\n 19672: a0 = u8 [a0 + 0xf]\n 19675: a4 = a4 << 0x8\n 19678: a4 = a4 | a5\n 19681: s1 = s1 << 0x10\n 19684: a0 = a0 << 0x18\n 19687: a0 = a0 | s1\n 19690: a0 = a0 | a4\n 19693: a0 = a0 << 0x20\n 19696: a0 = a0 | a1\n 19699: s1 = reverse a0\n 19701: a0 = reverse a3\n 19703: u64 [sp + 0x8] = a0\n 19706: a0 = reverse a2\n 19708: u64 [sp + 0x18] = a0\n 19711: a0 = reverse t0\n 19713: u64 [sp + 0x10] = a0\n 19716: ecalli 10 // 'return_data_size'\n 19718: fallthrough\n      : @285 (gas: 11)\n 19719: a3 = u64 [sp + 0x8]\n 19722: a1 = u64 [sp + 0x18]\n 19725: a2 = u64 [sp + 0x10]\n 19728: a1 = a1 | a2\n 19731: a2 = a3 | s1\n 19734: a2 = a2 | a1\n 19737: a2 = a2 >> 0x20\n 19740: a1 = a1 | s1\n 19743: a1 = a1 << 0x20\n 19746: a1 = a1 | a2\n 19749: jump @292 if a1 != 0\n      : @286 (gas: 3)\n 19752: s1 = a0\n 19754: a0 = a0 >> 0x20\n 19757: jump @292 if a0 != 0\n      : @287 (gas: 5)\n 19760: i32 a0 = a3 + 0\n 19762: i32 a1 = s1 + 0\n 19764: u64 [sp + 0x18] = a1\n 19767: u64 [sp + 0x10] = a0\n 19770: ra = 260, jump @0\n      : @288 [@dyn 130] (gas: 6)\n 19776: u32 [sp + 0x20] = s1\n 19779: i32 a0 = a0 + 0\n 19781: i32 a1 = sp + 0x20\n 19784: a2 = 0\n 19786: ecalli 9 // 'return_data_copy'\n 19788: fallthrough\n      : @289 (gas: 3)\n 19789: a0 = i32 [sp + 0x20]\n 19792: a1 = u64 [sp + 0x18]\n 19795: jump @292 if a0 <u a1\n      : @290 (gas: 2)\n 19798: ecalli 10 // 'return_data_size'\n 19800: fallthrough\n      : @291 (gas: 2)\n 19801: a1 = a0 >> 0x20\n 19804: jump @293 if a1 == 0\n      : @292 (gas: 1)\n 19807: trap\n      : @293 (gas: 4)\n 19808: i32 s1 = a0 + 0\n 19810: a0 = u64 [sp + 0x10]\n 19813: a1 = s1\n 19815: ra = 262, jump @0\n      : @294 [@dyn 131] (gas: 6)\n 19821: i32 a1 = a0 + 0\n 19823: a0 = 0x1\n 19826: a2 = s1\n 19828: ra = 0x108\n 19832: ecalli 11 // 'seal_return'\n 19834: fallthrough\n      : @295 [@dyn 132] (gas: 25)\n 19835: sp = sp + 0xfffffffffffffe20\n 19839: u64 [sp + 0x1d8] = ra\n 19843: u64 [sp + 0x1d0] = s0\n 19847: u64 [sp + 0x1c8] = s1\n 19851: s0 = sp + 0x1e0\n 19855: sp = sp & 0xffffffffffffffe0\n 19858: i32 a0 = sp + 0x80\n 19862: ecalli 4 // 'caller'\n 19864: a0 = u64 [sp + 0x88]\n 19868: a1 = i32 [sp + 0x90]\n 19872: s1 = u64 [sp + 0x80]\n 19876: a0 = reverse a0\n 19878: a2 = a0 << 0x20\n 19881: a1 = reverse a1\n 19883: a1 = a1 >> 0x20\n 19886: a1 = a1 | a2\n 19889: u64 [sp + 0x38] = a1\n 19892: a0 = a0 >> 0x20\n 19895: a1 = reverse s1\n 19897: a1 = a1 << 0x20\n 19900: a0 = a0 | a1\n 19903: u64 [sp + 0x30] = a0\n 19906: a1 = 0x20\n 19909: a0 = 0\n 19911: ra = 266, jump @0\n      : @296 [@dyn 133] (gas: 56)\n 19917: a1 = u64 [sp + 0x30]\n 19920: a1 = reverse a1\n 19922: a2 = u64 [sp + 0x38]\n 19925: a2 = reverse a2\n 19927: a3 = s1 >> 0x18\n 19930: u8 [a0 + 0xf] = a3\n 19933: a3 = s1 >> 0x10\n 19936: u8 [a0 + 0xe] = a3\n 19939: a3 = s1 >> 0x8\n 19942: u8 [a0 + 0xd] = a3\n 19945: u8 [a0 + 0xc] = s1\n 19948: u8 [a0 + 11] = 0\n 19951: u8 [a0 + 10] = 0\n 19954: u8 [a0 + 9] = 0\n 19957: u8 [a0 + 8] = 0\n 19960: u8 [a0 + 7] = 0\n 19963: u8 [a0 + 6] = 0\n 19966: u8 [a0 + 5] = 0\n 19969: u8 [a0 + 4] = 0\n 19972: u8 [a0 + 3] = 0\n 19975: u8 [a0 + 2] = 0\n 19978: u8 [a0 + 1] = 0\n 19981: u8 [a0 + 0] = 0\n 19983: u8 [a0 + 0x18] = a2\n 19986: u8 [a0 + 0x10] = a1\n 19989: a3 = a2 >> 0x38\n 19992: u8 [a0 + 0x1f] = a3\n 19995: a3 = a2 >> 0x30\n 19998: u8 [a0 + 0x1e] = a3\n 20001: a3 = a2 >> 0x28\n 20004: u8 [a0 + 0x1d] = a3\n 20007: a3 = a2 >> 0x20\n 20010: u8 [a0 + 0x1c] = a3\n 20013: a3 = a2 >> 0x18\n 20016: u8 [a0 + 0x1b] = a3\n 20019: a3 = a2 >> 0x10\n 20022: u8 [a0 + 0x1a] = a3\n 20025: a2 = a2 >> 0x8\n 20028: u8 [a0 + 0x19] = a2\n 20031: a2 = a1 >> 0x38\n 20034: u8 [a0 + 0x17] = a2\n 20037: a2 = a1 >> 0x30\n 20040: u8 [a0 + 0x16] = a2\n 20043: a2 = a1 >> 0x28\n 20046: u8 [a0 + 0x15] = a2\n 20049: a2 = a1 >> 0x20\n 20052: u8 [a0 + 0x14] = a2\n 20055: a2 = a1 >> 0x18\n 20058: u8 [a0 + 0x13] = a2\n 20061: a2 = a1 >> 0x10\n 20064: u8 [a0 + 0x12] = a2\n 20067: a1 = a1 >> 0x8\n 20070: u8 [a0 + 0x11] = a1\n 20073: a0 = 0x20\n 20076: a1 = 0x20\n 20079: ra = 268, jump @0\n      : @297 [@dyn 134] (gas: 35)\n 20085: u8 [a0 + 31] = 0x5\n 20089: u8 [a0 + 30] = 0\n 20092: u8 [a0 + 29] = 0\n 20095: u8 [a0 + 28] = 0\n 20098: u8 [a0 + 27] = 0\n 20101: u8 [a0 + 26] = 0\n 20104: u8 [a0 + 25] = 0\n 20107: u8 [a0 + 24] = 0\n 20110: u8 [a0 + 23] = 0\n 20113: u8 [a0 + 22] = 0\n 20116: u8 [a0 + 21] = 0\n 20119: u8 [a0 + 20] = 0\n 20122: u8 [a0 + 19] = 0\n 20125: u8 [a0 + 18] = 0\n 20128: u8 [a0 + 17] = 0\n 20131: u8 [a0 + 16] = 0\n 20134: u8 [a0 + 15] = 0\n 20137: u8 [a0 + 14] = 0\n 20140: u8 [a0 + 13] = 0\n 20143: u8 [a0 + 12] = 0\n 20146: u8 [a0 + 11] = 0\n 20149: u8 [a0 + 10] = 0\n 20152: u8 [a0 + 9] = 0\n 20155: u8 [a0 + 8] = 0\n 20158: u8 [a0 + 7] = 0\n 20161: u8 [a0 + 6] = 0\n 20164: u8 [a0 + 5] = 0\n 20167: u8 [a0 + 4] = 0\n 20170: u8 [a0 + 3] = 0\n 20173: u8 [a0 + 2] = 0\n 20176: u8 [a0 + 1] = 0\n 20179: u8 [a0 + 0] = 0\n 20181: a1 = 0x40\n 20184: a0 = 0\n 20186: ra = 270, jump @0\n      : @298 [@dyn 135] (gas: 28)\n 20192: i32 a0 = a0 + 0\n 20194: i32 a2 = sp + 0x1a0\n 20198: a1 = 0x40\n 20201: ecalli 7 // 'hash_keccak_256'\n 20203: a0 = u64 [sp + 0x1b8]\n 20207: a1 = u64 [sp + 0x1b0]\n 20211: a2 = u64 [sp + 0x1a8]\n 20215: a3 = u64 [sp + 0x1a0]\n 20219: a0 = reverse a0\n 20221: a1 = reverse a1\n 20223: a2 = reverse a2\n 20225: a3 = reverse a3\n 20227: u64 [sp + 0x198] = a3\n 20231: u64 [sp + 0x190] = a2\n 20235: u64 [sp + 0x188] = a1\n 20239: u64 [sp + 0x180] = a0\n 20243: u64 [sp + 440] = 0\n 20247: u64 [sp + 432] = 0\n 20251: u64 [sp + 424] = 0\n 20255: u64 [sp + 416] = 0\n 20259: u32 [sp + 352] = 0x20\n 20264: i32 a1 = sp + 0x180\n 20268: i32 a3 = sp + 0x1a0\n 20272: i32 a4 = sp + 0x160\n 20276: a2 = 0xffffffffffffffff\n 20279: a0 = 0\n 20281: ecalli 6 // 'get_storage'\n 20283: fallthrough\n      : @299 (gas: 12)\n 20284: a3 = u64 [sp + 0x1b8]\n 20288: a2 = u64 [sp + 0x1b0]\n 20292: a0 = u64 [sp + 0x1a8]\n 20296: a1 = u64 [sp + 0x1a0]\n 20300: u64 [sp + 0x30] = a0\n 20303: u64 [sp + 0x20] = a3\n 20306: a0 = a0 | a3\n 20309: u64 [sp + 0x38] = a1\n 20312: u64 [sp + 0x28] = a2\n 20315: a1 = a1 | a2\n 20318: a0 = a0 | a1\n 20321: jump @308 if a0 == 0\n      : @300 (gas: 19)\n 20325: i32 a0 = sp + 0xa0\n 20329: ecalli 4 // 'caller'\n 20331: a0 = u64 [sp + 0xa8]\n 20335: a1 = i32 [sp + 0xb0]\n 20339: s1 = u64 [sp + 0xa0]\n 20343: a0 = reverse a0\n 20345: a2 = a0 << 0x20\n 20348: a1 = reverse a1\n 20350: a1 = a1 >> 0x20\n 20353: a1 = a1 | a2\n 20356: u64 [sp + 0x18] = a1\n 20359: a0 = a0 >> 0x20\n 20362: a1 = reverse s1\n 20364: a1 = a1 << 0x20\n 20367: a0 = a0 | a1\n 20370: u64 [sp + 0x10] = a0\n 20373: a1 = 0x20\n 20376: a0 = 0\n 20378: ra = 272, jump @0\n      : @301 [@dyn 136] (gas: 56)\n 20384: a1 = u64 [sp + 0x10]\n 20387: a1 = reverse a1\n 20389: a2 = u64 [sp + 0x18]\n 20392: a2 = reverse a2\n 20394: a3 = s1 >> 0x18\n 20397: u8 [a0 + 0xf] = a3\n 20400: a3 = s1 >> 0x10\n 20403: u8 [a0 + 0xe] = a3\n 20406: a3 = s1 >> 0x8\n 20409: u8 [a0 + 0xd] = a3\n 20412: u8 [a0 + 0xc] = s1\n 20415: u8 [a0 + 11] = 0\n 20418: u8 [a0 + 10] = 0\n 20421: u8 [a0 + 9] = 0\n 20424: u8 [a0 + 8] = 0\n 20427: u8 [a0 + 7] = 0\n 20430: u8 [a0 + 6] = 0\n 20433: u8 [a0 + 5] = 0\n 20436: u8 [a0 + 4] = 0\n 20439: u8 [a0 + 3] = 0\n 20442: u8 [a0 + 2] = 0\n 20445: u8 [a0 + 1] = 0\n 20448: u8 [a0 + 0] = 0\n 20450: u8 [a0 + 0x18] = a2\n 20453: u8 [a0 + 0x10] = a1\n 20456: a3 = a2 >> 0x38\n 20459: u8 [a0 + 0x1f] = a3\n 20462: a3 = a2 >> 0x30\n 20465: u8 [a0 + 0x1e] = a3\n 20468: a3 = a2 >> 0x28\n 20471: u8 [a0 + 0x1d] = a3\n 20474: a3 = a2 >> 0x20\n 20477: u8 [a0 + 0x1c] = a3\n 20480: a3 = a2 >> 0x18\n 20483: u8 [a0 + 0x1b] = a3\n 20486: a3 = a2 >> 0x10\n 20489: u8 [a0 + 0x1a] = a3\n 20492: a2 = a2 >> 0x8\n 20495: u8 [a0 + 0x19] = a2\n 20498: a2 = a1 >> 0x38\n 20501: u8 [a0 + 0x17] = a2\n 20504: a2 = a1 >> 0x30\n 20507: u8 [a0 + 0x16] = a2\n 20510: a2 = a1 >> 0x28\n 20513: u8 [a0 + 0x15] = a2\n 20516: a2 = a1 >> 0x20\n 20519: u8 [a0 + 0x14] = a2\n 20522: a2 = a1 >> 0x18\n 20525: u8 [a0 + 0x13] = a2\n 20528: a2 = a1 >> 0x10\n 20531: u8 [a0 + 0x12] = a2\n 20534: a1 = a1 >> 0x8\n 20537: u8 [a0 + 0x11] = a1\n 20540: a0 = 0x20\n 20543: a1 = 0x20\n 20546: ra = 274, jump @0\n      : @302 [@dyn 137] (gas: 35)\n 20552: u8 [a0 + 31] = 0x5\n 20556: u8 [a0 + 30] = 0\n 20559: u8 [a0 + 29] = 0\n 20562: u8 [a0 + 28] = 0\n 20565: u8 [a0 + 27] = 0\n 20568: u8 [a0 + 26] = 0\n 20571: u8 [a0 + 25] = 0\n 20574: u8 [a0 + 24] = 0\n 20577: u8 [a0 + 23] = 0\n 20580: u8 [a0 + 22] = 0\n 20583: u8 [a0 + 21] = 0\n 20586: u8 [a0 + 20] = 0\n 20589: u8 [a0 + 19] = 0\n 20592: u8 [a0 + 18] = 0\n 20595: u8 [a0 + 17] = 0\n 20598: u8 [a0 + 16] = 0\n 20601: u8 [a0 + 15] = 0\n 20604: u8 [a0 + 14] = 0\n 20607: u8 [a0 + 13] = 0\n 20610: u8 [a0 + 12] = 0\n 20613: u8 [a0 + 11] = 0\n 20616: u8 [a0 + 10] = 0\n 20619: u8 [a0 + 9] = 0\n 20622: u8 [a0 + 8] = 0\n 20625: u8 [a0 + 7] = 0\n 20628: u8 [a0 + 6] = 0\n 20631: u8 [a0 + 5] = 0\n 20634: u8 [a0 + 4] = 0\n 20637: u8 [a0 + 3] = 0\n 20640: u8 [a0 + 2] = 0\n 20643: u8 [a0 + 1] = 0\n 20646: u8 [a0 + 0] = 0\n 20648: a1 = 0x40\n 20651: a0 = 0\n 20653: ra = 276, jump @0\n      : @303 [@dyn 138] (gas: 66)\n 20659: i32 a0 = a0 + 0\n 20661: i32 a2 = sp + 0x1a0\n 20665: a1 = 0x40\n 20668: ecalli 7 // 'hash_keccak_256'\n 20670: a0 = u64 [sp + 0x1b8]\n 20674: a1 = u64 [sp + 0x1b0]\n 20678: a2 = u64 [sp + 0x1a8]\n 20682: a3 = u64 [sp + 0x1a0]\n 20686: a0 = reverse a0\n 20688: u64 [sp + 0x18] = a0\n 20691: a1 = reverse a1\n 20693: u64 [sp + 0x10] = a1\n 20696: a2 = reverse a2\n 20698: u64 [sp + 0x8] = a2\n 20701: s1 = reverse a3\n 20703: u64 [sp + 0x198] = s1\n 20707: u64 [sp + 0x190] = a2\n 20711: u64 [sp + 0x188] = a1\n 20715: u64 [sp + 0x180] = a0\n 20719: u64 [sp + 440] = 0\n 20723: u64 [sp + 432] = 0\n 20727: u64 [sp + 424] = 0\n 20731: u64 [sp + 416] = 0\n 20735: u32 [sp + 352] = 0x20\n 20740: i32 a1 = sp + 0x180\n 20744: i32 a3 = sp + 0x1a0\n 20748: i32 a4 = sp + 0x160\n 20752: a2 = 0xffffffffffffffff\n 20755: a0 = 0\n 20757: ecalli 6 // 'get_storage'\n 20759: u64 [sp + 0x198] = s1\n 20763: a0 = u64 [sp + 0x8]\n 20766: u64 [sp + 0x190] = a0\n 20770: a0 = u64 [sp + 0x10]\n 20773: u64 [sp + 0x188] = a0\n 20777: a0 = u64 [sp + 0x18]\n 20780: u64 [sp + 0x180] = a0\n 20784: u64 [sp + 440] = 0\n 20788: u64 [sp + 432] = 0\n 20792: u64 [sp + 424] = 0\n 20796: u64 [sp + 416] = 0\n 20800: i32 a1 = sp + 0x180\n 20804: i32 a3 = sp + 0x1a0\n 20808: a2 = 0xffffffffffffffff\n 20811: a4 = 0x20\n 20814: a0 = 0\n 20816: ecalli 13 // 'set_storage'\n 20818: i32 a0 = sp + 0xc0\n 20822: ecalli 4 // 'caller'\n 20824: a0 = u64 [sp + 0xc8]\n 20828: a1 = u64 [sp + 0xc0]\n 20832: a2 = i32 [sp + 0xd0]\n 20836: u64 [sp + 0xe8] = a0\n 20840: u64 [sp + 0xe0] = a1\n 20844: u32 [sp + 0xf0] = a2\n 20848: a0 = u64 [sp + 0x20]\n 20851: u64 [sp + 0x118] = a0\n 20855: a0 = u64 [sp + 0x28]\n 20858: u64 [sp + 0x110] = a0\n 20862: a0 = u64 [sp + 0x30]\n 20865: u64 [sp + 0x108] = a0\n 20869: a0 = u64 [sp + 0x38]\n 20872: u64 [sp + 0x100] = a0\n 20876: a0 = 0\n 20878: a1 = 0\n 20880: ra = 278, jump @0\n      : @304 [@dyn 139] (gas: 4)\n 20886: u64 [sp + 0x38] = a0\n 20889: a0 = 0\n 20891: a1 = 0\n 20893: ra = 280, jump @0\n      : @305 [@dyn 140] (gas: 27)\n 20899: u32 [sp + 288] = 0\n 20903: u64 [sp + 344] = 0\n 20907: u64 [sp + 336] = 0\n 20911: u64 [sp + 328] = 0\n 20915: u64 [sp + 320] = 0\n 20919: a1 = sp + 0xe0\n 20923: a1 = a1 << 0x20\n 20926: s1 = a1 >> 0x20\n 20929: a1 = sp + 0x100\n 20933: a1 = a1 << 0x20\n 20936: a1 = a1 >> 0x20\n 20939: a2 = sp + 0x140\n 20943: a2 = a2 << 0x20\n 20946: a3 = a2 | a1\n 20949: a4 = u64 [sp + 0x38]\n 20952: a4 = a4 << 0x20\n 20955: a4 = a4 >> 0x20\n 20958: a0 = a0 << 0x20\n 20961: a0 = a0 >> 0x20\n 20964: a1 = sp + 0x120\n 20968: a1 = a1 << 0x20\n 20971: a5 = a1 | a0\n 20974: a1 = 0xffffffffffffffff\n 20977: a2 = 0xffffffffffffffff\n 20980: a0 = s1\n 20982: ecalli 0 // 'call'\n 20983: fallthrough\n      : @306 (gas: 1)\n 20984: jump @314 if a0 != 0\n      : @307 (gas: 6)\n 20988: sp = s0 + 0xfffffffffffffe20\n 20992: ra = u64 [sp + 0x1d8]\n 20996: s0 = u64 [sp + 0x1d0]\n 21000: s1 = u64 [sp + 0x1c8]\n 21004: sp = sp + 0x1e0\n 21008: ret\n      : @308 (gas: 3)\n 21010: a0 = 0x40\n 21013: a1 = 0x20\n 21016: ra = 282, jump @0\n      : @309 [@dyn 141] (gas: 103)\n 21022: a1 = u8 [a0 + 0x11]\n 21025: a2 = u8 [a0 + 0x10]\n 21028: a3 = u8 [a0 + 0x12]\n 21031: a4 = u8 [a0 + 0x13]\n 21034: a1 = a1 << 0x8\n 21037: a1 = a1 | a2\n 21040: a3 = a3 << 0x10\n 21043: a4 = a4 << 0x18\n 21046: a3 = a3 | a4\n 21049: a1 = a1 | a3\n 21052: a2 = u8 [a0 + 0x15]\n 21055: a3 = u8 [a0 + 0x14]\n 21058: a4 = u8 [a0 + 0x16]\n 21061: a5 = u8 [a0 + 0x17]\n 21064: a2 = a2 << 0x8\n 21067: a2 = a2 | a3\n 21070: a4 = a4 << 0x10\n 21073: a5 = a5 << 0x18\n 21076: a4 = a4 | a5\n 21079: a2 = a2 | a4\n 21082: a2 = a2 << 0x20\n 21085: t0 = a2 | a1\n 21088: a2 = u8 [a0 + 0x1]\n 21091: a3 = u8 [a0]\n 21093: a4 = u8 [a0 + 0x2]\n 21096: a5 = u8 [a0 + 0x3]\n 21099: a2 = a2 << 0x8\n 21102: a2 = a2 | a3\n 21105: a4 = a4 << 0x10\n 21108: a5 = a5 << 0x18\n 21111: a4 = a4 | a5\n 21114: a2 = a2 | a4\n 21117: a3 = u8 [a0 + 0x5]\n 21120: a4 = u8 [a0 + 0x4]\n 21123: a5 = u8 [a0 + 0x6]\n 21126: s1 = u8 [a0 + 0x7]\n 21129: a3 = a3 << 0x8\n 21132: a3 = a3 | a4\n 21135: a5 = a5 << 0x10\n 21138: s1 = s1 << 0x18\n 21141: a5 = a5 | s1\n 21144: a3 = a3 | a5\n 21147: a3 = a3 << 0x20\n 21150: a2 = a2 | a3\n 21153: a3 = u8 [a0 + 0x19]\n 21156: a4 = u8 [a0 + 0x18]\n 21159: a5 = u8 [a0 + 0x1a]\n 21162: s1 = u8 [a0 + 0x1b]\n 21165: a3 = a3 << 0x8\n 21168: a3 = a3 | a4\n 21171: a5 = a5 << 0x10\n 21174: s1 = s1 << 0x18\n 21177: a5 = a5 | s1\n 21180: a3 = a3 | a5\n 21183: a4 = u8 [a0 + 0x1d]\n 21186: a5 = u8 [a0 + 0x1c]\n 21189: s1 = u8 [a0 + 0x1e]\n 21192: a1 = u8 [a0 + 0x1f]\n 21195: a4 = a4 << 0x8\n 21198: a4 = a4 | a5\n 21201: s1 = s1 << 0x10\n 21204: a1 = a1 << 0x18\n 21207: a1 = a1 | s1\n 21210: a1 = a1 | a4\n 21213: a1 = a1 << 0x20\n 21216: a3 = a3 | a1\n 21219: a1 = u8 [a0 + 0x9]\n 21222: a4 = u8 [a0 + 0x8]\n 21225: a5 = u8 [a0 + 0xa]\n 21228: s1 = u8 [a0 + 0xb]\n 21231: a1 = a1 << 0x8\n 21234: a1 = a1 | a4\n 21237: a5 = a5 << 0x10\n 21240: s1 = s1 << 0x18\n 21243: a5 = a5 | s1\n 21246: a1 = a1 | a5\n 21249: a4 = u8 [a0 + 0xd]\n 21252: a5 = u8 [a0 + 0xc]\n 21255: s1 = u8 [a0 + 0xe]\n 21258: a0 = u8 [a0 + 0xf]\n 21261: a4 = a4 << 0x8\n 21264: a4 = a4 | a5\n 21267: s1 = s1 << 0x10\n 21270: a0 = a0 << 0x18\n 21273: a0 = a0 | s1\n 21276: a0 = a0 | a4\n 21279: a0 = a0 << 0x20\n 21282: a0 = a0 | a1\n 21285: s1 = reverse a0\n 21287: a1 = reverse a3\n 21289: a2 = reverse a2\n 21291: a0 = reverse t0\n 21293: u64 [sp + 0x38] = a0\n 21296: u64 [sp + 0x30] = a2\n 21299: a0 = a0 | a2\n 21302: a2 = a1\n 21304: a1 = a1 | s1\n 21307: a1 = a1 | a0\n 21310: a1 = a1 >> 0x20\n 21313: a0 = a0 | s1\n 21316: a0 = a0 << 0x20\n 21319: a0 = a0 | a1\n 21322: jump @313 if a0 != 0\n      : @310 (gas: 5)\n 21326: u64 [sp + 0x28] = a2\n 21329: i32 a0 = a2 + 0\n 21331: a1 = 0x20\n 21334: u64 [sp + 0x20] = a0\n 21337: ra = 284, jump @0\n      : @311 [@dyn 142] (gas: 50)\n 21343: u8 [a0 + 31] = 0\n 21346: u8 [a0 + 30] = 0\n 21349: u8 [a0 + 29] = 0\n 21352: u8 [a0 + 28] = 0\n 21355: u8 [a0 + 27] = 0\n 21358: u8 [a0 + 26] = 0\n 21361: u8 [a0 + 25] = 0\n 21364: u8 [a0 + 24] = 0\n 21367: u8 [a0 + 23] = 0\n 21370: u8 [a0 + 22] = 0\n 21373: u8 [a0 + 21] = 0\n 21376: u8 [a0 + 20] = 0\n 21379: u8 [a0 + 19] = 0\n 21382: u8 [a0 + 18] = 0\n 21385: u8 [a0 + 17] = 0\n 21388: u8 [a0 + 16] = 0\n 21391: u8 [a0 + 15] = 0\n 21394: u8 [a0 + 14] = 0\n 21397: u8 [a0 + 13] = 0\n 21400: u8 [a0 + 12] = 0\n 21403: u8 [a0 + 11] = 0\n 21406: u8 [a0 + 10] = 0\n 21409: u8 [a0 + 9] = 0\n 21412: u8 [a0 + 8] = 0\n 21415: u8 [a0 + 7] = 0\n 21418: u8 [a0 + 6] = 0\n 21421: u8 [a0 + 5] = 0\n 21424: u8 [a0 + 4] = 0\n 21427: u8 [a0 + 3] = 0xa0\n 21432: u8 [a0 + 2] = 0x79\n 21436: u8 [a0 + 1] = 0xc3\n 21441: u8 [a0 + 0] = 0x8\n 21444: a1 = u64 [sp + 0x28]\n 21447: a0 = a1 + 0x4\n 21450: a1 = a0 <u a1\n 21453: a3 = u64 [sp + 0x38]\n 21456: a2 = a3 + a1\n 21459: a3 = a2 <u a3\n 21462: a3 = a1 if a1 == 0\n 21465: a3 = a3 + s1\n 21468: a1 = a3 <u s1\n 21471: a4 = u64 [sp + 0x30]\n 21474: a4 = a4 + a1\n 21477: u64 [sp + 0x48] = a2\n 21480: u64 [sp + 0x40] = a0\n 21483: u64 [sp + 0x50] = a3\n 21486: a0 = sp + 0x60\n 21489: a1 = sp + 0x40\n 21492: u64 [sp + 0x58] = a4\n 21495: ra = 286, jump @275\n      : @312 [@dyn 143] (gas: 30)\n 21501: a0 = u64 [sp + 0x68]\n 21504: t0 = u64 [sp + 0x78]\n 21507: t1 = u64 [sp + 0x60]\n 21510: a3 = u64 [sp + 0x70]\n 21513: a1 = u64 [sp + 0x38]\n 21516: a4 = a0 ^ a1\n 21519: a5 = a0 <u a1\n 21522: t2 = a1\n 21524: a2 = u64 [sp + 0x28]\n 21527: a1 = t1 <u a2\n 21530: a5 = a1 if a4 == 0\n 21533: a4 = a3 - s1\n 21536: a3 = a3 <u s1\n 21539: s1 = u64 [sp + 0x30]\n 21542: s1 = t0 - s1\n 21545: s1 = s1 - a3\n 21548: a3 = a4 <u a5\n 21551: s1 = s1 - a3\n 21554: a4 = a4 - a5\n 21557: a0 = a0 - t2\n 21560: a1 = a0 - a1\n 21563: a0 = t1 - a2\n 21566: a1 = a1 | s1\n 21569: a2 = a0 | a4\n 21572: a2 = a2 | a1\n 21575: a1 = a1 | a4\n 21578: a2 = a2 >> 0x20\n 21581: a1 = a1 << 0x20\n 21584: a1 = a1 | a2\n 21587: jump @315 if a1 == 0\n      : @313 (gas: 1)\n 21590: trap\n      : @314 (gas: 1)\n 21591: ra = 288, jump @283\n      : @315 [@dyn 144] (gas: 4)\n 21597: i32 s1 = a0 + 0\n 21599: a0 = u64 [sp + 0x20]\n 21602: a1 = s1\n 21604: ra = 290, jump @0\n      : @316 [@dyn 145] (gas: 6)\n 21610: i32 a1 = a0 + 0\n 21612: a0 = 0x1\n 21615: a2 = s1\n 21617: ra = 0x124\n 21621: ecalli 11 // 'seal_return'\n 21623: fallthrough\n      : @317 [@dyn 146] (gas: 12)\n 21624: a1 = u64 [a0 + 0x10]\n 21627: a2 = u64 [a0 + 0x18]\n 21630: a3 = u64 [a0 + 0x8]\n 21633: a0 = u64 [a0]\n 21635: a2 = a2 | a3\n 21638: a3 = a0 | a1\n 21641: a3 = a3 | a2\n 21644: a3 = a3 >> 0x20\n 21647: a1 = a1 | a2\n 21650: a1 = a1 << 0x20\n 21653: a1 = a1 | a3\n 21656: jump @320 if a1 != 0\n      : @318 (gas: 7)\n 21660: sp = sp + 0xfffffffffffffff0\n 21663: u64 [sp + 0x8] = ra\n 21666: u64 [sp] = s0\n 21668: i32 a0 = a0 + 0\n 21670: a1 = 0x20\n 21673: s0 = 0x20\n 21676: ra = 294, jump @0\n      : @319 [@dyn 147] (gas: 39)\n 21682: u8 [a0 + 31] = 0\n 21685: u8 [a0 + 30] = 0\n 21688: u8 [a0 + 29] = 0\n 21691: u8 [a0 + 28] = 0\n 21694: u8 [a0 + 27] = 0\n 21697: u8 [a0 + 26] = 0\n 21700: u8 [a0 + 25] = 0\n 21703: u8 [a0 + 24] = 0\n 21706: u8 [a0 + 23] = 0\n 21709: u8 [a0 + 22] = 0\n 21712: u8 [a0 + 21] = 0x2e\n 21716: u8 [a0 + 20] = 0x64\n 21720: u8 [a0 + 19] = 0x65\n 21724: u8 [a0 + 18] = 0x64\n 21728: u8 [a0 + 17] = 0x6e\n 21732: u8 [a0 + 16] = 0x65\n 21736: u8 [a0 + 0xf] = s0\n 21739: a3 = 0x74\n 21742: u8 [a0 + 0xe] = a3\n 21745: u8 [a0 + 13] = 0x65\n 21749: u8 [a0 + 12] = 0x79\n 21753: u8 [a0 + 0xb] = s0\n 21756: u8 [a0 + 0xa] = a3\n 21759: a2 = 0x6f\n 21762: u8 [a0 + 0x9] = a2\n 21765: u8 [a0 + 8] = 0x6e\n 21769: u8 [a0 + 0x7] = s0\n 21772: u8 [a0 + 6] = 0x6e\n 21776: u8 [a0 + 0x5] = a2\n 21779: u8 [a0 + 4] = 0x69\n 21783: u8 [a0 + 0x3] = a3\n 21786: u8 [a0 + 2] = 0x63\n 21790: u8 [a0 + 1] = 0x75\n 21794: a1 = 0x41\n 21797: u8 [a0] = a1\n 21799: ra = u64 [sp + 0x8]\n 21802: s0 = u64 [sp]\n 21804: sp = sp + 0x10\n 21807: ret\n      : @320 (gas: 1)\n 21809: trap\n      : @321 (gas: 17)\n 21810: sp = sp + 0xffffffffffffffa0\n 21813: u64 [sp + 0x58] = ra\n 21816: u64 [sp + 0x50] = s0\n 21819: u64 [sp + 0x48] = s1\n 21822: a3 = u64 [a1 + 0x18]\n 21825: a4 = u64 [a1 + 0x10]\n 21828: a5 = u64 [a1 + 0x8]\n 21831: s1 = u64 [a1]\n 21833: a1 = a5 | a3\n 21836: a2 = s1 | a4\n 21839: a2 = a2 | a1\n 21842: a2 = a2 >> 0x20\n 21845: a1 = a1 | a4\n 21848: a1 = a1 << 0x20\n 21851: a1 = a1 | a2\n 21854: u64 [sp + 0x28] = a0\n 21857: jump @328 if a1 != 0\n      : @322 (gas: 19)\n 21861: a0 = s1 + 0x20\n 21864: u64 [sp + 0x30] = a0\n 21867: a0 = a0 <u s1\n 21870: a1 = a5 + a0\n 21873: u64 [sp + 0x40] = a1\n 21876: u64 [sp + 0x8] = a5\n 21879: s0 = a1 <u a5\n 21882: s0 = a0 if a0 == 0\n 21885: s0 = s0 + a4\n 21888: u64 [sp + 0x10] = a4\n 21891: a0 = s0 <u a4\n 21894: u64 [sp + 0x18] = a3\n 21897: a0 = a0 + a3\n 21900: u64 [sp + 0x38] = a0\n 21903: u64 [sp] = s1\n 21905: i32 a0 = s1 + 0\n 21907: a1 = 0x20\n 21910: s1 = 0x20\n 21913: ra = 296, jump @0\n      : @323 [@dyn 148] (gas: 45)\n 21919: u8 [a0 + 0x1f] = s1\n 21922: a1 = u64 [sp + 0x30]\n 21925: s1 = a1\n 21927: a1 = a1 | s0\n 21930: a2 = u64 [sp + 0x40]\n 21933: a4 = u64 [sp + 0x38]\n 21936: a2 = a2 | a4\n 21939: a1 = a1 | a2\n 21942: a1 = a1 >> 0x20\n 21945: u64 [sp + 0x20] = s0\n 21948: a2 = a2 | s0\n 21951: a2 = a2 << 0x20\n 21954: a1 = a1 | a2\n 21957: u8 [a0 + 30] = 0\n 21960: u8 [a0 + 29] = 0\n 21963: u8 [a0 + 28] = 0\n 21966: u8 [a0 + 27] = 0\n 21969: u8 [a0 + 26] = 0\n 21972: u8 [a0 + 25] = 0\n 21975: u8 [a0 + 24] = 0\n 21978: u8 [a0 + 23] = 0\n 21981: u8 [a0 + 22] = 0\n 21984: u8 [a0 + 21] = 0\n 21987: u8 [a0 + 20] = 0\n 21990: u8 [a0 + 19] = 0\n 21993: u8 [a0 + 18] = 0\n 21996: u8 [a0 + 17] = 0\n 21999: u8 [a0 + 16] = 0\n 22002: u8 [a0 + 15] = 0\n 22005: u8 [a0 + 14] = 0\n 22008: u8 [a0 + 13] = 0\n 22011: u8 [a0 + 12] = 0\n 22014: u8 [a0 + 11] = 0\n 22017: u8 [a0 + 10] = 0\n 22020: u8 [a0 + 9] = 0\n 22023: u8 [a0 + 8] = 0\n 22026: u8 [a0 + 7] = 0\n 22029: u8 [a0 + 6] = 0\n 22032: u8 [a0 + 5] = 0\n 22035: u8 [a0 + 4] = 0\n 22038: u8 [a0 + 3] = 0\n 22041: u8 [a0 + 2] = 0\n 22044: u8 [a0 + 1] = 0\n 22047: u8 [a0 + 0] = 0\n 22049: jump @328 if a1 != 0\n      : @324 (gas: 4)\n 22053: i32 s0 = s1 + 0\n 22055: a1 = 0x20\n 22058: a0 = s0\n 22060: ra = 298, jump @0\n      : @325 [@dyn 149] (gas: 41)\n 22066: u8 [a0 + 31] = 0x16\n 22070: u8 [a0 + 30] = 0\n 22073: u8 [a0 + 29] = 0\n 22076: u8 [a0 + 28] = 0\n 22079: u8 [a0 + 27] = 0\n 22082: u8 [a0 + 26] = 0\n 22085: u8 [a0 + 25] = 0\n 22088: u8 [a0 + 24] = 0\n 22091: u8 [a0 + 23] = 0\n 22094: u8 [a0 + 22] = 0\n 22097: u8 [a0 + 21] = 0\n 22100: u8 [a0 + 20] = 0\n 22103: u8 [a0 + 19] = 0\n 22106: u8 [a0 + 18] = 0\n 22109: u8 [a0 + 17] = 0\n 22112: u8 [a0 + 16] = 0\n 22115: u8 [a0 + 15] = 0\n 22118: u8 [a0 + 14] = 0\n 22121: u8 [a0 + 13] = 0\n 22124: u8 [a0 + 12] = 0\n 22127: u8 [a0 + 11] = 0\n 22130: u8 [a0 + 10] = 0\n 22133: u8 [a0 + 9] = 0\n 22136: u8 [a0 + 8] = 0\n 22139: u8 [a0 + 7] = 0\n 22142: u8 [a0 + 6] = 0\n 22145: u8 [a0 + 5] = 0\n 22148: u8 [a0 + 4] = 0\n 22151: u8 [a0 + 3] = 0\n 22154: u8 [a0 + 2] = 0\n 22157: u8 [a0 + 1] = 0\n 22160: a1 = u64 [sp + 0x20]\n 22163: a2 = u64 [sp + 0x38]\n 22166: a1 = a1 | a2\n 22169: a2 = 0xffffffe0\n 22179: a2 = s1 <u a2\n 22182: a3 = u64 [sp + 0x40]\n 22185: a2 = 0 if a3 != 0\n 22187: a2 = 0 if a1 != 0\n 22189: u8 [a0 + 0] = 0\n 22191: jump @328 if a2 == 0\n      : @326 (gas: 3)\n 22195: i32 a0 = s0 + 0x20\n 22198: a1 = 0x20\n 22201: ra = 300, jump @0\n      : @327 [@dyn 150] (gas: 54)\n 22207: u8 [a0 + 31] = 0\n 22210: u8 [a0 + 30] = 0\n 22213: u8 [a0 + 29] = 0\n 22216: u8 [a0 + 28] = 0\n 22219: u8 [a0 + 27] = 0\n 22222: u8 [a0 + 26] = 0\n 22225: u8 [a0 + 25] = 0\n 22228: u8 [a0 + 24] = 0\n 22231: u8 [a0 + 23] = 0\n 22234: u8 [a0 + 22] = 0\n 22237: u8 [a0 + 21] = 0x2e\n 22241: u8 [a0 + 20] = 0x64\n 22245: u8 [a0 + 19] = 0x65\n 22249: u8 [a0 + 18] = 0x64\n 22253: u8 [a0 + 17] = 0x6e\n 22257: u8 [a0 + 16] = 0x65\n 22261: u8 [a0 + 15] = 0x20\n 22265: u8 [a0 + 14] = 0x74\n 22269: u8 [a0 + 13] = 0x65\n 22273: u8 [a0 + 12] = 0x79\n 22277: u8 [a0 + 11] = 0x20\n 22281: u8 [a0 + 10] = 0x74\n 22285: u8 [a0 + 9] = 0x6f\n 22289: u8 [a0 + 8] = 0x6e\n 22293: u8 [a0 + 7] = 0x20\n 22297: u8 [a0 + 6] = 0x6e\n 22301: u8 [a0 + 5] = 0x6f\n 22305: u8 [a0 + 4] = 0x69\n 22309: u8 [a0 + 3] = 0x74\n 22313: u8 [a0 + 2] = 0x63\n 22317: u8 [a0 + 1] = 0x75\n 22321: u8 [a0 + 0] = 0x41\n 22324: a1 = u64 [sp]\n 22326: a0 = a1 + 0x60\n 22329: a1 = a0 <u a1\n 22332: a3 = u64 [sp + 0x8]\n 22335: a2 = a3 + a1\n 22338: a3 = a2 <u a3\n 22341: a3 = a1 if a1 == 0\n 22344: a1 = u64 [sp + 0x10]\n 22347: a3 = a3 + a1\n 22350: a1 = a3 <u a1\n 22353: a4 = u64 [sp + 0x18]\n 22356: a1 = a1 + a4\n 22359: a4 = u64 [sp + 0x28]\n 22362: u64 [a4] = a0\n 22364: u64 [a4 + 0x8] = a2\n 22367: u64 [a4 + 0x10] = a3\n 22370: u64 [a4 + 0x18] = a1\n 22373: ra = u64 [sp + 0x58]\n 22376: s0 = u64 [sp + 0x50]\n 22379: s1 = u64 [sp + 0x48]\n 22382: sp = sp + 0x60\n 22385: ret\n      : @328 (gas: 1)\n 22387: trap\n      : @329 (gas: 17)\n 22388: sp = sp + 0xffffffffffffffa0\n 22391: u64 [sp + 0x58] = ra\n 22394: u64 [sp + 0x50] = s0\n 22397: u64 [sp + 0x48] = s1\n 22400: a3 = u64 [a1 + 0x18]\n 22403: a4 = u64 [a1 + 0x10]\n 22406: a5 = u64 [a1 + 0x8]\n 22409: s1 = u64 [a1]\n 22411: a1 = a5 | a3\n 22414: a2 = s1 | a4\n 22417: a2 = a2 | a1\n 22420: a2 = a2 >> 0x20\n 22423: a1 = a1 | a4\n 22426: a1 = a1 << 0x20\n 22429: a1 = a1 | a2\n 22432: u64 [sp + 0x28] = a0\n 22435: jump @336 if a1 != 0\n      : @330 (gas: 19)\n 22439: a0 = s1 + 0x20\n 22442: u64 [sp + 0x30] = a0\n 22445: a0 = a0 <u s1\n 22448: a1 = a5 + a0\n 22451: u64 [sp + 0x40] = a1\n 22454: u64 [sp + 0x8] = a5\n 22457: s0 = a1 <u a5\n 22460: s0 = a0 if a0 == 0\n 22463: s0 = s0 + a4\n 22466: u64 [sp + 0x10] = a4\n 22469: a0 = s0 <u a4\n 22472: u64 [sp + 0x18] = a3\n 22475: a0 = a0 + a3\n 22478: u64 [sp + 0x38] = a0\n 22481: u64 [sp] = s1\n 22483: i32 a0 = s1 + 0\n 22485: a1 = 0x20\n 22488: s1 = 0x20\n 22491: ra = 302, jump @0\n      : @331 [@dyn 151] (gas: 45)\n 22497: u8 [a0 + 0x1f] = s1\n 22500: a1 = u64 [sp + 0x30]\n 22503: s1 = a1\n 22505: a1 = a1 | s0\n 22508: a2 = u64 [sp + 0x40]\n 22511: a4 = u64 [sp + 0x38]\n 22514: a2 = a2 | a4\n 22517: a1 = a1 | a2\n 22520: a1 = a1 >> 0x20\n 22523: u64 [sp + 0x20] = s0\n 22526: a2 = a2 | s0\n 22529: a2 = a2 << 0x20\n 22532: a1 = a1 | a2\n 22535: u8 [a0 + 30] = 0\n 22538: u8 [a0 + 29] = 0\n 22541: u8 [a0 + 28] = 0\n 22544: u8 [a0 + 27] = 0\n 22547: u8 [a0 + 26] = 0\n 22550: u8 [a0 + 25] = 0\n 22553: u8 [a0 + 24] = 0\n 22556: u8 [a0 + 23] = 0\n 22559: u8 [a0 + 22] = 0\n 22562: u8 [a0 + 21] = 0\n 22565: u8 [a0 + 20] = 0\n 22568: u8 [a0 + 19] = 0\n 22571: u8 [a0 + 18] = 0\n 22574: u8 [a0 + 17] = 0\n 22577: u8 [a0 + 16] = 0\n 22580: u8 [a0 + 15] = 0\n 22583: u8 [a0 + 14] = 0\n 22586: u8 [a0 + 13] = 0\n 22589: u8 [a0 + 12] = 0\n 22592: u8 [a0 + 11] = 0\n 22595: u8 [a0 + 10] = 0\n 22598: u8 [a0 + 9] = 0\n 22601: u8 [a0 + 8] = 0\n 22604: u8 [a0 + 7] = 0\n 22607: u8 [a0 + 6] = 0\n 22610: u8 [a0 + 5] = 0\n 22613: u8 [a0 + 4] = 0\n 22616: u8 [a0 + 3] = 0\n 22619: u8 [a0 + 2] = 0\n 22622: u8 [a0 + 1] = 0\n 22625: u8 [a0 + 0] = 0\n 22627: jump @336 if a1 != 0\n      : @332 (gas: 4)\n 22631: i32 s0 = s1 + 0\n 22633: a1 = 0x20\n 22636: a0 = s0\n 22638: ra = 304, jump @0\n      : @333 [@dyn 152] (gas: 41)\n 22644: u8 [a0 + 31] = 0x16\n 22648: u8 [a0 + 30] = 0\n 22651: u8 [a0 + 29] = 0\n 22654: u8 [a0 + 28] = 0\n 22657: u8 [a0 + 27] = 0\n 22660: u8 [a0 + 26] = 0\n 22663: u8 [a0 + 25] = 0\n 22666: u8 [a0 + 24] = 0\n 22669: u8 [a0 + 23] = 0\n 22672: u8 [a0 + 22] = 0\n 22675: u8 [a0 + 21] = 0\n 22678: u8 [a0 + 20] = 0\n 22681: u8 [a0 + 19] = 0\n 22684: u8 [a0 + 18] = 0\n 22687: u8 [a0 + 17] = 0\n 22690: u8 [a0 + 16] = 0\n 22693: u8 [a0 + 15] = 0\n 22696: u8 [a0 + 14] = 0\n 22699: u8 [a0 + 13] = 0\n 22702: u8 [a0 + 12] = 0\n 22705: u8 [a0 + 11] = 0\n 22708: u8 [a0 + 10] = 0\n 22711: u8 [a0 + 9] = 0\n 22714: u8 [a0 + 8] = 0\n 22717: u8 [a0 + 7] = 0\n 22720: u8 [a0 + 6] = 0\n 22723: u8 [a0 + 5] = 0\n 22726: u8 [a0 + 4] = 0\n 22729: u8 [a0 + 3] = 0\n 22732: u8 [a0 + 2] = 0\n 22735: u8 [a0 + 1] = 0\n 22738: a1 = u64 [sp + 0x20]\n 22741: a2 = u64 [sp + 0x38]\n 22744: a1 = a1 | a2\n 22747: a2 = 0xffffffe0\n 22757: a2 = s1 <u a2\n 22760: a3 = u64 [sp + 0x40]\n 22763: a2 = 0 if a3 != 0\n 22765: a2 = 0 if a1 != 0\n 22767: u8 [a0 + 0] = 0\n 22769: jump @336 if a2 == 0\n      : @334 (gas: 3)\n 22773: i32 a0 = s0 + 0x20\n 22776: a1 = 0x20\n 22779: ra = 306, jump @0\n      : @335 [@dyn 153] (gas: 55)\n 22785: u8 [a0 + 31] = 0\n 22788: u8 [a0 + 30] = 0\n 22791: u8 [a0 + 29] = 0\n 22794: u8 [a0 + 28] = 0\n 22797: u8 [a0 + 27] = 0\n 22800: u8 [a0 + 26] = 0\n 22803: u8 [a0 + 25] = 0\n 22806: u8 [a0 + 24] = 0\n 22809: u8 [a0 + 23] = 0\n 22812: u8 [a0 + 22] = 0\n 22815: u8 [a0 + 21] = 0x2e\n 22819: u8 [a0 + 20] = 0x64\n 22823: u8 [a0 + 19] = 0x65\n 22827: u8 [a0 + 18] = 0x64\n 22831: u8 [a0 + 17] = 0x6e\n 22835: u8 [a0 + 16] = 0x65\n 22839: a5 = 0x20\n 22842: u8 [a0 + 0xf] = a5\n 22845: u8 [a0 + 14] = 0x79\n 22849: u8 [a0 + 13] = 0x64\n 22853: u8 [a0 + 12] = 0x61\n 22857: u8 [a0 + 11] = 0x65\n 22861: u8 [a0 + 10] = 0x72\n 22865: u8 [a0 + 9] = 0x6c\n 22869: u8 [a0 + 8] = 0x61\n 22873: u8 [a0 + 0x7] = a5\n 22876: u8 [a0 + 6] = 0x6e\n 22880: u8 [a0 + 5] = 0x6f\n 22884: u8 [a0 + 4] = 0x69\n 22888: u8 [a0 + 3] = 0x74\n 22892: u8 [a0 + 2] = 0x63\n 22896: u8 [a0 + 1] = 0x75\n 22900: u8 [a0 + 0] = 0x41\n 22903: a1 = u64 [sp]\n 22905: a0 = a1 + 0x60\n 22908: a1 = a0 <u a1\n 22911: a3 = u64 [sp + 0x8]\n 22914: a2 = a3 + a1\n 22917: a3 = a2 <u a3\n 22920: a3 = a1 if a1 == 0\n 22923: a1 = u64 [sp + 0x10]\n 22926: a3 = a3 + a1\n 22929: a1 = a3 <u a1\n 22932: a4 = u64 [sp + 0x18]\n 22935: a1 = a1 + a4\n 22938: a4 = u64 [sp + 0x28]\n 22941: u64 [a4] = a0\n 22943: u64 [a4 + 0x8] = a2\n 22946: u64 [a4 + 0x10] = a3\n 22949: u64 [a4 + 0x18] = a1\n 22952: ra = u64 [sp + 0x58]\n 22955: s0 = u64 [sp + 0x50]\n 22958: s1 = u64 [sp + 0x48]\n 22961: sp = sp + 0x60\n 22964: ret\n      : @336 (gas: 1)\n 22966: trap\n      : @337 (gas: 19)\n 22967: a0 = u64 [sp + 0x1b8]\n 22971: t0 = u64 [sp + 0x1a0]\n 22975: a2 = u64 [sp + 0x1b0]\n 22979: a3 = u64 [sp + 0x1a8]\n 22983: a4 = s1 ^ a0\n 22986: s1 = s1 <u a0\n 22989: a0 = u64 [sp + 0x48]\n 22992: a5 = a0 <u a2\n 22995: a5 = s1 if a4 != 0\n 22998: a1 = u64 [sp + 0x50]\n 23001: s1 = a1 ^ a3\n 23004: a3 = a1 <u a3\n 23007: a1 = u64 [sp + 0x58]\n 23010: a1 = a1 <u t0\n 23013: a1 = a3 if s1 != 0\n 23016: a0 = a0 ^ a2\n 23019: a0 = a0 | a4\n 23022: a1 = a5 if a0 != 0\n 23025: jump @351 if a1 != 0\n      : @338 (gas: 17)\n 23029: u64 [sp + 408] = 0\n 23033: u64 [sp + 400] = 0\n 23037: u64 [sp + 392] = 0\n 23041: s1 = 0x6\n 23044: u64 [sp + 0x180] = s1\n 23048: u64 [sp + 440] = 0\n 23052: u64 [sp + 432] = 0\n 23056: u64 [sp + 424] = 0\n 23060: u64 [sp + 416] = 0\n 23064: u32 [sp + 448] = 0x20\n 23069: i32 a1 = sp + 0x180\n 23073: i32 a3 = sp + 0x1a0\n 23077: i32 a4 = sp + 0x1c0\n 23081: a2 = 0xffffffffffffffff\n 23084: a0 = 0\n 23086: ecalli 6 // 'get_storage'\n 23088: fallthrough\n      : @339 (gas: 2)\n 23089: a0 = u8 [sp + 0x1a0]\n 23093: jump @356 if a0 != 0\n      : @340 (gas: 83)\n 23097: u64 [sp + 408] = 0\n 23101: u64 [sp + 400] = 0\n 23105: u64 [sp + 392] = 0\n 23109: u64 [sp + 384] = 0x6\n 23114: u64 [sp + 440] = 0\n 23118: u64 [sp + 432] = 0\n 23122: u64 [sp + 424] = 0\n 23126: u64 [sp + 416] = 0\n 23130: u32 [sp + 448] = 0x20\n 23135: i32 a1 = sp + 0x180\n 23139: i32 a3 = sp + 0x1a0\n 23143: i32 a4 = sp + 0x1c0\n 23147: a2 = 0xffffffffffffffff\n 23150: a0 = 0\n 23152: ecalli 6 // 'get_storage'\n 23154: a0 = u64 [sp + 0x1a0]\n 23158: a1 = u64 [sp + 0x1a8]\n 23162: a2 = u64 [sp + 0x1b0]\n 23166: a3 = u64 [sp + 0x1b8]\n 23170: a0 = a0 & 0xffffffffffffff00\n 23174: a0 = a0 | 0x1\n 23177: u64 [sp + 408] = 0\n 23181: u64 [sp + 400] = 0\n 23185: u64 [sp + 392] = 0\n 23189: u64 [sp + 384] = 0x6\n 23194: u64 [sp + 0x1b8] = a3\n 23198: u64 [sp + 0x1b0] = a2\n 23202: u64 [sp + 0x1a8] = a1\n 23206: u64 [sp + 0x1a0] = a0\n 23210: i32 a1 = sp + 0x180\n 23214: i32 a3 = sp + 0x1a0\n 23218: a2 = 0xffffffffffffffff\n 23221: a4 = 0x20\n 23224: a0 = 0\n 23226: ecalli 13 // 'set_storage'\n 23228: u64 [sp + 408] = 0\n 23232: u64 [sp + 400] = 0\n 23236: u64 [sp + 392] = 0\n 23240: u64 [sp + 384] = 0x3\n 23245: u64 [sp + 440] = 0\n 23249: u64 [sp + 432] = 0\n 23253: u64 [sp + 424] = 0\n 23257: u64 [sp + 416] = 0\n 23261: u32 [sp + 448] = 0x20\n 23266: s1 = 0x20\n 23269: i32 a1 = sp + 0x180\n 23273: i32 a3 = sp + 0x1a0\n 23277: i32 a4 = sp + 0x1c0\n 23281: a2 = 0xffffffffffffffff\n 23284: a0 = 0\n 23286: ecalli 6 // 'get_storage'\n 23288: a0 = u64 [sp + 0x1b0]\n 23292: u64 [sp + 0x48] = a0\n 23295: a0 = u64 [sp + 0x1a8]\n 23299: u64 [sp + 0x50] = a0\n 23302: a0 = u64 [sp + 0x1a0]\n 23306: u64 [sp + 0x58] = a0\n 23309: u64 [sp + 408] = 0\n 23313: u64 [sp + 400] = 0\n 23317: u64 [sp + 392] = 0\n 23321: u64 [sp + 384] = 0x4\n 23326: u64 [sp + 440] = 0\n 23330: u64 [sp + 432] = 0\n 23334: u64 [sp + 424] = 0\n 23338: u64 [sp + 416] = 0\n 23342: u32 [sp + 0x1c0] = s1\n 23346: i32 a1 = sp + 0x180\n 23350: i32 a3 = sp + 0x1a0\n 23354: i32 a4 = sp + 0x1c0\n 23358: a2 = 0xffffffffffffffff\n 23361: a0 = 0\n 23363: ecalli 6 // 'get_storage'\n 23365: a0 = u64 [sp + 0x1b8]\n 23369: u64 [sp + 0x10] = a0\n 23372: a0 = u64 [sp + 0x1b0]\n 23376: u64 [sp + 0x18] = a0\n 23379: a0 = u64 [sp + 0x1a8]\n 23383: u64 [sp + 0x20] = a0\n 23386: a0 = u64 [sp + 0x1a0]\n 23390: u64 [sp + 0x28] = a0\n 23393: a0 = 0x40\n 23396: a1 = 0x20\n 23399: ra = 308, jump @0\n      : @341 [@dyn 154] (gas: 103)\n 23405: a1 = u8 [a0 + 0x11]\n 23408: a2 = u8 [a0 + 0x10]\n 23411: a3 = u8 [a0 + 0x12]\n 23414: a4 = u8 [a0 + 0x13]\n 23417: a1 = a1 << 0x8\n 23420: a1 = a1 | a2\n 23423: a3 = a3 << 0x10\n 23426: a4 = a4 << 0x18\n 23429: a3 = a3 | a4\n 23432: a1 = a1 | a3\n 23435: a2 = u8 [a0 + 0x15]\n 23438: a3 = u8 [a0 + 0x14]\n 23441: a4 = u8 [a0 + 0x16]\n 23444: a5 = u8 [a0 + 0x17]\n 23447: a2 = a2 << 0x8\n 23450: a2 = a2 | a3\n 23453: a4 = a4 << 0x10\n 23456: a5 = a5 << 0x18\n 23459: a4 = a4 | a5\n 23462: a2 = a2 | a4\n 23465: a2 = a2 << 0x20\n 23468: t0 = a2 | a1\n 23471: a2 = u8 [a0 + 0x1]\n 23474: a3 = u8 [a0]\n 23476: a4 = u8 [a0 + 0x2]\n 23479: a5 = u8 [a0 + 0x3]\n 23482: a2 = a2 << 0x8\n 23485: a2 = a2 | a3\n 23488: a4 = a4 << 0x10\n 23491: a5 = a5 << 0x18\n 23494: a4 = a4 | a5\n 23497: a2 = a2 | a4\n 23500: a3 = u8 [a0 + 0x5]\n 23503: a4 = u8 [a0 + 0x4]\n 23506: a5 = u8 [a0 + 0x6]\n 23509: s1 = u8 [a0 + 0x7]\n 23512: a3 = a3 << 0x8\n 23515: a3 = a3 | a4\n 23518: a5 = a5 << 0x10\n 23521: s1 = s1 << 0x18\n 23524: a5 = a5 | s1\n 23527: a3 = a3 | a5\n 23530: a3 = a3 << 0x20\n 23533: a2 = a2 | a3\n 23536: a3 = u8 [a0 + 0x19]\n 23539: a4 = u8 [a0 + 0x18]\n 23542: a5 = u8 [a0 + 0x1a]\n 23545: s1 = u8 [a0 + 0x1b]\n 23548: a3 = a3 << 0x8\n 23551: a3 = a3 | a4\n 23554: a5 = a5 << 0x10\n 23557: s1 = s1 << 0x18\n 23560: a5 = a5 | s1\n 23563: a3 = a3 | a5\n 23566: a4 = u8 [a0 + 0x1d]\n 23569: a5 = u8 [a0 + 0x1c]\n 23572: s1 = u8 [a0 + 0x1e]\n 23575: a1 = u8 [a0 + 0x1f]\n 23578: a4 = a4 << 0x8\n 23581: a4 = a4 | a5\n 23584: s1 = s1 << 0x10\n 23587: a1 = a1 << 0x18\n 23590: a1 = a1 | s1\n 23593: a1 = a1 | a4\n 23596: a1 = a1 << 0x20\n 23599: a3 = a3 | a1\n 23602: a1 = u8 [a0 + 0x9]\n 23605: a4 = u8 [a0 + 0x8]\n 23608: a5 = u8 [a0 + 0xa]\n 23611: s1 = u8 [a0 + 0xb]\n 23614: a1 = a1 << 0x8\n 23617: a1 = a1 | a4\n 23620: a5 = a5 << 0x10\n 23623: s1 = s1 << 0x18\n 23626: a5 = a5 | s1\n 23629: a1 = a1 | a5\n 23632: a4 = u8 [a0 + 0xd]\n 23635: a5 = u8 [a0 + 0xc]\n 23638: s1 = u8 [a0 + 0xe]\n 23641: a0 = u8 [a0 + 0xf]\n 23644: a4 = a4 << 0x8\n 23647: a4 = a4 | a5\n 23650: s1 = s1 << 0x10\n 23653: a0 = a0 << 0x18\n 23656: a0 = a0 | s1\n 23659: a0 = a0 | a4\n 23662: a0 = a0 << 0x20\n 23665: a0 = a0 | a1\n 23668: a4 = reverse a0\n 23670: a3 = reverse a3\n 23672: a1 = reverse a2\n 23674: a0 = reverse t0\n 23676: u64 [sp + 0x40] = a0\n 23679: u64 [sp + 0x30] = a1\n 23682: a0 = a0 | a1\n 23685: a1 = a3 | a4\n 23688: a1 = a1 | a0\n 23691: a1 = a1 >> 0x20\n 23694: u64 [sp + 0x38] = a4\n 23697: a0 = a0 | a4\n 23700: a0 = a0 << 0x20\n 23703: a0 = a0 | a1\n 23706: jump @362 if a0 != 0\n      : @342 (gas: 8)\n 23710: a0 = u64 [sp + 0x48]\n 23713: a0 = a0 << 0x20\n 23716: s1 = a0 >> 0x20\n 23719: i32 a0 = a3 + 0\n 23721: a1 = 0x20\n 23724: u64 [sp + 0x8] = a0\n 23727: u64 [sp + 0x48] = a3\n 23730: ra = 310, jump @0\n      : @343 [@dyn 155] (gas: 65)\n 23736: a1 = reverse s1\n 23738: a2 = u64 [sp + 0x50]\n 23741: a2 = reverse a2\n 23743: a3 = u64 [sp + 0x58]\n 23746: a3 = reverse a3\n 23748: a4 = a3 >> 0x38\n 23751: u8 [a0 + 0x1f] = a4\n 23754: a4 = a3 >> 0x30\n 23757: u8 [a0 + 0x1e] = a4\n 23760: a4 = a3 >> 0x28\n 23763: u8 [a0 + 0x1d] = a4\n 23766: a4 = a3 >> 0x20\n 23769: u8 [a0 + 0x1c] = a4\n 23772: a4 = a3 >> 0x18\n 23775: u8 [a0 + 0x1b] = a4\n 23778: a4 = a3 >> 0x10\n 23781: u8 [a0 + 0x1a] = a4\n 23784: a4 = a3 >> 0x8\n 23787: u8 [a0 + 0x19] = a4\n 23790: u8 [a0 + 0x18] = a3\n 23793: u8 [a0 + 0x10] = a2\n 23796: u8 [a0 + 11] = 0\n 23799: u8 [a0 + 10] = 0\n 23802: u8 [a0 + 9] = 0\n 23805: u8 [a0 + 7] = 0\n 23808: u8 [a0 + 6] = 0\n 23811: u8 [a0 + 5] = 0\n 23814: u8 [a0 + 4] = 0\n 23817: u8 [a0 + 3] = 0\n 23820: u8 [a0 + 2] = 0\n 23823: u8 [a0 + 1] = 0\n 23826: u8 [a0 + 0] = 0\n 23828: a3 = a2 >> 0x38\n 23831: u8 [a0 + 0x17] = a3\n 23834: a3 = a2 >> 0x30\n 23837: u8 [a0 + 0x16] = a3\n 23840: a3 = a2 >> 0x28\n 23843: u8 [a0 + 0x15] = a3\n 23846: a3 = a2 >> 0x20\n 23849: u8 [a0 + 0x14] = a3\n 23852: a3 = a2 >> 0x18\n 23855: u8 [a0 + 0x13] = a3\n 23858: a3 = a2 >> 0x10\n 23861: u8 [a0 + 0x12] = a3\n 23864: a2 = a2 >> 0x8\n 23867: u8 [a0 + 0x11] = a2\n 23870: u8 [a0 + 0x8] = a1\n 23873: a2 = a1 >> 0x38\n 23876: u8 [a0 + 0xf] = a2\n 23879: a2 = a1 >> 0x30\n 23882: u8 [a0 + 0xe] = a2\n 23885: a2 = a1 >> 0x28\n 23888: u8 [a0 + 0xd] = a2\n 23891: a1 = a1 >> 0x20\n 23894: a2 = u64 [sp + 0x38]\n 23897: a3 = u64 [sp + 0x30]\n 23900: a2 = a2 | a3\n 23903: a3 = 0xffffffe0\n 23913: a4 = u64 [sp + 0x48]\n 23916: a3 = a4 <u a3\n 23919: a4 = u64 [sp + 0x40]\n 23922: a3 = 0 if a4 != 0\n 23924: a3 = 0 if a2 != 0\n 23926: u8 [a0 + 0xc] = a1\n 23929: jump @362 if a3 == 0\n      : @344 (gas: 4)\n 23933: s1 = u64 [sp + 0x8]\n 23936: i32 a0 = s1 + 0x20\n 23939: a1 = 0x20\n 23942: ra = 312, jump @0\n      : @345 [@dyn 156] (gas: 71)\n 23948: a1 = u64 [sp + 0x10]\n 23951: a1 = reverse a1\n 23953: a2 = u64 [sp + 0x18]\n 23956: a2 = reverse a2\n 23958: a3 = u64 [sp + 0x20]\n 23961: a3 = reverse a3\n 23963: a4 = u64 [sp + 0x28]\n 23966: a4 = reverse a4\n 23968: a5 = a4 >> 0x38\n 23971: u8 [a0 + 0x1f] = a5\n 23974: a5 = a4 >> 0x30\n 23977: u8 [a0 + 0x1e] = a5\n 23980: a5 = a4 >> 0x28\n 23983: u8 [a0 + 0x1d] = a5\n 23986: a5 = a4 >> 0x20\n 23989: u8 [a0 + 0x1c] = a5\n 23992: a5 = a4 >> 0x18\n 23995: u8 [a0 + 0x1b] = a5\n 23998: a5 = a4 >> 0x10\n 24001: u8 [a0 + 0x1a] = a5\n 24004: a5 = a4 >> 0x8\n 24007: u8 [a0 + 0x19] = a5\n 24010: u8 [a0 + 0x18] = a4\n 24013: u8 [a0 + 0x10] = a3\n 24016: a4 = a3 >> 0x38\n 24019: u8 [a0 + 0x17] = a4\n 24022: a4 = a3 >> 0x30\n 24025: u8 [a0 + 0x16] = a4\n 24028: a4 = a3 >> 0x28\n 24031: u8 [a0 + 0x15] = a4\n 24034: a4 = a3 >> 0x20\n 24037: u8 [a0 + 0x14] = a4\n 24040: a4 = a3 >> 0x18\n 24043: u8 [a0 + 0x13] = a4\n 24046: a4 = a3 >> 0x10\n 24049: u8 [a0 + 0x12] = a4\n 24052: a3 = a3 >> 0x8\n 24055: u8 [a0 + 0x11] = a3\n 24058: u8 [a0 + 0x8] = a2\n 24061: a3 = a2 >> 0x38\n 24064: u8 [a0 + 0xf] = a3\n 24067: a3 = a2 >> 0x30\n 24070: u8 [a0 + 0xe] = a3\n 24073: a3 = a2 >> 0x28\n 24076: u8 [a0 + 0xd] = a3\n 24079: a3 = a2 >> 0x20\n 24082: u8 [a0 + 0xc] = a3\n 24085: a3 = a2 >> 0x18\n 24088: u8 [a0 + 0xb] = a3\n 24091: a3 = a2 >> 0x10\n 24094: u8 [a0 + 0xa] = a3\n 24097: a2 = a2 >> 0x8\n 24100: u8 [a0 + 0x9] = a2\n 24103: u8 [a0] = a1\n 24105: a2 = a1 >> 0x38\n 24108: u8 [a0 + 0x7] = a2\n 24111: a2 = a1 >> 0x30\n 24114: u8 [a0 + 0x6] = a2\n 24117: a2 = a1 >> 0x28\n 24120: u8 [a0 + 0x5] = a2\n 24123: a2 = a1 >> 0x20\n 24126: u8 [a0 + 0x4] = a2\n 24129: a2 = a1 >> 0x18\n 24132: u8 [a0 + 0x3] = a2\n 24135: a2 = a1 >> 0x10\n 24138: u8 [a0 + 0x2] = a2\n 24141: a1 = a1 >> 0x8\n 24144: u8 [a0 + 0x1] = a1\n 24147: a1 = 0x40\n 24150: a0 = s1\n 24152: ra = 314, jump @0\n      : @346 [@dyn 157] (gas: 74)\n 24158: a1 = u64 [0x20020]\n 24163: a2 = u64 [0x20028]\n 24168: a3 = u64 [0x20030]\n 24173: a4 = u64 [0x20038]\n 24178: u64 [sp + 0x1b8] = a1\n 24182: u64 [sp + 0x1b0] = a2\n 24186: u64 [sp + 0x1a8] = a3\n 24190: u64 [sp + 0x1a0] = a4\n 24194: i32 a2 = a0 + 0\n 24196: i32 a0 = sp + 0x1a0\n 24200: a1 = 0x1\n 24203: a3 = 0x40\n 24206: ecalli 5 // 'deposit_event'\n 24208: u64 [sp + 408] = 0\n 24212: u64 [sp + 400] = 0\n 24216: u64 [sp + 392] = 0\n 24220: u64 [sp + 384] = 0\n 24224: u64 [sp + 440] = 0\n 24228: u64 [sp + 432] = 0\n 24232: u64 [sp + 424] = 0\n 24236: u64 [sp + 416] = 0\n 24240: u32 [sp + 448] = 0x20\n 24245: i32 a1 = sp + 0x180\n 24249: i32 a3 = sp + 0x1a0\n 24253: i32 a4 = sp + 0x1c0\n 24257: a2 = 0xffffffffffffffff\n 24260: a0 = 0\n 24262: ecalli 6 // 'get_storage'\n 24264: a0 = u64 [sp + 0x1a0]\n 24268: u64 [sp + 0x58] = a0\n 24271: a0 = u64 [sp + 0x1b0]\n 24275: u64 [sp + 0x50] = a0\n 24278: s1 = u64 [sp + 0x1a8]\n 24282: u64 [sp + 408] = 0\n 24286: u64 [sp + 400] = 0\n 24290: u64 [sp + 392] = 0\n 24294: u64 [sp + 384] = 0x4\n 24299: u64 [sp + 440] = 0\n 24303: u64 [sp + 432] = 0\n 24307: u64 [sp + 424] = 0\n 24311: u64 [sp + 416] = 0\n 24315: u32 [sp + 448] = 0x20\n 24320: i32 a1 = sp + 0x180\n 24324: i32 a3 = sp + 0x1a0\n 24328: i32 a4 = sp + 0x1c0\n 24332: a2 = 0xffffffffffffffff\n 24335: a0 = 0\n 24337: ecalli 6 // 'get_storage'\n 24339: t0 = u64 [sp + 0x1a0]\n 24343: a1 = u64 [sp + 0x1a8]\n 24347: a2 = u64 [sp + 0x1b0]\n 24351: a3 = u64 [sp + 0x1b8]\n 24355: a4 = reverse s1\n 24357: a5 = a4 << 0x20\n 24360: a0 = u64 [sp + 0x50]\n 24363: s1 = reverse a0\n 24365: s1 = s1 >> 0x20\n 24368: a5 = a5 | s1\n 24371: a4 = a4 >> 0x20\n 24374: a0 = u64 [sp + 0x58]\n 24377: a0 = reverse a0\n 24379: s1 = a0 << 0x20\n 24382: a4 = a4 | s1\n 24385: a0 = a0 >> 0x20\n 24388: u64 [sp + 0x108] = a4\n 24392: u64 [sp + 0x100] = a5\n 24396: u32 [sp + 0x110] = a0\n 24400: u64 [sp + 0x138] = a3\n 24404: u64 [sp + 0x130] = a2\n 24408: u64 [sp + 0x128] = a1\n 24412: u64 [sp + 0x120] = t0\n 24416: a0 = 0\n 24418: a1 = 0\n 24420: ra = 316, jump @0\n      : @347 [@dyn 158] (gas: 4)\n 24426: u64 [sp + 0x58] = a0\n 24429: a0 = 0\n 24431: a1 = 0\n 24433: ra = 318, jump @0\n      : @348 [@dyn 159] (gas: 27)\n 24439: u32 [sp + 320] = 0\n 24443: u64 [sp + 376] = 0\n 24447: u64 [sp + 368] = 0\n 24451: u64 [sp + 360] = 0\n 24455: u64 [sp + 352] = 0\n 24459: a1 = sp + 0x100\n 24463: a1 = a1 << 0x20\n 24466: s1 = a1 >> 0x20\n 24469: a1 = sp + 0x120\n 24473: a1 = a1 << 0x20\n 24476: a1 = a1 >> 0x20\n 24479: a2 = sp + 0x160\n 24483: a2 = a2 << 0x20\n 24486: a3 = a2 | a1\n 24489: a4 = u64 [sp + 0x58]\n 24492: a4 = a4 << 0x20\n 24495: a4 = a4 >> 0x20\n 24498: a0 = a0 << 0x20\n 24501: a0 = a0 >> 0x20\n 24504: a1 = sp + 0x140\n 24508: a1 = a1 << 0x20\n 24511: a5 = a1 | a0\n 24514: a1 = 0xffffffffffffffff\n 24517: a2 = 0xffffffffffffffff\n 24520: a0 = s1\n 24522: ecalli 0 // 'call'\n 24523: fallthrough\n      : @349 (gas: 1)\n 24524: jump @363 if a0 != 0\n      : @350 (gas: 6)\n 24528: sp = s0 + 0xfffffffffffffe20\n 24532: ra = u64 [sp + 0x1d8]\n 24536: s0 = u64 [sp + 0x1d0]\n 24540: s1 = u64 [sp + 0x1c8]\n 24544: sp = sp + 0x1e0\n 24548: ret\n      : @351 (gas: 3)\n 24550: a0 = 0x40\n 24553: a1 = 0x20\n 24556: ra = 320, jump @0\n      : @352 [@dyn 160] (gas: 103)\n 24562: a1 = u8 [a0 + 0x11]\n 24565: a2 = u8 [a0 + 0x10]\n 24568: a3 = u8 [a0 + 0x12]\n 24571: a4 = u8 [a0 + 0x13]\n 24574: a1 = a1 << 0x8\n 24577: a1 = a1 | a2\n 24580: a3 = a3 << 0x10\n 24583: a4 = a4 << 0x18\n 24586: a3 = a3 | a4\n 24589: a1 = a1 | a3\n 24592: a2 = u8 [a0 + 0x15]\n 24595: a3 = u8 [a0 + 0x14]\n 24598: a4 = u8 [a0 + 0x16]\n 24601: a5 = u8 [a0 + 0x17]\n 24604: a2 = a2 << 0x8\n 24607: a2 = a2 | a3\n 24610: a4 = a4 << 0x10\n 24613: a5 = a5 << 0x18\n 24616: a4 = a4 | a5\n 24619: a2 = a2 | a4\n 24622: a2 = a2 << 0x20\n 24625: t0 = a2 | a1\n 24628: a2 = u8 [a0 + 0x1]\n 24631: a3 = u8 [a0]\n 24633: a4 = u8 [a0 + 0x2]\n 24636: a5 = u8 [a0 + 0x3]\n 24639: a2 = a2 << 0x8\n 24642: a2 = a2 | a3\n 24645: a4 = a4 << 0x10\n 24648: a5 = a5 << 0x18\n 24651: a4 = a4 | a5\n 24654: a2 = a2 | a4\n 24657: a3 = u8 [a0 + 0x5]\n 24660: a4 = u8 [a0 + 0x4]\n 24663: a5 = u8 [a0 + 0x6]\n 24666: s1 = u8 [a0 + 0x7]\n 24669: a3 = a3 << 0x8\n 24672: a3 = a3 | a4\n 24675: a5 = a5 << 0x10\n 24678: s1 = s1 << 0x18\n 24681: a5 = a5 | s1\n 24684: a3 = a3 | a5\n 24687: a3 = a3 << 0x20\n 24690: a2 = a2 | a3\n 24693: a3 = u8 [a0 + 0x19]\n 24696: a4 = u8 [a0 + 0x18]\n 24699: a5 = u8 [a0 + 0x1a]\n 24702: s1 = u8 [a0 + 0x1b]\n 24705: a3 = a3 << 0x8\n 24708: a3 = a3 | a4\n 24711: a5 = a5 << 0x10\n 24714: s1 = s1 << 0x18\n 24717: a5 = a5 | s1\n 24720: a3 = a3 | a5\n 24723: a4 = u8 [a0 + 0x1d]\n 24726: a5 = u8 [a0 + 0x1c]\n 24729: s1 = u8 [a0 + 0x1e]\n 24732: a1 = u8 [a0 + 0x1f]\n 24735: a4 = a4 << 0x8\n 24738: a4 = a4 | a5\n 24741: s1 = s1 << 0x10\n 24744: a1 = a1 << 0x18\n 24747: a1 = a1 | s1\n 24750: a1 = a1 | a4\n 24753: a1 = a1 << 0x20\n 24756: a3 = a3 | a1\n 24759: a1 = u8 [a0 + 0x9]\n 24762: a4 = u8 [a0 + 0x8]\n 24765: a5 = u8 [a0 + 0xa]\n 24768: s1 = u8 [a0 + 0xb]\n 24771: a1 = a1 << 0x8\n 24774: a1 = a1 | a4\n 24777: a5 = a5 << 0x10\n 24780: s1 = s1 << 0x18\n 24783: a5 = a5 | s1\n 24786: a1 = a1 | a5\n 24789: a4 = u8 [a0 + 0xd]\n 24792: a5 = u8 [a0 + 0xc]\n 24795: s1 = u8 [a0 + 0xe]\n 24798: a0 = u8 [a0 + 0xf]\n 24801: a4 = a4 << 0x8\n 24804: a4 = a4 | a5\n 24807: s1 = s1 << 0x10\n 24810: a0 = a0 << 0x18\n 24813: a0 = a0 | s1\n 24816: a0 = a0 | a4\n 24819: a0 = a0 << 0x20\n 24822: a0 = a0 | a1\n 24825: s1 = reverse a0\n 24827: a1 = reverse a3\n 24829: a2 = reverse a2\n 24831: a0 = reverse t0\n 24833: u64 [sp + 0x58] = a0\n 24836: u64 [sp + 0x50] = a2\n 24839: a0 = a0 | a2\n 24842: a2 = a1\n 24844: a1 = a1 | s1\n 24847: a1 = a1 | a0\n 24850: a1 = a1 >> 0x20\n 24853: a0 = a0 | s1\n 24856: a0 = a0 << 0x20\n 24859: a0 = a0 | a1\n 24862: jump @362 if a0 != 0\n      : @353 (gas: 5)\n 24866: u64 [sp + 0x48] = a2\n 24869: i32 a0 = a2 + 0\n 24871: a1 = 0x20\n 24874: u64 [sp + 0x40] = a0\n 24877: ra = 322, jump @0\n      : @354 [@dyn 161] (gas: 50)\n 24883: u8 [a0 + 31] = 0\n 24886: u8 [a0 + 30] = 0\n 24889: u8 [a0 + 29] = 0\n 24892: u8 [a0 + 28] = 0\n 24895: u8 [a0 + 27] = 0\n 24898: u8 [a0 + 26] = 0\n 24901: u8 [a0 + 25] = 0\n 24904: u8 [a0 + 24] = 0\n 24907: u8 [a0 + 23] = 0\n 24910: u8 [a0 + 22] = 0\n 24913: u8 [a0 + 21] = 0\n 24916: u8 [a0 + 20] = 0\n 24919: u8 [a0 + 19] = 0\n 24922: u8 [a0 + 18] = 0\n 24925: u8 [a0 + 17] = 0\n 24928: u8 [a0 + 16] = 0\n 24931: u8 [a0 + 15] = 0\n 24934: u8 [a0 + 14] = 0\n 24937: u8 [a0 + 13] = 0\n 24940: u8 [a0 + 12] = 0\n 24943: u8 [a0 + 11] = 0\n 24946: u8 [a0 + 10] = 0\n 24949: u8 [a0 + 9] = 0\n 24952: u8 [a0 + 8] = 0\n 24955: u8 [a0 + 7] = 0\n 24958: u8 [a0 + 6] = 0\n 24961: u8 [a0 + 5] = 0\n 24964: u8 [a0 + 4] = 0\n 24967: u8 [a0 + 3] = 0xa0\n 24972: u8 [a0 + 2] = 0x79\n 24976: u8 [a0 + 1] = 0xc3\n 24981: u8 [a0 + 0] = 0x8\n 24984: a1 = u64 [sp + 0x48]\n 24987: a0 = a1 + 0x4\n 24990: a1 = a0 <u a1\n 24993: a3 = u64 [sp + 0x58]\n 24996: a2 = a3 + a1\n 24999: a3 = a2 <u a3\n 25002: a3 = a1 if a1 == 0\n 25005: a3 = a3 + s1\n 25008: a1 = a3 <u s1\n 25011: a4 = u64 [sp + 0x50]\n 25014: a4 = a4 + a1\n 25017: u64 [sp + 0x68] = a2\n 25020: u64 [sp + 0x60] = a0\n 25023: u64 [sp + 0x70] = a3\n 25026: a0 = sp + 0x80\n 25030: a1 = sp + 0x60\n 25033: u64 [sp + 0x78] = a4\n 25036: ra = 324, jump @321\n      : @355 [@dyn 162] (gas: 5)\n 25042: a0 = u64 [sp + 0x88]\n 25046: t0 = u64 [sp + 0x98]\n 25050: t1 = u64 [sp + 0x80]\n 25054: a3 = u64 [sp + 0x90]\n 25058: jump @361\n      : @356 (gas: 3)\n 25061: a0 = 0x40\n 25064: a1 = 0x20\n 25067: ra = 326, jump @0\n      : @357 [@dyn 163] (gas: 103)\n 25073: a1 = u8 [a0 + 0x11]\n 25076: a2 = u8 [a0 + 0x10]\n 25079: a3 = u8 [a0 + 0x12]\n 25082: a4 = u8 [a0 + 0x13]\n 25085: a1 = a1 << 0x8\n 25088: a1 = a1 | a2\n 25091: a3 = a3 << 0x10\n 25094: a4 = a4 << 0x18\n 25097: a3 = a3 | a4\n 25100: a1 = a1 | a3\n 25103: a2 = u8 [a0 + 0x15]\n 25106: a3 = u8 [a0 + 0x14]\n 25109: a4 = u8 [a0 + 0x16]\n 25112: a5 = u8 [a0 + 0x17]\n 25115: a2 = a2 << 0x8\n 25118: a2 = a2 | a3\n 25121: a4 = a4 << 0x10\n 25124: a5 = a5 << 0x18\n 25127: a4 = a4 | a5\n 25130: a2 = a2 | a4\n 25133: a2 = a2 << 0x20\n 25136: t0 = a2 | a1\n 25139: a2 = u8 [a0 + 0x1]\n 25142: a3 = u8 [a0]\n 25144: a4 = u8 [a0 + 0x2]\n 25147: a5 = u8 [a0 + 0x3]\n 25150: a2 = a2 << 0x8\n 25153: a2 = a2 | a3\n 25156: a4 = a4 << 0x10\n 25159: a5 = a5 << 0x18\n 25162: a4 = a4 | a5\n 25165: a2 = a2 | a4\n 25168: a3 = u8 [a0 + 0x5]\n 25171: a4 = u8 [a0 + 0x4]\n 25174: a5 = u8 [a0 + 0x6]\n 25177: s1 = u8 [a0 + 0x7]\n 25180: a3 = a3 << 0x8\n 25183: a3 = a3 | a4\n 25186: a5 = a5 << 0x10\n 25189: s1 = s1 << 0x18\n 25192: a5 = a5 | s1\n 25195: a3 = a3 | a5\n 25198: a3 = a3 << 0x20\n 25201: a2 = a2 | a3\n 25204: a3 = u8 [a0 + 0x19]\n 25207: a4 = u8 [a0 + 0x18]\n 25210: a5 = u8 [a0 + 0x1a]\n 25213: s1 = u8 [a0 + 0x1b]\n 25216: a3 = a3 << 0x8\n 25219: a3 = a3 | a4\n 25222: a5 = a5 << 0x10\n 25225: s1 = s1 << 0x18\n 25228: a5 = a5 | s1\n 25231: a3 = a3 | a5\n 25234: a4 = u8 [a0 + 0x1d]\n 25237: a5 = u8 [a0 + 0x1c]\n 25240: s1 = u8 [a0 + 0x1e]\n 25243: a1 = u8 [a0 + 0x1f]\n 25246: a4 = a4 << 0x8\n 25249: a4 = a4 | a5\n 25252: s1 = s1 << 0x10\n 25255: a1 = a1 << 0x18\n 25258: a1 = a1 | s1\n 25261: a1 = a1 | a4\n 25264: a1 = a1 << 0x20\n 25267: a3 = a3 | a1\n 25270: a1 = u8 [a0 + 0x9]\n 25273: a4 = u8 [a0 + 0x8]\n 25276: a5 = u8 [a0 + 0xa]\n 25279: s1 = u8 [a0 + 0xb]\n 25282: a1 = a1 << 0x8\n 25285: a1 = a1 | a4\n 25288: a5 = a5 << 0x10\n 25291: s1 = s1 << 0x18\n 25294: a5 = a5 | s1\n 25297: a1 = a1 | a5\n 25300: a4 = u8 [a0 + 0xd]\n 25303: a5 = u8 [a0 + 0xc]\n 25306: s1 = u8 [a0 + 0xe]\n 25309: a0 = u8 [a0 + 0xf]\n 25312: a4 = a4 << 0x8\n 25315: a4 = a4 | a5\n 25318: s1 = s1 << 0x10\n 25321: a0 = a0 << 0x18\n 25324: a0 = a0 | s1\n 25327: a0 = a0 | a4\n 25330: a0 = a0 << 0x20\n 25333: a0 = a0 | a1\n 25336: s1 = reverse a0\n 25338: a1 = reverse a3\n 25340: a2 = reverse a2\n 25342: a0 = reverse t0\n 25344: u64 [sp + 0x58] = a0\n 25347: u64 [sp + 0x50] = a2\n 25350: a0 = a0 | a2\n 25353: a2 = a1\n 25355: a1 = a1 | s1\n 25358: a1 = a1 | a0\n 25361: a1 = a1 >> 0x20\n 25364: a0 = a0 | s1\n 25367: a0 = a0 << 0x20\n 25370: a0 = a0 | a1\n 25373: jump @362 if a0 != 0\n      : @358 (gas: 5)\n 25377: u64 [sp + 0x48] = a2\n 25380: i32 a0 = a2 + 0\n 25382: a1 = 0x20\n 25385: u64 [sp + 0x40] = a0\n 25388: ra = 328, jump @0\n      : @359 [@dyn 164] (gas: 50)\n 25394: u8 [a0 + 31] = 0\n 25397: u8 [a0 + 30] = 0\n 25400: u8 [a0 + 29] = 0\n 25403: u8 [a0 + 28] = 0\n 25406: u8 [a0 + 27] = 0\n 25409: u8 [a0 + 26] = 0\n 25412: u8 [a0 + 25] = 0\n 25415: u8 [a0 + 24] = 0\n 25418: u8 [a0 + 23] = 0\n 25421: u8 [a0 + 22] = 0\n 25424: u8 [a0 + 21] = 0\n 25427: u8 [a0 + 20] = 0\n 25430: u8 [a0 + 19] = 0\n 25433: u8 [a0 + 18] = 0\n 25436: u8 [a0 + 17] = 0\n 25439: u8 [a0 + 16] = 0\n 25442: u8 [a0 + 15] = 0\n 25445: u8 [a0 + 14] = 0\n 25448: u8 [a0 + 13] = 0\n 25451: u8 [a0 + 12] = 0\n 25454: u8 [a0 + 11] = 0\n 25457: u8 [a0 + 10] = 0\n 25460: u8 [a0 + 9] = 0\n 25463: u8 [a0 + 8] = 0\n 25466: u8 [a0 + 7] = 0\n 25469: u8 [a0 + 6] = 0\n 25472: u8 [a0 + 5] = 0\n 25475: u8 [a0 + 4] = 0\n 25478: u8 [a0 + 3] = 0xa0\n 25483: u8 [a0 + 2] = 0x79\n 25487: u8 [a0 + 1] = 0xc3\n 25492: u8 [a0 + 0] = 0x8\n 25495: a1 = u64 [sp + 0x48]\n 25498: a0 = a1 + 0x4\n 25501: a1 = a0 <u a1\n 25504: a3 = u64 [sp + 0x58]\n 25507: a2 = a3 + a1\n 25510: a3 = a2 <u a3\n 25513: a3 = a1 if a1 == 0\n 25516: a3 = a3 + s1\n 25519: a1 = a3 <u s1\n 25522: a4 = u64 [sp + 0x50]\n 25525: a4 = a4 + a1\n 25528: u64 [sp + 0xa8] = a2\n 25532: u64 [sp + 0xa0] = a0\n 25536: u64 [sp + 0xb0] = a3\n 25540: a0 = sp + 0xc0\n 25544: a1 = sp + 0xa0\n 25548: u64 [sp + 0xb8] = a4\n 25552: ra = 330, jump @329\n      : @360 [@dyn 165] (gas: 5)\n 25558: a0 = u64 [sp + 0xc8]\n 25562: t0 = u64 [sp + 0xd8]\n 25566: t1 = u64 [sp + 0xc0]\n 25570: a3 = u64 [sp + 0xd0]\n 25574: fallthrough\n      : @361 (gas: 26)\n 25575: a1 = u64 [sp + 0x58]\n 25578: a4 = a0 ^ a1\n 25581: a5 = a0 <u a1\n 25584: t2 = a1\n 25586: a2 = u64 [sp + 0x48]\n 25589: a1 = t1 <u a2\n 25592: a5 = a1 if a4 == 0\n 25595: a4 = a3 - s1\n 25598: a3 = a3 <u s1\n 25601: s1 = u64 [sp + 0x50]\n 25604: s1 = t0 - s1\n 25607: s1 = s1 - a3\n 25610: a3 = a4 <u a5\n 25613: s1 = s1 - a3\n 25616: a4 = a4 - a5\n 25619: a0 = a0 - t2\n 25622: a1 = a0 - a1\n 25625: a0 = t1 - a2\n 25628: a1 = a1 | s1\n 25631: a2 = a0 | a4\n 25634: a2 = a2 | a1\n 25637: a1 = a1 | a4\n 25640: a2 = a2 >> 0x20\n 25643: a1 = a1 << 0x20\n 25646: a1 = a1 | a2\n 25649: jump @364 if a1 == 0\n      : @362 (gas: 1)\n 25652: trap\n      : @363 (gas: 1)\n 25653: ra = 332, jump @283\n      : @364 [@dyn 166] (gas: 4)\n 25659: i32 s1 = a0 + 0\n 25661: a0 = u64 [sp + 0x40]\n 25664: a1 = s1\n 25666: ra = 334, jump @0\n      : @365 [@dyn 167] (gas: 7)\n 25672: i32 a1 = a0 + 0\n 25674: a0 = 0x1\n 25677: a2 = s1\n 25679: ecalli 11 // 'seal_return'\n 25681: a0 = 0\n 25683: ra = 0x150\n 25687: jump @10\n      : @366 [export #0: 'call'] (gas: 2)\n 25690: a0 = 0\n 25692: ra = 336, jump @10\n      : @367 [@dyn 168] [export #1: 'deploy'] (gas: 2)\n 25698: a0 = 0x1\n 25701: ra = 338, jump @10\n      : @368 [@dyn 169] (gas: 48)\n 25707: sp = sp + 0xffffffffffffffa0\n 25710: u64 [sp + 0x58] = ra\n 25713: u64 [sp + 0x50] = s0\n 25716: u64 [sp + 0x48] = s1\n 25719: s0 = sp + 0x60\n 25722: sp = sp & 0xfffffffffffffff0\n 25725: a2 = u64 [a1]\n 25727: a3 = u64 [a1 + 0x8]\n 25730: a4 = u64 [a1 + 0x10]\n 25733: a1 = u64 [a1 + 0x18]\n 25736: s1 = a0\n 25738: u64 [sp + 0x18] = a1\n 25741: u64 [sp + 0x10] = a4\n 25744: u64 [sp + 0x8] = a3\n 25747: a0 = sp + 0x20\n 25750: a1 = sp\n 25752: u64 [sp] = a2\n 25754: a2 = u64 [a1]\n 25756: t0 = u64 [a1 + 0x18]\n 25759: a4 = u64 [a1 + 0x8]\n 25762: a1 = u64 [a1 + 0x10]\n 25765: a5 = a2 + 0x1f\n 25768: a2 = a5 <u a2\n 25771: a3 = a4 + a2\n 25774: a4 = a3 <u a4\n 25777: a4 = a2 if a2 == 0\n 25780: a4 = a4 + a1\n 25783: a1 = a4 <u a1\n 25786: a1 = a1 + t0\n 25789: a5 = a5 & 0xffffffffffffffe0\n 25792: u64 [a0] = a5\n 25794: u64 [a0 + 0x8] = a3\n 25797: u64 [a0 + 0x10] = a4\n 25800: u64 [a0 + 0x18] = a1\n 25803: a0 = u64 [sp + 0x30]\n 25806: a1 = u64 [sp + 0x38]\n 25809: a2 = u64 [sp + 0x20]\n 25812: a3 = u64 [sp + 0x28]\n 25815: u64 [s1 + 0x10] = a0\n 25818: u64 [s1 + 0x18] = a1\n 25821: u64 [s1] = a2\n 25823: u64 [s1 + 0x8] = a3\n 25826: sp = s0 + 0xffffffffffffffa0\n 25829: ra = u64 [sp + 0x58]\n 25832: s0 = u64 [sp + 0x50]\n 25835: s1 = u64 [sp + 0x48]\n 25838: sp = sp + 0x60\n 25841: ret\n",
						"bytecode": {
							"object": ""
						},
						"deployedBytecode": {
							"object": ""
						},
						"methodIdentifiers": {
							"bid()": "1998aeef",
							"biddingEnd()": "423b217f",
							"endAuction()": "fe67a54b",
							"ended()": "12fa6feb",
							"highestBid()": "d57bde79",
							"landlord()": "dc1997ea",
							"minimumBid()": "d3a86386",
							"pendingReturns(address)": "26b387bb",
							"withdraw()": "3ccfd60b"
						}
					},
					"irOptimized": "/// @use-src 0:\"contracts/RentBid.sol\"\nobject \"RentBid_190\" {\n    code {\n        {\n            /// @src 0:188:1804  \"contract RentBid {...\"\n            mstore(64, memoryguard(0x80))\n            if callvalue()\n            {\n                revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n            }\n            let _1, _2 := copy_arguments_for_constructor_object_RentBid()\n            constructor_RentBid(_1, _2)\n            let _3 := allocate_unbounded()\n            codecopy(_3, dataoffset(\"RentBid_190_deployed\"), datasize(\"RentBid_190_deployed\"))\n            return(_3, datasize(\"RentBid_190_deployed\"))\n        }\n        function allocate_unbounded() -> memPtr\n        { memPtr := mload(64) }\n        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n        { revert(0, 0) }\n        function round_up_to_mul_of(value) -> result\n        {\n            result := and(add(value, 31), not(31))\n        }\n        function panic_error_0x41()\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x41)\n            revert(0, 0x24)\n        }\n        function finalize_allocation(memPtr, size)\n        {\n            let newFreePtr := add(memPtr, round_up_to_mul_of(size))\n            if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n            mstore(64, newFreePtr)\n        }\n        function allocate_memory(size) -> memPtr\n        {\n            memPtr := allocate_unbounded()\n            finalize_allocation(memPtr, size)\n        }\n        function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n        { revert(0, 0) }\n        function cleanup_uint256(value) -> cleaned\n        { cleaned := value }\n        function validator_revert_uint256(value)\n        {\n            if iszero(eq(value, cleanup_uint256(value))) { revert(0, 0) }\n        }\n        function abi_decode_uint256_fromMemory(offset, end) -> value\n        {\n            value := mload(offset)\n            validator_revert_uint256(value)\n        }\n        function abi_decode_uint256t_uint256_fromMemory(headStart, dataEnd) -> value0, value1\n        {\n            if slt(sub(dataEnd, headStart), 64)\n            {\n                revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n            }\n            let offset := 0\n            value0 := abi_decode_uint256_fromMemory(add(headStart, offset), dataEnd)\n            let offset_1 := 32\n            value1 := abi_decode_uint256_fromMemory(add(headStart, offset_1), dataEnd)\n        }\n        function copy_arguments_for_constructor_object_RentBid() -> ret_param, ret_param_1\n        {\n            let programSize := datasize(\"RentBid_190\")\n            let argSize := sub(codesize(), programSize)\n            let memoryDataOffset := allocate_memory(argSize)\n            codecopy(memoryDataOffset, programSize, argSize)\n            ret_param, ret_param_1 := abi_decode_uint256t_uint256_fromMemory(memoryDataOffset, add(memoryDataOffset, argSize))\n        }\n        function shift_left(value) -> newValue\n        { newValue := shl(0, value) }\n        function update_byte_slice_shift_0(value, toInsert) -> result\n        {\n            let mask := sub(shl(160, 1), 1)\n            toInsert := shift_left(toInsert)\n            value := and(value, not(mask))\n            result := or(value, and(toInsert, mask))\n        }\n        function cleanup_uint160(value) -> cleaned\n        {\n            cleaned := and(value, sub(shl(160, 1), 1))\n        }\n        function identity(value) -> ret\n        { ret := value }\n        function convert_uint160_to_uint160(value) -> converted\n        {\n            converted := cleanup_uint160(identity(cleanup_uint160(value)))\n        }\n        function convert_uint160_to_address(value) -> converted\n        {\n            converted := convert_uint160_to_uint160(value)\n        }\n        function convert_address_to_address(value) -> converted\n        {\n            converted := convert_uint160_to_address(value)\n        }\n        function prepare_store_address(value) -> ret\n        { ret := value }\n        function update_storage_value_offset_address_to_address(slot, value)\n        {\n            let convertedValue := convert_address_to_address(value)\n            sstore(slot, update_byte_slice_shift_0(sload(slot), prepare_store_address(convertedValue)))\n        }\n        function panic_error_0x11()\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n        function checked_add_uint256(x, y) -> sum\n        {\n            x := cleanup_uint256(x)\n            y := cleanup_uint256(y)\n            sum := add(x, y)\n            if gt(x, sum) { panic_error_0x11() }\n        }\n        function update_byte_slice_shift(value, toInsert) -> result\n        {\n            let mask := not(0)\n            toInsert := shift_left(toInsert)\n            value := and(value, not(mask))\n            result := or(value, and(toInsert, mask))\n        }\n        function convert_uint256_to_uint256(value) -> converted\n        {\n            converted := cleanup_uint256(identity(cleanup_uint256(value)))\n        }\n        function prepare_store_uint256(value) -> ret\n        { ret := value }\n        function update_storage_value_offset_uint256_to_uint256(slot, value)\n        {\n            let convertedValue := convert_uint256_to_uint256(value)\n            sstore(slot, update_byte_slice_shift(sload(slot), prepare_store_uint256(convertedValue)))\n        }\n        /// @ast-id 58 @src 0:603:783  \"constructor(uint256 _biddingTime, uint256 _minimumBid) {...\"\n        function constructor_RentBid(var_biddingTime, var_minimumBid)\n        {\n            /// @src 0:679:689  \"msg.sender\"\n            let expr := caller()\n            /// @src 0:668:689  \"landlord = msg.sender\"\n            update_storage_value_offset_address_to_address(0x00, expr)\n            /// @src 0:712:727  \"block.timestamp\"\n            let expr_1 := timestamp()\n            /// @src 0:730:742  \"_biddingTime\"\n            let _1 := var_biddingTime\n            let expr_2 := _1\n            /// @src 0:712:742  \"block.timestamp + _biddingTime\"\n            let expr_3 := checked_add_uint256(expr_1, expr_2)\n            /// @src 0:699:742  \"biddingEnd = block.timestamp + _biddingTime\"\n            update_storage_value_offset_uint256_to_uint256(0x01, expr_3)\n            /// @src 0:765:776  \"_minimumBid\"\n            let _2 := var_minimumBid\n            let expr_4 := _2\n            /// @src 0:752:776  \"minimumBid = _minimumBid\"\n            update_storage_value_offset_uint256_to_uint256(0x02, expr_4)\n        }\n    }\n    /// @use-src 0:\"contracts/RentBid.sol\"\n    object \"RentBid_190_deployed\" {\n        code {\n            {\n                /// @src 0:188:1804  \"contract RentBid {...\"\n                mstore(64, memoryguard(0x80))\n                if iszero(lt(calldatasize(), 4))\n                {\n                    let selector := shift_right_unsigned(calldataload(0))\n                    switch selector\n                    case 0x12fa6feb { external_fun_ended() }\n                    case 0x1998aeef { external_fun_bid() }\n                    case 0x26b387bb { external_fun_pendingReturns() }\n                    case 0x3ccfd60b { external_fun_withdraw() }\n                    case 0x423b217f { external_fun_biddingEnd() }\n                    case 0xd3a86386 { external_fun_minimumBid() }\n                    case 0xd57bde79 { external_fun_highestBid() }\n                    case 0xdc1997ea { external_fun_landlord() }\n                    case 0xfe67a54b { external_fun_endAuction() }\n                    default { }\n                }\n                revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()\n            }\n            function shift_right_unsigned(value) -> newValue\n            { newValue := shr(224, value) }\n            function allocate_unbounded() -> memPtr\n            { memPtr := mload(64) }\n            function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n            { revert(0, 0) }\n            function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n            { revert(0, 0) }\n            function abi_decode(headStart, dataEnd)\n            {\n                if slt(sub(dataEnd, headStart), 0)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n            }\n            function shift_right_unsigned_dynamic(bits, value) -> newValue\n            { newValue := shr(bits, value) }\n            function cleanup_from_storage_bool(value) -> cleaned\n            { cleaned := and(value, 0xff) }\n            function extract_from_storage_value_dynamict_bool(slot_value, offset) -> value\n            {\n                value := cleanup_from_storage_bool(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))\n            }\n            function read_from_storage_split_dynamic_bool(slot, offset) -> value\n            {\n                value := extract_from_storage_value_dynamict_bool(sload(slot), offset)\n            }\n            /// @ast-id 22 @src 0:459:476  \"bool public ended\"\n            function getter_fun_ended() -> ret\n            {\n                let slot := 6\n                let offset := 0\n                ret := read_from_storage_split_dynamic_bool(slot, offset)\n            }\n            /// @src 0:188:1804  \"contract RentBid {...\"\n            function cleanup_bool(value) -> cleaned\n            {\n                cleaned := iszero(iszero(value))\n            }\n            function abi_encode_bool_to_bool(value, pos)\n            {\n                mstore(pos, cleanup_bool(value))\n            }\n            function abi_encode_bool(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                abi_encode_bool_to_bool(value0, add(headStart, 0))\n            }\n            function external_fun_ended()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                let ret := getter_fun_ended()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_bool(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function abi_encode_tuple(headStart) -> tail\n            { tail := add(headStart, 0) }\n            function external_fun_bid()\n            {\n                abi_decode(4, calldatasize())\n                fun_bid()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function cleanup_uint160(value) -> cleaned\n            {\n                cleaned := and(value, sub(shl(160, 1), 1))\n            }\n            function cleanup_address(value) -> cleaned\n            {\n                cleaned := cleanup_uint160(value)\n            }\n            function validator_revert_address(value)\n            {\n                if iszero(eq(value, cleanup_address(value))) { revert(0, 0) }\n            }\n            function abi_decode_address(offset, end) -> value\n            {\n                value := calldataload(offset)\n                validator_revert_address(value)\n            }\n            function abi_decode_tuple_address(headStart, dataEnd) -> value0\n            {\n                if slt(sub(dataEnd, headStart), 32)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_address(add(headStart, offset), dataEnd)\n            }\n            function identity(value) -> ret\n            { ret := value }\n            function convert_uint160_to_uint160(value) -> converted\n            {\n                converted := cleanup_uint160(identity(cleanup_uint160(value)))\n            }\n            function convert_uint160_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_uint160(value)\n            }\n            function convert_address_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_address(value)\n            }\n            function mapping_index_access_mapping_address_uint256_of_address(slot, key) -> dataSlot\n            {\n                mstore(0, convert_address_to_address(key))\n                mstore(0x20, slot)\n                dataSlot := keccak256(0, 0x40)\n            }\n            function cleanup_from_storage_uint256(value) -> cleaned\n            { cleaned := value }\n            function extract_from_storage_value_dynamict_uint256(slot_value, offset) -> value\n            {\n                value := cleanup_from_storage_uint256(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))\n            }\n            function read_from_storage_split_dynamic_uint256(slot, offset) -> value\n            {\n                value := extract_from_storage_value_dynamict_uint256(sload(slot), offset)\n            }\n            /// @ast-id 20 @src 0:404:453  \"mapping(address => uint256) public pendingReturns\"\n            function getter_fun_pendingReturns(key) -> ret\n            {\n                let slot := 5\n                let offset := 0\n                slot := mapping_index_access_mapping_address_uint256_of_address(slot, key)\n                ret := read_from_storage_split_dynamic_uint256(slot, offset)\n            }\n            /// @src 0:188:1804  \"contract RentBid {...\"\n            function cleanup_uint256(value) -> cleaned\n            { cleaned := value }\n            function abi_encode_uint256_to_uint256(value, pos)\n            {\n                mstore(pos, cleanup_uint256(value))\n            }\n            function abi_encode_uint256(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                abi_encode_uint256_to_uint256(value0, add(headStart, 0))\n            }\n            function external_fun_pendingReturns()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param := abi_decode_tuple_address(4, calldatasize())\n                let ret := getter_fun_pendingReturns(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_uint256(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function external_fun_withdraw()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                fun_withdraw()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            /// @ast-id 11 @src 0:314:339  \"uint256 public biddingEnd\"\n            function getter_fun_biddingEnd() -> ret\n            {\n                let slot := 1\n                let offset := 0\n                ret := read_from_storage_split_dynamic_uint256(slot, offset)\n            }\n            /// @src 0:188:1804  \"contract RentBid {...\"\n            function external_fun_biddingEnd()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                let ret := getter_fun_biddingEnd()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_uint256(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            /// @ast-id 13 @src 0:345:370  \"uint256 public minimumBid\"\n            function getter_fun_minimumBid() -> ret\n            {\n                let slot := 2\n                let offset := 0\n                ret := read_from_storage_split_dynamic_uint256(slot, offset)\n            }\n            /// @src 0:188:1804  \"contract RentBid {...\"\n            function external_fun_minimumBid()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                let ret := getter_fun_minimumBid()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_uint256(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function shift_right_0_unsigned(value) -> newValue\n            { newValue := shr(0, value) }\n            function cleanup_from_storage_address(value) -> cleaned\n            {\n                cleaned := and(value, sub(shl(160, 1), 1))\n            }\n            function extract_from_storage_value_offset_address(slot_value) -> value\n            {\n                value := cleanup_from_storage_address(shift_right_0_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_address(slot) -> value\n            {\n                value := extract_from_storage_value_offset_address(sload(slot))\n            }\n            function extract_from_storage_value_offset_uint256(slot_value) -> value\n            {\n                value := cleanup_from_storage_uint256(shift_right_0_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_uint256(slot) -> value\n            {\n                value := extract_from_storage_value_offset_uint256(sload(slot))\n            }\n            /// @ast-id 16 @src 0:376:397  \"Bid public highestBid\"\n            function getter_fun_highestBid() -> ret, ret_1\n            {\n                let slot := 3\n                ret := read_from_storage_split_offset_address(add(slot, 0))\n                ret_1 := read_from_storage_split_offset_uint256(add(slot, 1))\n            }\n            /// @src 0:188:1804  \"contract RentBid {...\"\n            function abi_encode_address(value, pos)\n            {\n                mstore(pos, cleanup_address(value))\n            }\n            function abi_encode_address_uint256(headStart, value0, value1) -> tail\n            {\n                tail := add(headStart, 64)\n                abi_encode_address(value0, add(headStart, 0))\n                abi_encode_uint256_to_uint256(value1, add(headStart, 32))\n            }\n            function external_fun_highestBid()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                let ret, ret_1 := getter_fun_highestBid()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_address_uint256(memPos, ret, ret_1)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function extract_from_storage_value_dynamict_address(slot_value, offset) -> value\n            {\n                value := cleanup_from_storage_address(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))\n            }\n            function read_from_storage_split_dynamic_address(slot, offset) -> value\n            {\n                value := extract_from_storage_value_dynamict_address(sload(slot), offset)\n            }\n            /// @ast-id 9 @src 0:285:308  \"address public landlord\"\n            function getter_fun_landlord() -> ret\n            {\n                let slot := 0\n                let offset := 0\n                ret := read_from_storage_split_dynamic_address(slot, offset)\n            }\n            /// @src 0:188:1804  \"contract RentBid {...\"\n            function abi_encode_tuple_address(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                abi_encode_address(value0, add(headStart, 0))\n            }\n            function external_fun_landlord()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                let ret := getter_fun_landlord()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple_address(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function external_fun_endAuction()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                fun_endAuction()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()\n            { revert(0, 0) }\n            function array_storeLengthForEncoding_string(pos, length) -> updated_pos\n            {\n                mstore(pos, length)\n                updated_pos := add(pos, 0x20)\n            }\n            function store_literal_in_memory_a0fa2d818fda730b57b69ddd34f18fce80fbcc8a51b95f97564dd0dcb6d45e35(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Bidding ended.\")\n            }\n            function abi_encode_stringliteral_a0fa(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 14)\n                store_literal_in_memory_a0fa2d818fda730b57b69ddd34f18fce80fbcc8a51b95f97564dd0dcb6d45e35(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_tuple_stringliteral_a0fa(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_a0fa(tail)\n            }\n            function require_helper_stringliteral_a0fa(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_tuple_stringliteral_a0fa(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function store_literal_in_memory_1b69cea4dd1bc42cb9c89f7ddcf749fad8c35c9b73f93fa0dfc6a8bfbe8df0ef(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Bid too low.\")\n            }\n            function abi_encode_stringliteral_1b69cea4dd1bc42cb9c89f7ddcf749fad8c35c9b73f93fa0dfc6a8bfbe8df0ef(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 12)\n                store_literal_in_memory_1b69cea4dd1bc42cb9c89f7ddcf749fad8c35c9b73f93fa0dfc6a8bfbe8df0ef(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_1b69(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_1b69cea4dd1bc42cb9c89f7ddcf749fad8c35c9b73f93fa0dfc6a8bfbe8df0ef(tail)\n            }\n            function require_helper_stringliteral_1b69(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_1b69(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function store_literal_in_memory_5dc34ddce75116985854950973e5007665ff9c5bf70776d43a373ddd14c06694(memPtr)\n            {\n                mstore(add(memPtr, 0), \"There already is a higher bid.\")\n            }\n            function abi_encode_stringliteral_5dc3(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 30)\n                store_literal_in_memory_5dc34ddce75116985854950973e5007665ff9c5bf70776d43a373ddd14c06694(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_tuple_stringliteral_5dc3(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_5dc3(tail)\n            }\n            function require_helper_stringliteral_5dc3(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_tuple_stringliteral_5dc3(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function cleanup_rational_by(value) -> cleaned\n            { cleaned := value }\n            function convert_rational_by_to_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_rational_by(value)))\n            }\n            function shift_left(value) -> newValue\n            { newValue := shl(0, value) }\n            function update_byte_slice_shift(value, toInsert) -> result\n            {\n                let mask := not(0)\n                toInsert := shift_left(toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function convert_uint256_to_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_uint256(value)))\n            }\n            function prepare_store_uint256(value) -> ret\n            { ret := value }\n            function update_storage_value_offset_uint256_to_uint256(slot, value)\n            {\n                let convertedValue := convert_uint256_to_uint256(value)\n                sstore(slot, update_byte_slice_shift(sload(slot), prepare_store_uint256(convertedValue)))\n            }\n            function round_up_to_mul_of(value) -> result\n            {\n                result := and(add(value, 31), not(31))\n            }\n            function panic_error_0x41()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(0, 0x24)\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, round_up_to_mul_of(size))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n                mstore(64, newFreePtr)\n            }\n            function allocate_memory(size) -> memPtr\n            {\n                memPtr := allocate_unbounded()\n                finalize_allocation(memPtr, size)\n            }\n            function allocate_memory_struct_struct_Bid_storage_ptr() -> memPtr\n            { memPtr := allocate_memory(64) }\n            function write_to_memory_address(memPtr, value)\n            {\n                mstore(memPtr, cleanup_address(value))\n            }\n            function write_to_memory_uint256(memPtr, value)\n            {\n                mstore(memPtr, cleanup_uint256(value))\n            }\n            function read_from_memoryt_address(ptr) -> returnValue\n            {\n                let value := cleanup_address(mload(ptr))\n                returnValue := value\n            }\n            function update_byte_slice_20_shift(value, toInsert) -> result\n            {\n                let mask := sub(shl(160, 1), 1)\n                toInsert := shift_left(toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function prepare_store_address(value) -> ret\n            { ret := value }\n            function update_storage_value_offset_address_to_address(slot, value)\n            {\n                let convertedValue := convert_address_to_address(value)\n                sstore(slot, update_byte_slice_20_shift(sload(slot), prepare_store_address(convertedValue)))\n            }\n            function read_from_memoryt_uint256(ptr) -> returnValue\n            {\n                let value := cleanup_uint256(mload(ptr))\n                returnValue := value\n            }\n            function copy_struct_to_storage_from_struct_Bid_to_struct_Bid(slot, value)\n            {\n                let memberSlot := add(slot, 0)\n                let memberSrcPtr := add(value, 0)\n                let memberValue := read_from_memoryt_address(memberSrcPtr)\n                update_storage_value_offset_address_to_address(memberSlot, memberValue)\n                let memberSlot_1 := add(slot, 1)\n                let memberSrcPtr_1 := add(value, 32)\n                let memberValue_1 := read_from_memoryt_uint256(memberSrcPtr_1)\n                update_storage_value_offset_uint256_to_uint256(memberSlot_1, memberValue_1)\n            }\n            function update_storage_value_offset_struct_Bid_to_struct_Bid(slot, value)\n            {\n                copy_struct_to_storage_from_struct_Bid_to_struct_Bid(slot, value)\n            }\n            /// @ast-id 117 @src 0:789:1257  \"function bid() external payable {...\"\n            function fun_bid()\n            {\n                /// @src 0:839:854  \"block.timestamp\"\n                let expr := timestamp()\n                /// @src 0:858:868  \"biddingEnd\"\n                let _1 := read_from_storage_split_offset_uint256(0x01)\n                let expr_1 := _1\n                /// @src 0:839:868  \"block.timestamp <= biddingEnd\"\n                let expr_2 := iszero(gt(cleanup_uint256(expr), cleanup_uint256(expr_1)))\n                /// @src 0:831:887  \"require(block.timestamp <= biddingEnd, \\\"Bidding ended.\\\")\"\n                require_helper_stringliteral_a0fa(expr_2)\n                /// @src 0:905:914  \"msg.value\"\n                let expr_3 := callvalue()\n                /// @src 0:918:928  \"minimumBid\"\n                let _2 := read_from_storage_split_offset_uint256(0x02)\n                let expr_4 := _2\n                /// @src 0:905:928  \"msg.value >= minimumBid\"\n                let expr_5 := iszero(lt(cleanup_uint256(expr_3), cleanup_uint256(expr_4)))\n                /// @src 0:897:945  \"require(msg.value >= minimumBid, \\\"Bid too low.\\\")\"\n                require_helper_stringliteral_1b69(expr_5)\n                /// @src 0:963:972  \"msg.value\"\n                let expr_6 := callvalue()\n                /// @src 0:975:985  \"highestBid\"\n                let _slot := 0x03\n                let expr_80_slot := _slot\n                /// @src 0:975:992  \"highestBid.amount\"\n                let _3 := add(expr_80_slot, 1)\n                let _4 := read_from_storage_split_offset_uint256(_3)\n                let expr_7 := _4\n                /// @src 0:963:992  \"msg.value > highestBid.amount\"\n                let expr_8 := gt(cleanup_uint256(expr_6), cleanup_uint256(expr_7))\n                /// @src 0:955:1027  \"require(msg.value > highestBid.amount, \\\"There already is a higher bid.\\\")\"\n                require_helper_stringliteral_5dc3(expr_8)\n                /// @src 0:1042:1052  \"highestBid\"\n                let _6_slot := 0x03\n                let expr_86_slot := _6_slot\n                /// @src 0:1042:1059  \"highestBid.amount\"\n                let _5 := add(expr_86_slot, 1)\n                let _6 := read_from_storage_split_offset_uint256(_5)\n                let expr_9 := _6\n                /// @src 0:1063:1064  \"0\"\n                let expr_10 := 0x00\n                /// @src 0:1042:1064  \"highestBid.amount != 0\"\n                let expr_11 := iszero(eq(cleanup_uint256(expr_9), convert_rational_by_to_uint256(expr_10)))\n                /// @src 0:1038:1144  \"if (highestBid.amount != 0) {...\"\n                if expr_11\n                {\n                    /// @src 0:1116:1126  \"highestBid\"\n                    let _9_slot := 0x03\n                    let expr_94_slot := _9_slot\n                    /// @src 0:1116:1133  \"highestBid.amount\"\n                    let _7 := add(expr_94_slot, 1)\n                    let _8 := read_from_storage_split_offset_uint256(_7)\n                    let expr_12 := _8\n                    /// @src 0:1080:1094  \"pendingReturns\"\n                    let _12_slot := 0x05\n                    let expr_90_slot := _12_slot\n                    /// @src 0:1095:1105  \"highestBid\"\n                    let _13_slot := 0x03\n                    let expr_slot := _13_slot\n                    /// @src 0:1095:1112  \"highestBid.bidder\"\n                    let _9 := add(expr_slot, 0)\n                    let _10 := read_from_storage_split_offset_address(_9)\n                    let expr_13 := _10\n                    /// @src 0:1080:1113  \"pendingReturns[highestBid.bidder]\"\n                    let _11 := mapping_index_access_mapping_address_uint256_of_address(expr_90_slot, expr_13)\n                    /// @src 0:1080:1133  \"pendingReturns[highestBid.bidder] = highestBid.amount\"\n                    update_storage_value_offset_uint256_to_uint256(_11, expr_12)\n                }\n                /// @src 0:1171:1181  \"msg.sender\"\n                let expr_14 := caller()\n                /// @src 0:1183:1192  \"msg.value\"\n                let expr_15 := callvalue()\n                /// @src 0:1167:1193  \"Bid(msg.sender, msg.value)\"\n                let expr_mpos := allocate_memory_struct_struct_Bid_storage_ptr()\n                write_to_memory_address(add(expr_mpos, 0), expr_14)\n                write_to_memory_uint256(add(expr_mpos, 32), expr_15)\n                /// @src 0:1154:1193  \"highestBid = Bid(msg.sender, msg.value)\"\n                update_storage_value_offset_struct_Bid_to_struct_Bid(0x03, expr_mpos)\n                /// @src 0:1228:1238  \"msg.sender\"\n                let expr_16 := caller()\n                /// @src 0:1240:1249  \"msg.value\"\n                let expr_17 := callvalue()\n                /// @src 0:1208:1250  \"HighestBidIncreased(msg.sender, msg.value)\"\n                let _12 := 0xf4757a49b326036464bec6fe419a4ae38c8a02ce3e68bf0809674f6aab8ad300\n                let _13 := allocate_unbounded()\n                let _14 := abi_encode_address_uint256(_13, expr_16, expr_17)\n                log1(_13, sub(_14, _13), _12)\n            }\n            /// @src 0:188:1804  \"contract RentBid {...\"\n            function store_literal_in_memory_89e29624f9c8f2d9f2ba850f0474a53cd666f32dac547fc539d47f8d1d3a5fb8(memPtr)\n            {\n                mstore(add(memPtr, 0), \"No funds to withdraw.\")\n            }\n            function abi_encode_stringliteral_89e29624f9c8f2d9f2ba850f0474a53cd666f32dac547fc539d47f8d1d3a5fb8(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 21)\n                store_literal_in_memory_89e29624f9c8f2d9f2ba850f0474a53cd666f32dac547fc539d47f8d1d3a5fb8(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_89e2(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_89e29624f9c8f2d9f2ba850f0474a53cd666f32dac547fc539d47f8d1d3a5fb8(tail)\n            }\n            function require_helper_stringliteral_89e2(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_89e2(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function convert_uint160_to_address_payable(value) -> converted\n            {\n                converted := convert_uint160_to_uint160(value)\n            }\n            function convert_address_to_address_payable(value) -> converted\n            {\n                converted := convert_uint160_to_address_payable(value)\n            }\n            function convert_address_payable_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_address(value)\n            }\n            function revert_forward()\n            {\n                let pos := allocate_unbounded()\n                returndatacopy(pos, 0, returndatasize())\n                revert(pos, returndatasize())\n            }\n            /// @ast-id 151 @src 0:1263:1489  \"function withdraw() external {...\"\n            function fun_withdraw()\n            {\n                /// @src 0:1316:1330  \"pendingReturns\"\n                let _21_slot := 0x05\n                let expr_122_slot := _21_slot\n                /// @src 0:1331:1341  \"msg.sender\"\n                let expr := caller()\n                /// @src 0:1316:1342  \"pendingReturns[msg.sender]\"\n                let _1 := mapping_index_access_mapping_address_uint256_of_address(expr_122_slot, expr)\n                let _2 := read_from_storage_split_offset_uint256(_1)\n                let expr_1 := _2\n                /// @src 0:1302:1342  \"uint amount = pendingReturns[msg.sender]\"\n                let var_amount := expr_1\n                /// @src 0:1360:1366  \"amount\"\n                let _3 := var_amount\n                let expr_2 := _3\n                /// @src 0:1369:1370  \"0\"\n                let expr_3 := 0x00\n                /// @src 0:1360:1370  \"amount > 0\"\n                let expr_4 := gt(cleanup_uint256(expr_2), convert_rational_by_to_uint256(expr_3))\n                /// @src 0:1352:1396  \"require(amount > 0, \\\"No funds to withdraw.\\\")\"\n                require_helper_stringliteral_89e2(expr_4)\n                /// @src 0:1435:1436  \"0\"\n                let expr_5 := 0x00\n                /// @src 0:1406:1436  \"pendingReturns[msg.sender] = 0\"\n                let _4 := convert_rational_by_to_uint256(expr_5)\n                /// @src 0:1406:1420  \"pendingReturns\"\n                let _26_slot := 0x05\n                let expr_134_slot := _26_slot\n                /// @src 0:1421:1431  \"msg.sender\"\n                let expr_6 := caller()\n                /// @src 0:1406:1432  \"pendingReturns[msg.sender]\"\n                let _5 := mapping_index_access_mapping_address_uint256_of_address(expr_134_slot, expr_6)\n                /// @src 0:1406:1436  \"pendingReturns[msg.sender] = 0\"\n                update_storage_value_offset_uint256_to_uint256(_5, _4)\n                /// @src 0:1454:1464  \"msg.sender\"\n                let expr_7 := caller()\n                /// @src 0:1446:1465  \"payable(msg.sender)\"\n                let expr_8 := convert_address_to_address_payable(expr_7)\n                /// @src 0:1446:1474  \"payable(msg.sender).transfer\"\n                let expr_address := convert_address_payable_to_address(expr_8)\n                /// @src 0:1475:1481  \"amount\"\n                let _6 := var_amount\n                let expr_9 := _6\n                /// @src 0:1446:1482  \"payable(msg.sender).transfer(amount)\"\n                let _7 := 0\n                if iszero(expr_9) { _7 := 2300 }\n                let _8 := call(_7, expr_address, expr_9, 0, 0, 0, 0)\n                if iszero(_8) { revert_forward() }\n            }\n            /// @src 0:188:1804  \"contract RentBid {...\"\n            function store_literal_in_memory_65cbaa8ff228de128dd382a5d49f2351624568c26677af318c390a9dbebd59b7(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Auction not yet ended.\")\n            }\n            function abi_encode_stringliteral_65cbaa8ff228de128dd382a5d49f2351624568c26677af318c390a9dbebd59b7(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 22)\n                store_literal_in_memory_65cbaa8ff228de128dd382a5d49f2351624568c26677af318c390a9dbebd59b7(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_65cb(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_65cbaa8ff228de128dd382a5d49f2351624568c26677af318c390a9dbebd59b7(tail)\n            }\n            function require_helper_stringliteral_65cb(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_65cb(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function extract_from_storage_value_offset_bool(slot_value) -> value\n            {\n                value := cleanup_from_storage_bool(shift_right_0_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_bool(slot) -> value\n            {\n                value := extract_from_storage_value_offset_bool(sload(slot))\n            }\n            function store_literal_in_memory_54854b7ae1c82c7a55a4c0721457d90a50b8592fc3dce7f0d7542ab8aa48a6be(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Auction already ended.\")\n            }\n            function abi_encode_stringliteral(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 22)\n                store_literal_in_memory_54854b7ae1c82c7a55a4c0721457d90a50b8592fc3dce7f0d7542ab8aa48a6be(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_tuple_stringliteral(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral(tail)\n            }\n            function require_helper_stringliteral(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_tuple_stringliteral(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function update_byte_slice_shift_0(value, toInsert) -> result\n            {\n                let mask := 255\n                toInsert := shift_left(toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function convert_bool_to_bool(value) -> converted\n            {\n                converted := cleanup_bool(value)\n            }\n            function prepare_store_bool(value) -> ret\n            { ret := value }\n            function update_storage_value_offset_bool_to_bool(slot, value)\n            {\n                let convertedValue := convert_bool_to_bool(value)\n                sstore(slot, update_byte_slice_shift_0(sload(slot), prepare_store_bool(convertedValue)))\n            }\n            /// @ast-id 189 @src 0:1495:1802  \"function endAuction() external {...\"\n            function fun_endAuction()\n            {\n                /// @src 0:1544:1559  \"block.timestamp\"\n                let expr := timestamp()\n                /// @src 0:1563:1573  \"biddingEnd\"\n                let _1 := read_from_storage_split_offset_uint256(0x01)\n                let expr_1 := _1\n                /// @src 0:1544:1573  \"block.timestamp >= biddingEnd\"\n                let expr_2 := iszero(lt(cleanup_uint256(expr), cleanup_uint256(expr_1)))\n                /// @src 0:1536:1600  \"require(block.timestamp >= biddingEnd, \\\"Auction not yet ended.\\\")\"\n                require_helper_stringliteral_65cb(expr_2)\n                /// @src 0:1619:1624  \"ended\"\n                let _2 := read_from_storage_split_offset_bool(0x06)\n                let expr_3 := _2\n                /// @src 0:1618:1624  \"!ended\"\n                let expr_4 := cleanup_bool(iszero(expr_3))\n                /// @src 0:1610:1651  \"require(!ended, \\\"Auction already ended.\\\")\"\n                require_helper_stringliteral(expr_4)\n                /// @src 0:1670:1674  \"true\"\n                let expr_5 := 0x01\n                /// @src 0:1662:1674  \"ended = true\"\n                update_storage_value_offset_bool_to_bool(0x06, expr_5)\n                /// @src 0:1702:1712  \"highestBid\"\n                let _33_slot := 0x03\n                let expr_173_slot := _33_slot\n                /// @src 0:1702:1719  \"highestBid.bidder\"\n                let _3 := add(expr_173_slot, 0)\n                let _4 := read_from_storage_split_offset_address(_3)\n                let expr_6 := _4\n                /// @src 0:1721:1731  \"highestBid\"\n                let _36_slot := 0x03\n                let expr_175_slot := _36_slot\n                /// @src 0:1721:1738  \"highestBid.amount\"\n                let _5 := add(expr_175_slot, 1)\n                let _6 := read_from_storage_split_offset_uint256(_5)\n                let expr_7 := _6\n                /// @src 0:1689:1739  \"AuctionEnded(highestBid.bidder, highestBid.amount)\"\n                let _7 := 0xdaec4582d5d9595688c8c98545fdd1c696d41c6aeaeb636737e84ed2f5c00eda\n                let _8 := allocate_unbounded()\n                let _9 := abi_encode_address_uint256(_8, expr_6, expr_7)\n                log1(_8, sub(_9, _8), _7)\n                /// @src 0:1758:1766  \"landlord\"\n                let _10 := read_from_storage_split_offset_address(0x00)\n                let expr_8 := _10\n                /// @src 0:1750:1767  \"payable(landlord)\"\n                let expr_9 := convert_address_to_address_payable(expr_8)\n                /// @src 0:1750:1776  \"payable(landlord).transfer\"\n                let expr_183_address := convert_address_payable_to_address(expr_9)\n                /// @src 0:1777:1787  \"highestBid\"\n                let _43_slot := 0x03\n                let expr_184_slot := _43_slot\n                /// @src 0:1777:1794  \"highestBid.amount\"\n                let _11 := add(expr_184_slot, 1)\n                let _12 := read_from_storage_split_offset_uint256(_11)\n                let expr_10 := _12\n                /// @src 0:1750:1795  \"payable(landlord).transfer(highestBid.amount)\"\n                let _13 := 0\n                if iszero(expr_10) { _13 := 2300 }\n                let _14 := call(_13, expr_183_address, expr_10, 0, 0, 0, 0)\n                if iszero(_14) { revert_forward() }\n            }\n        }\n        data \".metadata\" hex\"a26469706673582212205f0607e7183a1b5e0cbf22a8144f901180ce1ae14b364a98bd822bc2f31fb93364736f6c634300081c0033\"\n    }\n}\n",
					"hash": "23ba6cc49d203d0d1610d396ce72891ea75d286e8b645ec303c1953da0449276",
					"factoryDependencies": {}
				}
			}
		},
		"sources": {
			"contracts/RentBid.sol": {
				"id": 0,
				"ast": {
					"absolutePath": "contracts/RentBid.sol",
					"exportedSymbols": {
						"RentBid": [
							190
						]
					},
					"id": 191,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "RentBid",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "57:130:0",
								"text": " @title RentBid\n @dev Place a bid to rent an apartment from a landlord\n @custom:dev-run-script ./scripts/rent_bid.ts"
							},
							"fullyImplemented": true,
							"id": 190,
							"linearizedBaseContracts": [
								190
							],
							"name": "RentBid",
							"nameLocation": "197:7:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "RentBid.Bid",
									"id": 7,
									"members": [
										{
											"constant": false,
											"id": 4,
											"mutability": "mutable",
											"name": "bidder",
											"nameLocation": "242:6:0",
											"nodeType": "VariableDeclaration",
											"scope": 7,
											"src": "234:14:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 3,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "234:7:0",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 6,
											"mutability": "mutable",
											"name": "amount",
											"nameLocation": "266:6:0",
											"nodeType": "VariableDeclaration",
											"scope": 7,
											"src": "258:14:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 5,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "258:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Bid",
									"nameLocation": "220:3:0",
									"nodeType": "StructDefinition",
									"scope": 190,
									"src": "213:66:0",
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "dc1997ea",
									"id": 9,
									"mutability": "mutable",
									"name": "landlord",
									"nameLocation": "300:8:0",
									"nodeType": "VariableDeclaration",
									"scope": 190,
									"src": "285:23:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 8,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "285:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "423b217f",
									"id": 11,
									"mutability": "mutable",
									"name": "biddingEnd",
									"nameLocation": "329:10:0",
									"nodeType": "VariableDeclaration",
									"scope": 190,
									"src": "314:25:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 10,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "314:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "d3a86386",
									"id": 13,
									"mutability": "mutable",
									"name": "minimumBid",
									"nameLocation": "360:10:0",
									"nodeType": "VariableDeclaration",
									"scope": 190,
									"src": "345:25:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 12,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "345:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "d57bde79",
									"id": 16,
									"mutability": "mutable",
									"name": "highestBid",
									"nameLocation": "387:10:0",
									"nodeType": "VariableDeclaration",
									"scope": 190,
									"src": "376:21:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_struct$_Bid_$7_storage",
										"typeString": "struct RentBid.Bid"
									},
									"typeName": {
										"id": 15,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 14,
											"name": "Bid",
											"nameLocations": [
												"376:3:0"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 7,
											"src": "376:3:0"
										},
										"referencedDeclaration": 7,
										"src": "376:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_struct$_Bid_$7_storage_ptr",
											"typeString": "struct RentBid.Bid"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "26b387bb",
									"id": 20,
									"mutability": "mutable",
									"name": "pendingReturns",
									"nameLocation": "439:14:0",
									"nodeType": "VariableDeclaration",
									"scope": 190,
									"src": "404:49:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 19,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 17,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "412:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "404:27:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 18,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "423:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "12fa6feb",
									"id": 22,
									"mutability": "mutable",
									"name": "ended",
									"nameLocation": "471:5:0",
									"nodeType": "VariableDeclaration",
									"scope": 190,
									"src": "459:17:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 21,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "459:4:0",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "public"
								},
								{
									"anonymous": false,
									"eventSelector": "f4757a49b326036464bec6fe419a4ae38c8a02ce3e68bf0809674f6aab8ad300",
									"id": 28,
									"name": "HighestBidIncreased",
									"nameLocation": "489:19:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 27,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 24,
												"indexed": false,
												"mutability": "mutable",
												"name": "bidder",
												"nameLocation": "517:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 28,
												"src": "509:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 23,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "509:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 26,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "533:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 28,
												"src": "525:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 25,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "525:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "508:32:0"
									},
									"src": "483:58:0"
								},
								{
									"anonymous": false,
									"eventSelector": "daec4582d5d9595688c8c98545fdd1c696d41c6aeaeb636737e84ed2f5c00eda",
									"id": 34,
									"name": "AuctionEnded",
									"nameLocation": "552:12:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 33,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 30,
												"indexed": false,
												"mutability": "mutable",
												"name": "winner",
												"nameLocation": "573:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 34,
												"src": "565:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 29,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "565:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 32,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "589:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 34,
												"src": "581:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 31,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "581:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "564:32:0"
									},
									"src": "546:51:0"
								},
								{
									"body": {
										"id": 57,
										"nodeType": "Block",
										"src": "658:125:0",
										"statements": [
											{
												"expression": {
													"id": 44,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 41,
														"name": "landlord",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 9,
														"src": "668:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 42,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "679:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 43,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "683:6:0",
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "679:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "668:21:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 45,
												"nodeType": "ExpressionStatement",
												"src": "668:21:0"
											},
											{
												"expression": {
													"id": 51,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 46,
														"name": "biddingEnd",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 11,
														"src": "699:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 50,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"id": 47,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967292,
																"src": "712:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 48,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "718:9:0",
															"memberName": "timestamp",
															"nodeType": "MemberAccess",
															"src": "712:15:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"id": 49,
															"name": "_biddingTime",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 36,
															"src": "730:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "712:30:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "699:43:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 52,
												"nodeType": "ExpressionStatement",
												"src": "699:43:0"
											},
											{
												"expression": {
													"id": 55,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 53,
														"name": "minimumBid",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 13,
														"src": "752:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 54,
														"name": "_minimumBid",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 38,
														"src": "765:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "752:24:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 56,
												"nodeType": "ExpressionStatement",
												"src": "752:24:0"
											}
										]
									},
									"id": 58,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 39,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 36,
												"mutability": "mutable",
												"name": "_biddingTime",
												"nameLocation": "623:12:0",
												"nodeType": "VariableDeclaration",
												"scope": 58,
												"src": "615:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 35,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "615:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 38,
												"mutability": "mutable",
												"name": "_minimumBid",
												"nameLocation": "645:11:0",
												"nodeType": "VariableDeclaration",
												"scope": 58,
												"src": "637:19:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 37,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "637:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "614:43:0"
									},
									"returnParameters": {
										"id": 40,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "658:0:0"
									},
									"scope": 190,
									"src": "603:180:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 116,
										"nodeType": "Block",
										"src": "821:436:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 65,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 62,
																	"name": "block",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967292,
																	"src": "839:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_block",
																		"typeString": "block"
																	}
																},
																"id": 63,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "845:9:0",
																"memberName": "timestamp",
																"nodeType": "MemberAccess",
																"src": "839:15:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"id": 64,
																"name": "biddingEnd",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 11,
																"src": "858:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "839:29:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "42696464696e6720656e6465642e",
															"id": 66,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "870:16:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_a0fa2d818fda730b57b69ddd34f18fce80fbcc8a51b95f97564dd0dcb6d45e35",
																"typeString": "literal_string \"Bidding ended.\""
															},
															"value": "Bidding ended."
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_a0fa2d818fda730b57b69ddd34f18fce80fbcc8a51b95f97564dd0dcb6d45e35",
																"typeString": "literal_string \"Bidding ended.\""
															}
														],
														"id": 61,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "831:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 67,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "831:56:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 68,
												"nodeType": "ExpressionStatement",
												"src": "831:56:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 73,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 70,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "905:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 71,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "909:5:0",
																"memberName": "value",
																"nodeType": "MemberAccess",
																"src": "905:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 72,
																"name": "minimumBid",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 13,
																"src": "918:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "905:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "42696420746f6f206c6f772e",
															"id": 74,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "930:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_1b69cea4dd1bc42cb9c89f7ddcf749fad8c35c9b73f93fa0dfc6a8bfbe8df0ef",
																"typeString": "literal_string \"Bid too low.\""
															},
															"value": "Bid too low."
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_1b69cea4dd1bc42cb9c89f7ddcf749fad8c35c9b73f93fa0dfc6a8bfbe8df0ef",
																"typeString": "literal_string \"Bid too low.\""
															}
														],
														"id": 69,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "897:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 75,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "897:48:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 76,
												"nodeType": "ExpressionStatement",
												"src": "897:48:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 82,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 78,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "963:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 79,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "967:5:0",
																"memberName": "value",
																"nodeType": "MemberAccess",
																"src": "963:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"expression": {
																	"id": 80,
																	"name": "highestBid",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 16,
																	"src": "975:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Bid_$7_storage",
																		"typeString": "struct RentBid.Bid storage ref"
																	}
																},
																"id": 81,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "986:6:0",
																"memberName": "amount",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 6,
																"src": "975:17:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "963:29:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "546865726520616c7265616479206973206120686967686572206269642e",
															"id": 83,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "994:32:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5dc34ddce75116985854950973e5007665ff9c5bf70776d43a373ddd14c06694",
																"typeString": "literal_string \"There already is a higher bid.\""
															},
															"value": "There already is a higher bid."
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5dc34ddce75116985854950973e5007665ff9c5bf70776d43a373ddd14c06694",
																"typeString": "literal_string \"There already is a higher bid.\""
															}
														],
														"id": 77,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "955:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 84,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "955:72:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 85,
												"nodeType": "ExpressionStatement",
												"src": "955:72:0"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 89,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 86,
															"name": "highestBid",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 16,
															"src": "1042:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Bid_$7_storage",
																"typeString": "struct RentBid.Bid storage ref"
															}
														},
														"id": 87,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1053:6:0",
														"memberName": "amount",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 6,
														"src": "1042:17:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 88,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1063:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1042:22:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 99,
												"nodeType": "IfStatement",
												"src": "1038:106:0",
												"trueBody": {
													"id": 98,
													"nodeType": "Block",
													"src": "1066:78:0",
													"statements": [
														{
															"expression": {
																"id": 96,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 90,
																		"name": "pendingReturns",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 20,
																		"src": "1080:14:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																			"typeString": "mapping(address => uint256)"
																		}
																	},
																	"id": 93,
																	"indexExpression": {
																		"expression": {
																			"id": 91,
																			"name": "highestBid",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 16,
																			"src": "1095:10:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Bid_$7_storage",
																				"typeString": "struct RentBid.Bid storage ref"
																			}
																		},
																		"id": 92,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "1106:6:0",
																		"memberName": "bidder",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 4,
																		"src": "1095:17:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "1080:33:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"expression": {
																		"id": 94,
																		"name": "highestBid",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 16,
																		"src": "1116:10:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Bid_$7_storage",
																			"typeString": "struct RentBid.Bid storage ref"
																		}
																	},
																	"id": 95,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1127:6:0",
																	"memberName": "amount",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 6,
																	"src": "1116:17:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1080:53:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 97,
															"nodeType": "ExpressionStatement",
															"src": "1080:53:0"
														}
													]
												}
											},
											{
												"expression": {
													"id": 107,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 100,
														"name": "highestBid",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 16,
														"src": "1154:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Bid_$7_storage",
															"typeString": "struct RentBid.Bid storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"expression": {
																	"id": 102,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "1171:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 103,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "1175:6:0",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "1171:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"expression": {
																	"id": 104,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "1183:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 105,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "1187:5:0",
																"memberName": "value",
																"nodeType": "MemberAccess",
																"src": "1183:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 101,
															"name": "Bid",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 7,
															"src": "1167:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_struct$_Bid_$7_storage_ptr_$",
																"typeString": "type(struct RentBid.Bid storage pointer)"
															}
														},
														"id": 106,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "structConstructorCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1167:26:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Bid_$7_memory_ptr",
															"typeString": "struct RentBid.Bid memory"
														}
													},
													"src": "1154:39:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Bid_$7_storage",
														"typeString": "struct RentBid.Bid storage ref"
													}
												},
												"id": 108,
												"nodeType": "ExpressionStatement",
												"src": "1154:39:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"expression": {
																"id": 110,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "1228:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 111,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1232:6:0",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "1228:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 112,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "1240:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 113,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1244:5:0",
															"memberName": "value",
															"nodeType": "MemberAccess",
															"src": "1240:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 109,
														"name": "HighestBidIncreased",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 28,
														"src": "1208:19:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 114,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1208:42:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 115,
												"nodeType": "EmitStatement",
												"src": "1203:47:0"
											}
										]
									},
									"functionSelector": "1998aeef",
									"id": 117,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "bid",
									"nameLocation": "798:3:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 59,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "801:2:0"
									},
									"returnParameters": {
										"id": 60,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "821:0:0"
									},
									"scope": 190,
									"src": "789:468:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 150,
										"nodeType": "Block",
										"src": "1292:197:0",
										"statements": [
											{
												"assignments": [
													121
												],
												"declarations": [
													{
														"constant": false,
														"id": 121,
														"mutability": "mutable",
														"name": "amount",
														"nameLocation": "1307:6:0",
														"nodeType": "VariableDeclaration",
														"scope": 150,
														"src": "1302:11:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 120,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "1302:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 126,
												"initialValue": {
													"baseExpression": {
														"id": 122,
														"name": "pendingReturns",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 20,
														"src": "1316:14:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 125,
													"indexExpression": {
														"expression": {
															"id": 123,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "1331:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 124,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1335:6:0",
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "1331:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "1316:26:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1302:40:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 130,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 128,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 121,
																"src": "1360:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 129,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1369:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1360:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4e6f2066756e647320746f2077697468647261772e",
															"id": 131,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1372:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_89e29624f9c8f2d9f2ba850f0474a53cd666f32dac547fc539d47f8d1d3a5fb8",
																"typeString": "literal_string \"No funds to withdraw.\""
															},
															"value": "No funds to withdraw."
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_89e29624f9c8f2d9f2ba850f0474a53cd666f32dac547fc539d47f8d1d3a5fb8",
																"typeString": "literal_string \"No funds to withdraw.\""
															}
														],
														"id": 127,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1352:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 132,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1352:44:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 133,
												"nodeType": "ExpressionStatement",
												"src": "1352:44:0"
											},
											{
												"expression": {
													"id": 139,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 134,
															"name": "pendingReturns",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 20,
															"src": "1406:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 137,
														"indexExpression": {
															"expression": {
																"id": 135,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "1421:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 136,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1425:6:0",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "1421:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1406:26:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "30",
														"id": 138,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1435:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1406:30:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 140,
												"nodeType": "ExpressionStatement",
												"src": "1406:30:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 147,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 121,
															"src": "1475:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"expression": {
																		"id": 143,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "1454:3:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 144,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1458:6:0",
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "1454:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 142,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1446:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_payable_$",
																	"typeString": "type(address payable)"
																},
																"typeName": {
																	"id": 141,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1446:8:0",
																	"stateMutability": "payable",
																	"typeDescriptions": {}
																}
															},
															"id": 145,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1446:19:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"id": 146,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1466:8:0",
														"memberName": "transfer",
														"nodeType": "MemberAccess",
														"src": "1446:28:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 148,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1446:36:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 149,
												"nodeType": "ExpressionStatement",
												"src": "1446:36:0"
											}
										]
									},
									"functionSelector": "3ccfd60b",
									"id": 151,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "withdraw",
									"nameLocation": "1272:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 118,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1280:2:0"
									},
									"returnParameters": {
										"id": 119,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1292:0:0"
									},
									"scope": 190,
									"src": "1263:226:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 188,
										"nodeType": "Block",
										"src": "1526:276:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 158,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 155,
																	"name": "block",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967292,
																	"src": "1544:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_block",
																		"typeString": "block"
																	}
																},
																"id": 156,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "1550:9:0",
																"memberName": "timestamp",
																"nodeType": "MemberAccess",
																"src": "1544:15:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 157,
																"name": "biddingEnd",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 11,
																"src": "1563:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1544:29:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "41756374696f6e206e6f742079657420656e6465642e",
															"id": 159,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1575:24:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_65cbaa8ff228de128dd382a5d49f2351624568c26677af318c390a9dbebd59b7",
																"typeString": "literal_string \"Auction not yet ended.\""
															},
															"value": "Auction not yet ended."
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_65cbaa8ff228de128dd382a5d49f2351624568c26677af318c390a9dbebd59b7",
																"typeString": "literal_string \"Auction not yet ended.\""
															}
														],
														"id": 154,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1536:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 160,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1536:64:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 161,
												"nodeType": "ExpressionStatement",
												"src": "1536:64:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 164,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "!",
															"prefix": true,
															"src": "1618:6:0",
															"subExpression": {
																"id": 163,
																"name": "ended",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 22,
																"src": "1619:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "41756374696f6e20616c726561647920656e6465642e",
															"id": 165,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1626:24:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_54854b7ae1c82c7a55a4c0721457d90a50b8592fc3dce7f0d7542ab8aa48a6be",
																"typeString": "literal_string \"Auction already ended.\""
															},
															"value": "Auction already ended."
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_54854b7ae1c82c7a55a4c0721457d90a50b8592fc3dce7f0d7542ab8aa48a6be",
																"typeString": "literal_string \"Auction already ended.\""
															}
														],
														"id": 162,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1610:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 166,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1610:41:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 167,
												"nodeType": "ExpressionStatement",
												"src": "1610:41:0"
											},
											{
												"expression": {
													"id": 170,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 168,
														"name": "ended",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 22,
														"src": "1662:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 169,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1670:4:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "1662:12:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 171,
												"nodeType": "ExpressionStatement",
												"src": "1662:12:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"expression": {
																"id": 173,
																"name": "highestBid",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 16,
																"src": "1702:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Bid_$7_storage",
																	"typeString": "struct RentBid.Bid storage ref"
																}
															},
															"id": 174,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1713:6:0",
															"memberName": "bidder",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 4,
															"src": "1702:17:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 175,
																"name": "highestBid",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 16,
																"src": "1721:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Bid_$7_storage",
																	"typeString": "struct RentBid.Bid storage ref"
																}
															},
															"id": 176,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1732:6:0",
															"memberName": "amount",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 6,
															"src": "1721:17:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 172,
														"name": "AuctionEnded",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 34,
														"src": "1689:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 177,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1689:50:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 178,
												"nodeType": "EmitStatement",
												"src": "1684:55:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 184,
																"name": "highestBid",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 16,
																"src": "1777:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Bid_$7_storage",
																	"typeString": "struct RentBid.Bid storage ref"
																}
															},
															"id": 185,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1788:6:0",
															"memberName": "amount",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 6,
															"src": "1777:17:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 181,
																	"name": "landlord",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 9,
																	"src": "1758:8:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 180,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1750:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_payable_$",
																	"typeString": "type(address payable)"
																},
																"typeName": {
																	"id": 179,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1750:8:0",
																	"stateMutability": "payable",
																	"typeDescriptions": {}
																}
															},
															"id": 182,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1750:17:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"id": 183,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1768:8:0",
														"memberName": "transfer",
														"nodeType": "MemberAccess",
														"src": "1750:26:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 186,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1750:45:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 187,
												"nodeType": "ExpressionStatement",
												"src": "1750:45:0"
											}
										]
									},
									"functionSelector": "fe67a54b",
									"id": 189,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "endAuction",
									"nameLocation": "1504:10:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 152,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1514:2:0"
									},
									"returnParameters": {
										"id": 153,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1526:0:0"
									},
									"scope": 190,
									"src": "1495:307:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 191,
							"src": "188:1616:0",
							"usedErrors": [],
							"usedEvents": [
								28,
								34
							]
						}
					],
					"src": "32:1773:0"
				}
			}
		},
		"errors": [
			{
				"component": "general",
				"errorCode": null,
				"formattedMessage": "\nWarning: It looks like you are using '<address payable>.send/transfer(<X>)'.\nUsing '<address payable>.send/transfer(<X>)' is deprecated and strongly discouraged!\nThe resolc compiler uses a heuristic to detect '<address payable>.send/transfer(<X>)' calls,\nwhich disables call re-entrancy and supplies all remaining gas instead of the 2300 gas stipend.\nHowever, detection is not guaranteed. You are advised to carefully test this, employ\nre-entrancy guards or use the withdrawal pattern instead!\nLearn more on https://docs.soliditylang.org/en/latest/security-considerations.html#reentrancy\nand https://docs.soliditylang.org/en/latest/common-patterns.html#withdrawal-from-contracts\n\n--> contracts/RentBid.sol\n",
				"message": "\nWarning: It looks like you are using '<address payable>.send/transfer(<X>)'.\nUsing '<address payable>.send/transfer(<X>)' is deprecated and strongly discouraged!\nThe resolc compiler uses a heuristic to detect '<address payable>.send/transfer(<X>)' calls,\nwhich disables call re-entrancy and supplies all remaining gas instead of the 2300 gas stipend.\nHowever, detection is not guaranteed. You are advised to carefully test this, employ\nre-entrancy guards or use the withdrawal pattern instead!\nLearn more on https://docs.soliditylang.org/en/latest/security-considerations.html#reentrancy\nand https://docs.soliditylang.org/en/latest/common-patterns.html#withdrawal-from-contracts\n",
				"severity": "warning",
				"sourceLocation": {
					"file": "0",
					"start": 1446,
					"end": 1482
				},
				"type": "Warning"
			},
			{
				"component": "general",
				"errorCode": null,
				"formattedMessage": "\nWarning: It looks like you are using '<address payable>.send/transfer(<X>)'.\nUsing '<address payable>.send/transfer(<X>)' is deprecated and strongly discouraged!\nThe resolc compiler uses a heuristic to detect '<address payable>.send/transfer(<X>)' calls,\nwhich disables call re-entrancy and supplies all remaining gas instead of the 2300 gas stipend.\nHowever, detection is not guaranteed. You are advised to carefully test this, employ\nre-entrancy guards or use the withdrawal pattern instead!\nLearn more on https://docs.soliditylang.org/en/latest/security-considerations.html#reentrancy\nand https://docs.soliditylang.org/en/latest/common-patterns.html#withdrawal-from-contracts\n\n--> contracts/RentBid.sol\n",
				"message": "\nWarning: It looks like you are using '<address payable>.send/transfer(<X>)'.\nUsing '<address payable>.send/transfer(<X>)' is deprecated and strongly discouraged!\nThe resolc compiler uses a heuristic to detect '<address payable>.send/transfer(<X>)' calls,\nwhich disables call re-entrancy and supplies all remaining gas instead of the 2300 gas stipend.\nHowever, detection is not guaranteed. You are advised to carefully test this, employ\nre-entrancy guards or use the withdrawal pattern instead!\nLearn more on https://docs.soliditylang.org/en/latest/security-considerations.html#reentrancy\nand https://docs.soliditylang.org/en/latest/common-patterns.html#withdrawal-from-contracts\n",
				"severity": "warning",
				"sourceLocation": {
					"file": "0",
					"start": 1750,
					"end": 1795
				},
				"type": "Warning"
			}
		],
		"version": "0.8.28",
		"long_version": "0.8.28+commit.7893614a.Emscripten.clang",
		"revive_version": "0.1.0-dev.12+commit.66f9a4d.llvm-18.1.8"
	}
}